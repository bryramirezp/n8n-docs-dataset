{"content_type": "General Concept", "section_title": "Contributor Covenant Code of Conduct", "user_question": "What is the purpose of the Contributor Covenant Code of Conduct in n8n?", "concise_answer": "The Contributor Covenant Code of Conduct aims to foster an open and welcoming environment by ensuring that participation in the n8n project and community is harassment-free for everyone, regardless of personal attributes or background.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Code of Conduct", "Community Guidelines", "Harassment-Free"]}
{"content_type": "General Concept", "section_title": "Our Standards", "user_question": "What behaviors are encouraged and discouraged in the n8n community?", "concise_answer": "Encouraged behaviors include using inclusive language, respecting differing viewpoints, accepting constructive criticism, focusing on community benefits, and showing empathy. Discouraged behaviors include using sexualized language, trolling, harassment, and publishing private information without permission.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Community Standards", "Positive Behavior", "Unacceptable Behavior"]}
{"content_type": "General Concept", "section_title": "Our Responsibilities", "user_question": "What responsibilities do project maintainers have according to the n8n Code of Conduct?", "concise_answer": "Project maintainers are responsible for clarifying acceptable behavior standards and taking appropriate action against unacceptable behavior. They can remove or reject contributions not aligned with the Code of Conduct and ban contributors for inappropriate behavior.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Project Maintainers", "Responsibilities", "Code Enforcement"]}
{"content_type": "General Concept", "section_title": "Scope", "user_question": "Where does the n8n Code of Conduct apply?", "concise_answer": "The Code of Conduct applies within project spaces and public spaces when representing the project or community, such as using official emails or social media accounts, or acting as a representative at events.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Code Scope", "Project Representation", "Public Spaces"]}
{"content_type": "General Concept", "section_title": "Enforcement", "user_question": "How is the n8n Code of Conduct enforced?", "concise_answer": "Instances of unacceptable behavior can be reported to the project team, who will review and investigate complaints while maintaining confidentiality. Project maintainers not enforcing the Code in good faith may face repercussions.", "structured_data": {"key_parameters": [{"name": "Contact Email", "description": "Email address to report unacceptable behavior.", "example": "jan@n8n.io"}], "code_block": null}, "keywords": ["Code Enforcement", "Reporting", "Confidentiality"]}
{"content_type": "General Concept", "section_title": "Attribution", "user_question": "What is the source of the n8n Code of Conduct?", "concise_answer": "The n8n Code of Conduct is adapted from the Contributor Covenant, version 1.4.", "structured_data": {"key_parameters": [{"name": "Source URL", "description": "URL of the original Contributor Covenant.", "example": "https://www.contributor-covenant.org/version/1/4/code-of-conduct.html"}], "code_block": null}, "keywords": ["Attribution", "Contributor Covenant", "Source"]}
{"content_type": "How-To Guide", "section_title": "Contributing", "user_question": "How can I contribute to the n8n documentation?", "concise_answer": "To contribute to the n8n documentation, review the existing documentation for structure and style, and follow the guidelines. You can work on your local machine or make changes directly in GitHub.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Contributing", "Documentation", "Guidelines"]}
{"content_type": "General Concept", "section_title": "n8n's license", "user_question": "What type of license does n8n use?", "concise_answer": "n8n is fair code licensed. For more information, refer to the License documentation.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["License", "Fair Code", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Working locally", "user_question": "How can I work on n8n documentation locally?", "concise_answer": "To work on n8n documentation locally, you need to fork the documentation repository on GitHub, clone your fork, and create a new branch. After making changes, push your branch and create a pull request to merge your work.", "structured_data": {"key_parameters": [{"name": "GitHub account", "description": "A GitHub account is required to fork and clone the repository.", "example": null}, {"name": "Git installation", "description": "Git must be installed on your local machine to clone and manage the repository.", "example": null}], "code_block": "git clone https://github.com/<your-username>/n8n-docs.git cd n8n-docs git checkout -b <branch-name>"}, "keywords": ["n8n", "documentation", "local work", "GitHub", "fork repository"]}
{"content_type": "How-To Guide", "section_title": "Writing in GitHub", "user_question": "Can I edit n8n documentation directly on GitHub?", "concise_answer": "Yes, you can edit n8n documentation directly on GitHub, which is suitable for small changes. Follow GitHub's documentation on editing files.", "structured_data": {"key_parameters": [{"name": "GitHub account", "description": "A GitHub account is necessary to edit files directly on GitHub.", "example": null}], "code_block": null}, "keywords": ["n8n", "documentation", "GitHub", "edit files", "small changes"]}
{"content_type": "How-To Guide", "section_title": "Previewing your work", "user_question": "How can I preview my changes to the n8n documentation?", "concise_answer": "You can preview your changes by building the docs locally or by submitting a pull request, which automatically triggers a preview build.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "documentation", "preview", "pull request", "build locally"]}
{"content_type": "General Concept", "section_title": "General checklist", "user_question": "What should I check before submitting a pull request for n8n documentation?", "concise_answer": "Before submitting a pull request, ensure all necessary files and images are included, links are working, documentation files end with an empty newline, the commit message describes the changes, and the PR explains the changes and their necessity.", "structured_data": {"key_parameters": [{"name": "Files and images", "description": "Ensure all necessary files and images are included in the PR.", "example": null}, {"name": "Links", "description": "Verify that all links are working and direct to the correct location.", "example": null}, {"name": "Commit message", "description": "The commit message should describe the changes made.", "example": null}], "code_block": null}, "keywords": ["n8n", "documentation", "pull request", "checklist", "commit message"]}
{"content_type": "Node Reference", "section_title": "Documenting nodes", "user_question": "How should I document nodes for n8n?", "concise_answer": "To document nodes for n8n, create a directory with the node's name in the appropriate location, and include a text file describing the node's functionality. For credentials, describe how to obtain them and list OAuth first if multiple methods exist.", "structured_data": {"key_parameters": [{"name": "Node directory", "description": "Create a directory with the node's name in the specified location.", "example": "docs/integrations/builtin/app-nodes/"}, {"name": "Node description", "description": "Include a text file describing the node's functionality.", "example": "n8n-nodes-base.<node-name>.md"}, {"name": "Credentials documentation", "description": "Describe how to obtain credentials for the node, listing OAuth first if applicable.", "example": null}], "code_block": null}, "keywords": ["n8n", "node documentation", "credentials", "OAuth", "directory structure"]}
{"content_type": "General Concept", "section_title": "n8n Contributor License Agreement", "user_question": "What is the n8n Contributor License Agreement?", "concise_answer": "The n8n Contributor License Agreement allows n8n to license your contributions on any terms. Contributions are provided 'as is' without warranty, and you are not liable for any damages related to the software or license.", "structured_data": {"key_parameters": [{"name": "License terms", "description": "n8n can license contributions on any terms.", "example": null}, {"name": "Warranty", "description": "Contributions are provided without any warranty or condition.", "example": null}, {"name": "Liability", "description": "Contributors are not liable for any damages related to the software or license.", "example": null}], "code_block": null}, "keywords": ["n8n", "contributor license agreement", "license terms", "warranty", "liability"]}
{"content_type": "General Concept", "section_title": "License Terms", "user_question": "What does the n8n license allow and restrict in terms of selling the software?", "concise_answer": "The n8n license, under the Apache 2.0 terms, does not grant the right to sell the software. 'Sell' is defined as providing the software to third parties for a fee or other consideration, where the value is derived from the software's functionality.", "structured_data": {"key_parameters": [{"name": "Sell", "description": "Practicing any or all of the rights granted under the License to provide to third parties, for a fee or other consideration, a product or service whose value derives from the software's functionality.", "example": null}], "code_block": null}, "keywords": ["n8n", "license", "sell", "Apache 2.0", "software rights"]}
{"content_type": "General Concept", "section_title": "Definitions", "user_question": "What are some key definitions in the n8n license?", "concise_answer": "The n8n license includes definitions for terms such as 'License', 'Licensor', 'Legal Entity', 'Source', 'Object', 'Work', 'Derivative Works', 'Contribution', and 'Contributor'. These terms define the scope and application of the license.", "structured_data": {"key_parameters": [{"name": "License", "description": "The terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of the document.", "example": null}, {"name": "Licensor", "description": "The copyright owner or entity authorized by the copyright owner that is granting the License.", "example": null}, {"name": "Legal Entity", "description": "The union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity.", "example": null}, {"name": "Source", "description": "The preferred form for making modifications, including software source code, documentation source, and configuration files.", "example": null}, {"name": "Object", "description": "Any form resulting from mechanical transformation or translation of a Source form.", "example": null}, {"name": "Work", "description": "The work of authorship made available under the License.", "example": null}, {"name": "Derivative Works", "description": "Any work based on the Work that represents an original work of authorship.", "example": null}, {"name": "Contribution", "description": "Any work of authorship submitted to Licensor for inclusion in the Work.", "example": null}, {"name": "Contributor", "description": "Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor.", "example": null}], "code_block": null}, "keywords": ["n8n", "license definitions", "Apache 2.0", "terms", "legal"]}
{"content_type": "General Concept", "section_title": "Grant of Copyright License", "user_question": "What rights are granted under the copyright license in this documentation?", "concise_answer": "The copyright license grants you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the work and derivative works in source or object form.", "structured_data": {"key_parameters": [{"name": "License Type", "description": "Type of license granted for copyright.", "example": "Perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable"}], "code_block": null}, "keywords": ["copyright license", "derivative works", "distribution"]}
{"content_type": "General Concept", "section_title": "Grant of Patent License", "user_question": "What does the patent license allow under this documentation?", "concise_answer": "The patent license allows you to make, have made, use, offer to sell, sell, import, and otherwise transfer the work. This license is perpetual, worldwide, non-exclusive, no-charge, royalty-free, and irrevocable, except if you initiate patent litigation against any entity regarding the work.", "structured_data": {"key_parameters": [{"name": "Patent License Conditions", "description": "Conditions under which the patent license is granted.", "example": "Perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable"}], "code_block": null}, "keywords": ["patent license", "transfer", "litigation"]}
{"content_type": "General Concept", "section_title": "Redistribution", "user_question": "What are the conditions for redistributing the work or derivative works?", "concise_answer": "You may redistribute the work or derivative works in any medium, with or without modifications, in source or object form, provided you include a copy of the license, state changes made, retain notices, and include a NOTICE file if applicable.", "structured_data": {"key_parameters": [{"name": "Redistribution Conditions", "description": "Conditions that must be met to redistribute the work.", "example": "Include license, state changes, retain notices"}], "code_block": null}, "keywords": ["redistribution", "license", "modifications"]}
{"content_type": "General Concept", "section_title": "Submission of Contributions", "user_question": "What happens when you submit contributions to the work?", "concise_answer": "Unless stated otherwise, any contribution you submit for inclusion in the work is under the terms of this license, without additional terms. This does not override any separate license agreements you may have with the licensor.", "structured_data": {"key_parameters": [{"name": "Contribution Terms", "description": "Terms under which contributions are submitted.", "example": "Under the terms of this license"}], "code_block": null}, "keywords": ["contributions", "submission", "license terms"]}
{"content_type": "General Concept", "section_title": "Trademarks", "user_question": "Can I use the trademarks of n8n under the Apache License?", "concise_answer": "The Apache License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["trademarks", "Apache License", "n8n", "usage", "permissions"]}
{"content_type": "General Concept", "section_title": "Disclaimer of Warranty", "user_question": "What warranty does the Apache License provide for n8n?", "concise_answer": "The Apache License provides the Work on an 'AS IS' basis, without warranties or conditions of any kind, either express or implied. You are responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with it.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["warranty", "Apache License", "n8n", "disclaimer", "risks"]}
{"content_type": "General Concept", "section_title": "Limitation of Liability", "user_question": "What is the limitation of liability under the Apache License for n8n?", "concise_answer": "Under the Apache License, no Contributor is liable for damages arising from the use or inability to use the Work, including direct, indirect, special, incidental, or consequential damages, even if advised of the possibility of such damages.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["liability", "Apache License", "n8n", "damages", "limitations"]}
{"content_type": "General Concept", "section_title": "Accepting Warranty or Additional Liability", "user_question": "Can I offer additional warranty or liability when redistributing n8n?", "concise_answer": "You may offer additional warranty or liability when redistributing the Work, but you must do so on your own behalf and agree to indemnify each Contributor for any liability incurred by your acceptance of such obligations.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["warranty", "liability", "redistribution", "n8n", "indemnity"]}
{"content_type": "How-To Guide", "section_title": "APPENDIX: How to apply the Apache License to your work", "user_question": "How do I apply the Apache License to my work?", "concise_answer": "To apply the Apache License to your work, attach the provided boilerplate notice with your identifying information, ensuring it is enclosed in the appropriate comment syntax for the file format. Include a file or class name and description of purpose for easier identification.", "structured_data": {"key_parameters": [{"name": "boilerplate notice", "description": "The standard text provided by the Apache License to be included in your work.", "example": "Copyright [2020] [n8n GmbH]"}], "code_block": null}, "keywords": ["Apache License", "apply", "boilerplate", "n8n", "documentation"]}
{"content_type": "General Concept", "section_title": "Previewing and building the documentation locally", "user_question": "What are the prerequisites for building n8n documentation locally?", "concise_answer": "To build n8n documentation locally, you need Python 3.8 or above, Pip, and it's recommended to use a virtual environment like venv. Ensure your local editor settings do not override the .editorconfig file settings.", "structured_data": {"key_parameters": [{"name": "Python version", "description": "The required version of Python to build the documentation.", "example": "3.8 or above"}, {"name": "Package manager", "description": "The tool used to manage Python packages.", "example": "Pip"}, {"name": "Virtual environment", "description": "A recommended tool to create isolated Python environments.", "example": "venv"}], "code_block": null}, "keywords": ["documentation", "n8n", "local build", "prerequisites", "Python"]}
{"content_type": "Configuration", "section_title": "Editor Configuration", "user_question": "How should I configure my editor for n8n documentation?", "concise_answer": "Ensure your editor does not replace tabs with spaces, as this can affect code samples. One tab should be equivalent to four spaces.", "structured_data": {"key_parameters": [{"name": "Tab Settings", "description": "Configure your editor to use tabs instead of spaces, with one tab equivalent to four spaces.", "example": null}], "code_block": null}, "keywords": ["editorconfig", "tabs", "spaces", "code samples", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Steps for n8n GitHub Organization Members", "user_question": "How do I set up the n8n documentation repository as a member of the n8n GitHub organization?", "concise_answer": "Set up an SSH token and add it to your GitHub account. Clone the repository using the provided commands, set up a virtual environment if needed, and install dependencies.", "structured_data": {"key_parameters": null, "code_block": "git clone --recurse-submodules git@github.com:n8n-io/n8n-docs.git\ncd n8n-docs\npip install -r requirements.txt\npip install _submodules/insiders"}, "keywords": ["n8n", "GitHub", "SSH token", "clone", "dependencies"]}
{"content_type": "How-To Guide", "section_title": "Steps for External Contributors", "user_question": "How can external contributors set up the n8n documentation repository?", "concise_answer": "External contributors should fork the repository, clone it, and install the necessary dependencies. They can use the free version of Material for MkDocs for local previews.", "structured_data": {"key_parameters": null, "code_block": "git clone https://github.com/<your-username>/n8n-docs.git\ncd n8n-docs\npip install -r requirements.txt\npip install mkdocs-material\nmkdocs serve"}, "keywords": ["n8n", "external contributors", "fork", "clone", "MkDocs"]}
{"content_type": "General Concept", "section_title": "Contributing", "user_question": "Where can I find guidance on contributing to n8n documentation?", "concise_answer": "Read the CONTRIBUTING guide and refer to the style guidance in the wiki. For support, visit n8n's forum.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["contributing", "n8n", "documentation", "support", "forum"]}
{"content_type": "Configuration", "section_title": "AI Environment Variables", "user_question": "What are the AI environment variables for n8n?", "concise_answer": "The AI environment variables include N8N_AI_ENABLED, N8N_AI_PROVIDER, and N8N_AI_OPENAI_API_KEY. These control AI features and the provider used.", "structured_data": {"key_parameters": [{"name": "N8N_AI_ENABLED", "description": "Whether AI features are enabled.", "example": "false"}, {"name": "N8N_AI_PROVIDER", "description": "The AI provider to use.", "example": "openai"}, {"name": "N8N_AI_OPENAI_API_KEY", "description": "Your OpenAI API key.", "example": "-"}], "code_block": null}, "keywords": ["AI", "environment variables", "n8n", "OpenAI", "configuration"]}
{"content_type": "How-To Guide", "section_title": "Creating n8n-nodes-module", "user_question": "How do I create a custom n8n-nodes-module?", "concise_answer": "To create a custom n8n-nodes-module, ensure it meets your needs, such as being for a small group or requiring external dependencies. Note that it can only be installed in self-hosted instances.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "nodes-module", "custom", "self-hosted", "npm package"]}
{"content_type": "General Concept", "section_title": "Prerequisites", "user_question": "What are the prerequisites for creating nodes in n8n?", "concise_answer": "To create nodes in n8n, you need to have Git, Node.js, and npm installed. The minimum required version for Node.js is 14.15, and for npm, it is 6.x. If using npm version 7 or higher, you must enable legacy peer dependencies. Additionally, Lerna should be installed globally.", "structured_data": {"key_parameters": [{"name": "Node.js version", "description": "The minimum required version of Node.js.", "example": "14.15"}, {"name": "npm version", "description": "The minimum required version of npm.", "example": "6.x"}, {"name": "legacy-peer-deps", "description": "A setting required if using npm version 7 or higher.", "example": "true"}], "code_block": null}, "keywords": ["n8n", "prerequisites", "Node.js", "npm", "Lerna"]}
{"content_type": "How-To Guide", "section_title": "Create custom n8n-nodes-module", "user_question": "How do I create a custom n8n-nodes-module for the OpenWeatherMap API?", "concise_answer": "To create a custom n8n-nodes-module for the OpenWeatherMap API, clone the n8n-nodes-starter repository and rename it to n8n-nodes-weather. Update the package.json file to reflect the new module name. Create a new folder called Weather inside the nodes folder and add a Weather.node.ts file with the necessary code.", "structured_data": {"key_parameters": [{"name": "Repository URL", "description": "The URL to clone the starter repository.", "example": "https://github.com/n8n-io/n8n-nodes-starter.git"}, {"name": "Module name", "description": "The name of the new n8n-nodes-module.", "example": "n8n-nodes-weather"}], "code_block": "bash git clone https://github.com/n8n-io/n8n-nodes-starter.git n8n-nodes-weather"}, "keywords": ["n8n", "custom module", "OpenWeatherMap", "nodes", "tutorial"]}
{"content_type": "Code Example", "section_title": "Create custom n8n-nodes-module", "user_question": "Can you provide a code example for creating a Weather node in n8n?", "concise_answer": "Here is a TypeScript code example for creating a Weather node in n8n. It includes the node's description, inputs, outputs, and properties such as operation and format.", "structured_data": {"key_parameters": null, "code_block": "import { IDataObject, IExecuteFunctions, INodeExecutionData, INodeType, INodeTypeDescription, IRequestOptions, NodeApiError, NodeOperationError, } from 'n8n-workflow';\n\nexport class Weather implements INodeType { description: INodeTypeDescription = { displayName: 'Weather', name: 'Weather', icon: 'fa:sun', group: ['input'], version: 1, description: 'Gets current and future weather information', defaults: { name: 'Weather', color: '#554455', }, inputs: ['main'], outputs: ['main'], credentials: [ { name: 'weatherApi', required: true, }, ], properties: [ { displayName: 'Operation', name: 'operation', type: 'options', options: [ { name: 'Current Weather', value: 'currentWeather', description: 'Returns the current weather data', }, { name: '5 day Forecast', value: '5DayForecast', description: 'Returns the weather data for the next 5 days', }, ], default: 'currentWeather', description: 'The operation to perform.', }, { displayName: 'Format', name: 'format', type: 'options', options: [ { name: 'Imperial', value: 'imperial', description: 'Fahrenheit | miles/hour', }, { name: 'Metric', value: 'metric', description: 'Celsius | meter/sec', }, { name: 'Scientific', value: 'standard', description: 'Kelvin | meter/sec', }, ], default: 'metric', description: 'The format in which format the data should be returned.', }"}, "keywords": ["n8n", "Weather node", "code example", "TypeScript", "OpenWeatherMap"]}
{"content_type": "Node Reference", "section_title": "Location Information", "user_question": "What are the options for selecting a location in n8n's weather node?", "concise_answer": "In n8n's weather node, you can select a location using 'City Name', 'City ID', 'Coordinates', or 'Zip Code'. The default option is 'City Name'.", "structured_data": {"key_parameters": [{"name": "locationSelection", "description": "How to define the location for which to return the weather.", "example": "cityName"}], "code_block": null}, "keywords": ["location selection", "weather node", "n8n", "options", "default"]}
{"content_type": "Node Reference", "section_title": "Location Information", "user_question": "How do I specify a city by name in n8n's weather node?", "concise_answer": "To specify a city by name in n8n's weather node, use the 'City' parameter. It requires a string input, such as 'berlin,de'.", "structured_data": {"key_parameters": [{"name": "cityName", "description": "The name of the city to return the weather of.", "example": "berlin,de"}], "code_block": null}, "keywords": ["city name", "weather node", "n8n", "parameter", "input"]}
{"content_type": "Node Reference", "section_title": "Location Information", "user_question": "How can I use a city ID to get weather data in n8n?", "concise_answer": "In n8n, you can use the 'City ID' parameter to get weather data. It requires a numeric ID, with a default value of 160001123.", "structured_data": {"key_parameters": [{"name": "cityId", "description": "The id of city to return the weather of. List can be downloaded here: http://bulk.openweathermap.org/sample/", "example": "160001123"}], "code_block": null}, "keywords": ["city ID", "weather data", "n8n", "parameter", "numeric ID"]}
{"content_type": "Node Reference", "section_title": "Location Information", "user_question": "How do I specify coordinates for weather data in n8n?", "concise_answer": "To specify coordinates in n8n's weather node, use the 'Latitude' and 'Longitude' parameters. Both require string inputs, such as '13.39' for latitude and '52.52' for longitude.", "structured_data": {"key_parameters": [{"name": "latitude", "description": "The latitude of the location to return the weather of.", "example": "13.39"}, {"name": "longitude", "description": "The longitude of the location to return the weather of.", "example": "52.52"}], "code_block": null}, "keywords": ["coordinates", "latitude", "longitude", "weather node", "n8n"]}
{"content_type": "Node Reference", "section_title": "Location Information", "user_question": "How can I use a zip code to get weather data in n8n?", "concise_answer": "In n8n, you can use the 'Zip Code' parameter to get weather data. It requires a string input, such as '10115,de'.", "structured_data": {"key_parameters": [{"name": "zipCode", "description": "The id of city to return the weather of. List can be downloaded here: http://bulk.openweathermap.org/sample/", "example": "10115,de"}], "code_block": null}, "keywords": ["zip code", "weather data", "n8n", "parameter", "input"]}
{"content_type": "Node Reference", "section_title": "Location Information", "user_question": "How do I set the language for weather data output in n8n?", "concise_answer": "To set the language for weather data output in n8n, use the 'Language' parameter. It accepts a two-letter language code, such as 'en' for English.", "structured_data": {"key_parameters": [{"name": "language", "description": "The two letter language code to get your output in (eg. en, de, ...).", "example": "en"}], "code_block": null}, "keywords": ["language", "weather data", "n8n", "parameter", "output"]}
{"content_type": "Code Example", "section_title": "OpenWeatherMap API Integration", "user_question": "How can I integrate the OpenWeatherMap API in n8n?", "concise_answer": "To integrate the OpenWeatherMap API in n8n, you need to set up credentials and configure the node to handle different operations like 'currentWeather' and '5DayForecast'. The code snippet provides a detailed example of how to set up the request parameters and handle API responses.", "structured_data": {"key_parameters": [{"name": "operation", "description": "Specifies the type of weather data to retrieve, such as 'currentWeather' or '5DayForecast'.", "example": "currentWeather"}, {"name": "locationSelection", "description": "Determines the method of specifying the location, such as 'cityName', 'cityId', 'coordinates', or 'zipCode'.", "example": "cityName"}, {"name": "language", "description": "Specifies the language for the API response.", "example": "en"}, {"name": "APPID", "description": "The access token required for authenticating API requests.", "example": "your_access_token"}], "code_block": "const credentials = await this.getCredentials('openWeatherMapApi');\n\nif (credentials === undefined) {\n    throw new NodeOperationError(this.getNode(), 'No credentials got returned!');\n}\n\nconst operation = this.getNodeParameter('operation', 0) as string;\n\nlet endpoint = '';\nlet locationSelection;\nlet language;\n\nlet qs: IDataObject;\n\nfor (let i = 0; i < items.length; i++) {\n\n    try {\n\n        // Set base data\n        qs = {\n            APPID: credentials.accessToken,\n            units: this.getNodeParameter('format', i) as string,\n        };\n\n        // Get the location\n        locationSelection = this.getNodeParameter('locationSelection', i) as string;\n        if (locationSelection === 'cityName') {\n            qs.q = this.getNodeParameter('cityName', i) as string;\n        } else if (locationSelection === 'cityId') {\n            qs.id = this.getNodeParameter('cityId', i) as number;\n        } else if (locationSelection === 'coordinates') {\n            qs.lat = this.getNodeParameter('latitude', i) as string;\n            qs.lon = this.getNodeParameter('longitude', i) as string;\n        } else if (locationSelection === 'zipCode') {\n            qs.zip = this.getNodeParameter('zipCode', i) as string;\n        } else {\n            throw new NodeOperationError(this.getNode(), `The locationSelection \"${locationSelection}\" is not known!`);\n        }\n\n        // Get the language\n        language = this.getNodeParameter('language', i) as string;\n        if (language) {\n            qs.lang = language;\n        }\n\n        if (operation === 'currentWeather') {\n            // ----------------------------------\n            //         currentWeather\n            // ----------------------------------\n\n            endpoint = 'weather';\n        } else if (operation === '5DayForecast') {\n            // ----------------------------------\n            //         5DayForecast\n            // ----------------------------------\n\n            endpoint = 'forecast';\n        } else {\n            throw new NodeOperationError(this.getNode(), `The operation \"${operation}\" is not known!`);\n        }\n\n        const options: IRequestOptions = {\n            method: 'GET',\n            qs,\n            uri: `https://api.openweathermap.org/data/2.5/${endpoint}`,\n            json: true,\n        };\n\n        let responseData;\n        try {\n            responseData = await this.helpers.request(options);\n        } catch (error) {\n            throw new NodeApiError(this.getNode(), error);\n        }\n\n\n        returnData.push(responseData as IDataObject);\n\n    } catch (error) {\n        if (this.continueOnFail()) {\n            returnData.push({json:{ error: error.message }});\n            continue;\n        }\n        throw error;\n    }\n}\n\nreturn [this.helpers.returnJsonArray(returnData)];"}, "keywords": ["OpenWeatherMap", "API Integration", "n8n", "Weather Data", "Node Configuration"]}
{"content_type": "Configuration", "section_title": "Weather API Credentials Setup", "user_question": "How do I set up credentials for the Weather API in n8n?", "concise_answer": "To set up credentials for the Weather API in n8n, create a file named WeatherApi.credentials.ts in the Credentials folder. Define the credential type with an access token property. Then, add the credential to the package.json file under the n8n.credentials array.", "structured_data": {"key_parameters": [{"name": "accessToken", "description": "The access token used for authenticating requests to the Weather API.", "example": "your_access_token"}], "code_block": "import { ICredentialType, INodeProperties, } from 'n8n-workflow';\n\nexport class WeatherApi implements ICredentialType {\n    name = 'weatherApi';\n    displayName = 'Weather API';\n    properties: INodeProperties[] = [\n        {\n            displayName: 'Access Token',\n            name: 'accessToken',\n            type: 'string',\n            default: '',\n        },\n    ];\n}"}, "keywords": ["Weather API", "Credentials", "n8n", "Access Token", "Configuration"]}
{"content_type": "How-To Guide", "section_title": "Develop and test the module", "user_question": "How do I build and test my n8n-nodes-module locally?", "concise_answer": "To build and test your n8n-nodes-module locally, first install the dependencies using 'npm install'. Then, build the code with 'npm run build'. Finally, publish the package locally using 'npm link'. If you encounter permission errors, use 'sudo npm link'.", "structured_data": {"key_parameters": [{"name": "npm install", "description": "Installs the necessary dependencies for the module.", "example": null}, {"name": "npm run build", "description": "Builds the code for the module.", "example": null}, {"name": "npm link", "description": "Publishes the package locally for testing.", "example": null}], "code_block": "npm install\nnpm run build\nnpm link"}, "keywords": ["n8n", "module", "build", "test", "npm"]}
{"content_type": "How-To Guide", "section_title": "Use the n8n-nodes-module in production", "user_question": "How can I use my n8n-nodes-module in a Docker environment?", "concise_answer": "To use your n8n-nodes-module in Docker, create a Dockerfile and add the command 'RUN cd /usr/local/lib/node_modules/n8n && npm install n8n-nodes-weather' before the font installation command. Build your Docker image with the specified N8N_VERSION.", "structured_data": {"key_parameters": [{"name": "Dockerfile", "description": "A file containing instructions to build a Docker image.", "example": null}, {"name": "RUN cd /usr/local/lib/node_modules/n8n && npm install n8n-nodes-weather", "description": "Installs the n8n-nodes-module within the Docker image.", "example": null}, {"name": "N8N_VERSION", "description": "Specifies the version of n8n to use in the Docker image.", "example": "0.177.0"}], "code_block": "FROM node:16-alpine\n\nARG N8N_VERSION\n\nRUN if [ -z \"$N8N_VERSION\" ] ; then echo \"The N8N_VERSION argument is missing!\" ; exit 1; fi\n\nRUN apk add --update graphicsmagick tzdata git tini su-exec\n\nUSER root\n\nRUN apk --update add --virtual build-dependencies python3 build-base ca-certificates && \\\n    npm config set python \"$(which python3)\" && \\\n    npm_config_user=root npm install -g full-icu n8n@${N8N_VERSION} && \\\n    apk del build-dependencies \\\n    && rm -rf /root /tmp/ /var/cache/apk/ && mkdir /root;\n\nRUN cd /usr/local/lib/node_modules/n8n && npm install\n\nRUN apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && \\\n    update-ms-fonts && \\\n    fc-cache -f && \\\n    apk del fonts && \\\n    find /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \\; \\\n    && rm -rf /root /tmp/ /var/cache/apk/ && mkdir /root\n\nENV NODE_ICU_DATA /usr/local/lib/node_modules/full-icu\n\nWORKDIR /data\n\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\nENTRYPOINT [\"tini\", \"--\", \"/docker-entrypoint.sh\"]\n\nEXPOSE 5678/tcp"}, "keywords": ["n8n", "Docker", "module", "production", "installation"]}
{"content_type": "How-To Guide", "section_title": "Creating the node", "user_question": "How do I create a new trigger node in n8n?", "concise_answer": "To create a new trigger node in n8n, first choose the service for which you want to create the node. Create a folder named after your service in PascalCase within the 'packages/nodes-base/nodes' directory. Inside this folder, create a TypeScript file named 'YourNodeNameTrigger.node.ts'. Add an icon file in SVG format to the folder. Define the node's properties in the TypeScript file, including displayName, name, icon, and webhooks. Finally, register the node in 'package.json' and run the necessary commands to build and start n8n in development mode.", "structured_data": {"key_parameters": [{"name": "displayName", "description": "The name displayed in the Editor UI for the node.", "example": "Autofriend Trigger"}, {"name": "name", "description": "The internal name of the node, used in the code.", "example": "autofriendTrigger"}, {"name": "icon", "description": "The icon file for the node, located in the node's folder.", "example": "file:autofriend.svg"}, {"name": "webhooks", "description": "Configuration for webhooks, including HTTP method and path.", "example": "[{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook' }]"}], "code_block": "import { IDataObject, IHookFunctions, INodeType, INodeTypeDescription, IWebhookFunctions, IWebhookResponseData, } from 'n8n-workflow';\n\nexport class AutofriendTrigger implements INodeType {\n  description: INodeTypeDescription = {\n    displayName: 'Autofriend Trigger',\n    name: 'autofriendTrigger',\n    icon: 'file:autofriend.svg',\n    group: ['trigger'],\n    version: 1,\n    subtitle: '={{$parameter[\"event\"]}}',\n    description: 'Handle Autofriend events using webhooks',\n    defaults: {\n      name: 'Autofriend Trigger',\n      color: '#6ad7b9',\n    },\n    inputs: [],\n    outputs: ['main'],\n    credentials: [],\n    webhooks: [\n      { name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },\n    ],\n    properties: [],\n  };\n  async webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {\n    // Webhook logic here\n  }\n}"}, "keywords": ["n8n", "trigger node", "node creation", "webhooks", "TypeScript"]}
{"content_type": "Configuration", "section_title": "Adding the node to Editor UI", "user_question": "How do I add a custom node to the n8n Editor UI?", "concise_answer": "To add a custom node to the n8n Editor UI, you need to register the node in the 'package.json' file located in '/packages/nodes-base/'. Add the path to your node's JavaScript file in the 'nodes' array. Then, run the commands 'lerna bootstrap --hoist', 'npm run build', and 'npm run dev' to install dependencies, build the code, and start n8n in development mode. Once n8n is running, you can access the Editor UI at 'localhost:8080' and add your node from the Create Node menu.", "structured_data": {"key_parameters": [{"name": "nodes array", "description": "An array in 'package.json' where paths to node files are registered.", "example": "\"dist/nodes/Autofriend/AutofriendTrigger.node.js\""}], "code_block": null}, "keywords": ["n8n", "Editor UI", "custom node", "package.json", "node registration"]}
{"content_type": "How-To Guide", "section_title": "Creating the UI for the node", "user_question": "How do I create a UI for the Autofriend Trigger node in n8n?", "concise_answer": "To create a UI for the Autofriend Trigger node, double-click the node to open the Node Editor View. Use predefined JSON-based UI components provided by n8n to ask the user for data. Add the necessary fields under description.properties in the AutofriendTrigger.node.ts file.", "structured_data": {"key_parameters": [{"name": "event", "description": "The name of the event for which you want to be notified.", "example": "contact_added"}, {"name": "target_url", "description": "The URL where Autofriend will notify you when the event occurs.", "example": null}], "code_block": "typescript { displayName: 'Event', name: 'event', type: 'options', required: true, default: '', options: [ { name: 'Contact Added', value: 'contactAdded', }, { name: 'Contact Added To List', value: 'contactAddedToList', }, { name: 'Contact Entered Segment', value: 'contactEnteredSegment', }, { name: 'Contact Left Segment', value: 'contactLeftSegment', }, { name: 'Contact Removed From List', value: 'contactRemovedFromList', }, { name: 'Contact Unsubscribed', value: 'contactUnsubscribed', }, { name: 'Contact Updated', value: 'contactUpdated', }, ], }"}, "keywords": ["UI", "Autofriend Trigger", "n8n", "Node Editor", "JSON components"]}
{"content_type": "How-To Guide", "section_title": "Creating the UI for credentials", "user_question": "How do I create a UI for asking the user's Autofriend API Key in n8n?", "concise_answer": "To create a UI for asking the user's Autofriend API Key, create a file named AutofriendApi.credentials.ts in the credentials folder. Define the API Key property and register the credentials in the package.json file. Associate the credentials with the node in the AutofriendTrigger.node.ts file.", "structured_data": {"key_parameters": [{"name": "API Key", "description": "The key used to authenticate requests to Autofriend's API.", "example": null}], "code_block": "typescript import { ICredentialType, NodePropertyTypes, } from 'n8n-workflow';\n\nexport class AutofriendApi implements ICredentialType { name = 'autofriendApi'; displayName = 'Autofriend API'; properties = [ { displayName: 'API Key', name: 'apiKey', type: 'string' as NodePropertyTypes, default: '', }, ]; }"}, "keywords": ["API Key", "Autofriend", "n8n", "Credentials", "Authentication"]}
{"content_type": "How-To Guide", "section_title": "Stopping and Running n8n", "user_question": "How do I stop and restart the n8n process?", "concise_answer": "To stop the current n8n process, press ctrl + c in the terminal where n8n is running. To restart it, enter 'bash npm run dev' in the terminal.", "structured_data": {"key_parameters": null, "code_block": "bash npm run dev"}, "keywords": ["n8n", "stop process", "restart", "terminal", "bash"]}
{"content_type": "Node Reference", "section_title": "Understanding the life cycle for the webhook method", "user_question": "What happens when a Trigger node is executed in n8n?", "concise_answer": "When a Trigger node is executed, n8n persists all webhooks defined in description.webhooks. These are used to verify incoming requests. The webhooks property implements the IWebhookDescription interface, which includes properties like name, httpMethod, responseMode, and path.", "structured_data": {"key_parameters": [{"name": "name", "description": "The property name where n8n will look for the life cycle methods.", "example": "default"}, {"name": "httpMethod", "description": "The HTTP method.", "example": "POST"}, {"name": "responseMode", "description": "When the trigger will respond.", "example": "onReceived"}, {"name": "path", "description": "The path added to the base URL.", "example": "webhook"}], "code_block": null}, "keywords": ["n8n", "Trigger node", "webhook", "IWebhookDescription", "life cycle"]}
{"content_type": "General Concept", "section_title": "Webhook URLs", "user_question": "How are webhook URLs structured in n8n?", "concise_answer": "Webhook URLs in n8n are structured based on the environment. In test mode, they are persisted in memory, while in production mode, they are stored in the database. The URLs are used as notification URLs when creating webhooks in external systems.", "structured_data": {"key_parameters": null, "code_block": "Test: POST {{WEBHOOK_URL || localhost}}/webhook-test/{{uuid}}/{{path}}\nProduction: POST {{WEBHOOK_URL || localhost}}/webhook/{{uuid}}/{{path}}"}, "keywords": ["n8n", "webhook URLs", "test mode", "production mode", "notification URL"]}
{"content_type": "General Concept", "section_title": "Lifecycle Methods", "user_question": "What are the lifecycle methods for webhooks in n8n?", "concise_answer": "The lifecycle methods for webhooks in n8n include checkExist, create, and delete. These methods manage the registration and deletion of webhooks in external systems, ensuring that webhooks are correctly persisted and removed as needed.", "structured_data": {"key_parameters": [{"name": "checkExist", "description": "Checks if the webhook is already registered in the external system.", "example": null}, {"name": "create", "description": "Registers the webhook in the external system if it doesn't exist.", "example": null}, {"name": "delete", "description": "Deletes the webhook from the external system when the trigger is stopped or workflow deactivated.", "example": null}], "code_block": null}, "keywords": ["n8n", "webhook", "lifecycle methods", "checkExist", "create", "delete"]}
{"content_type": "Code Example", "section_title": "Autofriend API Request", "user_question": "How do I make an API request using Autofriend in n8n?", "concise_answer": "To make an API request using Autofriend in n8n, you can use the autofriendApiRequest function. This function requires method, resource, body, query, uri, and option parameters, and retrieves credentials to authenticate the request.", "structured_data": {"key_parameters": [{"name": "method", "description": "The HTTP method to use for the request.", "example": "GET"}, {"name": "resource", "description": "The API resource to access.", "example": "/contacts"}, {"name": "body", "description": "The request payload.", "example": "{}"}, {"name": "query", "description": "Query parameters for the request.", "example": "{}"}, {"name": "uri", "description": "The full URI for the request, if different from the endpoint.", "example": null}, {"name": "option", "description": "Additional options for the request.", "example": "{}"}], "code_block": "import { IDataObject, IExecuteFunctions, IHookFunctions, ILoadOptionsFunctions, IRequestOptions, IWebhookFunctions, } from 'n8n-workflow';\n\nexport async function autofriendApiRequest(this: IExecuteFunctions | IWebhookFunctions | IHookFunctions | ILoadOptionsFunctions, method: string, resource: string, body: any = {}, query: IDataObject = {}, uri?: string, option: IDataObject = {}): Promise\n\nconst credentials = await this.getCredentials('autofriendApi') as IDataObject;\n\nconst apiKey = credentials.apiKey;\n\nconst endpoint = 'https://api2.autopilothq.com/v1';"}, "keywords": ["n8n", "Autofriend", "API request", "autofriendApiRequest", "credentials"]}
{"content_type": "Code Example", "section_title": "Autofriend API Request", "user_question": "How do I make an API request to the Autofriend API in n8n?", "concise_answer": "To make an API request to the Autofriend API in n8n, you need to set up the request options with the appropriate headers, method, body, and query parameters. Use the 'autopilotapikey' in the headers for authentication.", "structured_data": {"key_parameters": [{"name": "autopilotapikey", "description": "API key used for authenticating requests to the Autofriend API.", "example": "your-api-key"}, {"name": "endpoint", "description": "Base URL for the Autofriend API.", "example": "https://api2.autopilothq.com/v1"}], "code_block": "const credentials = await this.getCredentials('autofriendApi') as IDataObject;\n\nconst apiKey = credentials.apiKey;\n\nconst endpoint = 'https://api2.autopilothq.com/v1';\n\nconst options: IRequestOptions = {\n    headers: {\n        'Content-Type': 'application/json',\n        autopilotapikey: apiKey,\n    },\n    method,\n    body,\n    qs: query,\n    uri: uri || `${endpoint}${resource}`,\n    json: true,\n};\nif (!Object.keys(body).length) {\n    delete options.body;\n}\nif (!Object.keys(query).length) {\n    delete options.qs;\n}\n\ntry {\n    return await this.helpers.request!(options);\n} catch (error) {\n    if (error.response) {\n        const errorMessage = error.response.body.message || error.response.body.description || error.message;\n        throw new Error(`Autopilot error response [${error.statusCode}]: ${errorMessage}`);\n    }\n    throw error;\n}"}, "keywords": ["API request", "Autofriend", "n8n", "authentication", "headers"]}
{"content_type": "How-To Guide", "section_title": "Webhook Methods in AutofriendTrigger.node.ts", "user_question": "How do I implement webhook methods in the AutofriendTrigger.node.ts file?", "concise_answer": "To implement webhook methods in the AutofriendTrigger.node.ts file, define the methods 'checkExists', 'create', and 'delete' within the 'webhookMethods' object. These methods handle checking for existing webhooks, creating new ones, and deleting them.", "structured_data": {"key_parameters": [{"name": "checkExists", "description": "Checks if a webhook already exists for the given event and URL.", "example": null}, {"name": "create", "description": "Creates a new webhook for the specified event and URL.", "example": null}, {"name": "delete", "description": "Deletes an existing webhook using its ID.", "example": null}], "code_block": "webhookMethods = {\n    default: {\n        async checkExists(this: IHookFunctions): Promise<boolean> {\n            const webhookData = this.getWorkflowStaticData('node');\n            const webhookUrl = this.getNodeWebhookUrl('default');\n            const event = this.getNodeParameter('event') as string;\n            const { hooks: webhooks } = await autofriendApiRequest.call(this, 'GET', '/hooks');\n            for (const webhook of webhooks) {\n                if (webhook.target_url === webhookUrl && webhook.event === snakeCase(event)) {\n                    webhookData.webhookId = webhook.hook_id;\n                    return true;\n                }\n            }\n            return false;\n        },\n        async create(this: IHookFunctions): Promise<boolean> {\n            const webhookUrl = this.getNodeWebhookUrl('default');\n            const webhookData = this.getWorkflowStaticData('node');\n            const event = this.getNodeParameter('event') as string;\n            const body: IDataObject = {\n                event: snakeCase(event),\n                target_url: webhookUrl,\n            };\n            const webhook = await autofriendApiRequest.call(this, 'POST', '/hook', body);\n            webhookData.webhookId = webhook.hook_id;\n            return true;\n        },\n        async delete(this: IHookFunctions): Promise<boolean> {\n            const webhookData = this.getWorkflowStaticData('node');\n            try {\n                await autofriendApiRequest.call(this, 'DELETE', `/hook/${webhookData.webhookId}`);\n            } catch (error) {\n                return false;\n            }\n            delete webhookData.webhookId;\n            return true;\n        },\n    },\n};"}, "keywords": ["webhook", "AutofriendTrigger", "n8n", "methods", "implementation"]}
{"content_type": "How-To Guide", "section_title": "Running n8n with Tunnel", "user_question": "How do I run n8n using a tunnel?", "concise_answer": "To run n8n using a tunnel, stop the current n8n process and execute the command './packages/cli/bin/n8n start --tunnel' in the terminal. This allows you to access the n8n Editor UI at localhost:5678.", "structured_data": {"key_parameters": [{"name": "command", "description": "Command to start n8n with a tunnel.", "example": "./packages/cli/bin/n8n start --tunnel"}], "code_block": null}, "keywords": ["n8n", "tunnel", "command", "start", "localhost"]}
{"content_type": "How-To Guide", "section_title": "Test your node", "user_question": "How can I test my node in n8n?", "concise_answer": "To test your node in n8n, you should ensure that your server is running locally and use a tunnel to proxy requests to your local machine. This setup allows n8n to receive and handle events from external services during development.", "structured_data": {"key_parameters": [{"name": "Tunnel", "description": "A tool to proxy requests to your local machine for n8n to handle events from external services.", "example": null}], "code_block": null}, "keywords": ["n8n", "test node", "local server", "tunnel", "development"]}
{"content_type": "General Concept", "section_title": "$item(index: number, runIndex?: number)", "user_question": "What is the $item function in n8n and how does it work?", "concise_answer": "The $item function in n8n allows you to access data from parent nodes, including item data and parameters. It requires an index to specify which item's data to return, as each item can have different data. The index is 0-based, and by default, it returns data from the last run of the node.", "structured_data": {"key_parameters": [{"name": "index", "description": "The 0-based index of the item whose data should be returned.", "example": "0"}, {"name": "runIndex", "description": "Optional parameter to specify the run index of the referenced node.", "example": "2"}], "code_block": "const myNumber = $item(0).$node[\"Set\"].json[\"myNumber\"];"}, "keywords": ["n8n", "$item function", "data access", "index", "runIndex"]}
{"content_type": "Node Reference", "section_title": "Cron", "user_question": "How do I configure the Cron node in n8n?", "concise_answer": "To configure the Cron node in n8n, click on the 'Add Cron Time' button under the Trigger Times section. You can choose from several options in the Mode field, such as Every Minute, Every Hour, Every Day, Every Week, Every Month, Every X, or Custom. The 'Every X' option allows you to specify intervals in minutes or hours, while 'Custom' lets you enter a custom cron expression.", "structured_data": {"key_parameters": [{"name": "Mode", "description": "Options for scheduling the workflow, including predefined intervals and custom expressions.", "example": "Every Day"}, {"name": "Cron Expression", "description": "Field to enter a custom cron expression for scheduling.", "example": "0 0 * * *"}], "code_block": null}, "keywords": ["n8n", "Cron node", "scheduling", "workflow", "cron expression"]}
{"content_type": "General Concept", "section_title": "Cron Expression", "user_question": "Why are there six asterisks in a Cron Expression?", "concise_answer": "The sixth asterisk in a Cron Expression represents seconds, which is optional. The node will execute even if you don't set the value for seconds.", "structured_data": {"key_parameters": [{"name": "Cron Expression", "description": "A string used to define the schedule for triggering workflows.", "example": "30 8 4 * * *"}], "code_block": null}, "keywords": ["Cron Expression", "scheduling", "seconds", "workflow", "trigger"]}
{"content_type": "Node Reference", "section_title": "Function", "user_question": "What is the Function node in n8n and how is it used?", "concise_answer": "The Function node in n8n allows you to transform data from other nodes and implement custom functionality. It supports promises and writing to the console for debugging. It is deprecated in version 0.198.0 and replaced by the Code node.", "structured_data": {"key_parameters": [{"name": "Function Node", "description": "A node used to execute custom JavaScript code within workflows.", "example": null}], "code_block": "const newItems = [];\n\nfor (let i=0;i<10;i++) { newItems.push({ json: { id: i } }); }\n\nreturn newItems;"}, "keywords": ["Function node", "custom code", "JavaScript", "promises", "deprecated"]}
{"content_type": "Node Reference", "section_title": "Function Item", "user_question": "What is the Function Item node and how does it differ from the Function node?", "concise_answer": "The Function Item node is used to execute custom JavaScript code for each item it receives. It supports promises and console logging for debugging. It is different from the Function node, which is deprecated in version 0.198.0.", "structured_data": {"key_parameters": [{"name": "Function Item Node", "description": "A node used to execute custom JavaScript code for each input item.", "example": null}], "code_block": "json // Uses the data of an already existing key to create a new additional one\nitem.newIncrementedCounter = item.existingCounter + 1;\nreturn item;"}, "keywords": ["Function Item node", "custom code", "JavaScript", "promises", "item processing"]}
{"content_type": "Code Example", "section_title": "Binary Data Methods", "user_question": "How can I return all binary data keys of an item in n8n?", "concise_answer": "To return all binary data keys of an item in n8n, you can use the method `getBinaryData()`. This method allows you to access the binary data of the currently processed item.", "structured_data": {"key_parameters": null, "code_block": "json item.filename = getBinaryData().attachment_0.fileName; return item;"}, "keywords": ["binary data", "getBinaryData", "n8n", "item processing", "code example"]}
{"content_type": "General Concept", "section_title": "Static Workflow Data", "user_question": "What is static workflow data in n8n and how is it used?", "concise_answer": "Static workflow data in n8n allows you to save small pieces of data directly with the workflow, such as timestamps. There are two types: 'global' and 'node'. Global data is accessible by all nodes, while node data is specific to each node. Static data is not saved during manual executions and only persists when a workflow is active.", "structured_data": {"key_parameters": [{"name": "type", "description": "Specifies whether the static data is 'global' or 'node'.", "example": "'global'"}], "code_block": "const staticData = getWorkflowStaticData('global');\nconst lastExecution = staticData.lastExecution;\nstaticData.lastExecution = new Date().getTime();\ndelete staticData.lastExecution;"}, "keywords": ["static data", "workflow", "n8n", "global data", "node data"]}
{"content_type": "Node Reference", "section_title": "Retrieval QA Chain", "user_question": "What is the Retrieval QA Chain node in n8n and what are its parameters?", "concise_answer": "The Retrieval QA Chain node in n8n is used to answer queries based on document content indexed by a retriever. It has parameters like 'Query', which is the prompt for the model, and 'Choose a mode', which determines if the chain runs once for all items or once for each item.", "structured_data": {"key_parameters": [{"name": "Query", "description": "The prompt that the model will use.", "example": "What can you tell me about {{ $json.input }}"}, {"name": "Choose a mode", "description": "Determines the execution mode of the chain.", "example": "Run Once for All Items"}], "code_block": null}, "keywords": ["Retrieval QA Chain", "n8n", "node parameters", "query", "execution mode"]}
{"content_type": "Node Reference", "section_title": "Name", "user_question": "Where can I find the node parameters for the Name node in n8n?", "concise_answer": "The node parameters for the Name node can be found on the specific documentation page for the Name node. This page also provides links to more resources, including authentication information and usage examples.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Name node", "node parameters", "n8n documentation"]}
{"content_type": "How-To Guide", "section_title": "Using the Node Dev CLI", "user_question": "How do I create a basic node using the n8n-node-dev CLI?", "concise_answer": "To create a basic node using the n8n-node-dev CLI, first install the CLI globally with npm. Then, create a new folder for your node, use the CLI to generate boilerplate code, and follow the prompts to set up your node. Finally, build the node and copy it to the correct location for n8n to recognize it.", "structured_data": {"key_parameters": [{"name": "n8n-node-dev CLI", "description": "A command-line tool for developing n8n nodes.", "example": "npm install -g n8n-node-dev"}], "code_block": "npm install -g n8n-node-dev\nn8n-node-dev new\nn8n-node-dev build"}, "keywords": ["n8n-node-dev CLI", "create node", "boilerplate code"]}
{"content_type": "How-To Guide", "section_title": "Create own custom n8n-nodes-module", "user_question": "How can I create a custom n8n-nodes-module?", "concise_answer": "To create a custom n8n-nodes-module, start by ensuring the module name begins with 'n8n-nodes-'. Include a key in the package.json file with paths to nodes and credentials. Install the module alongside n8n. This setup allows n8n to automatically find and load the nodes on startup.", "structured_data": {"key_parameters": [{"name": "Module Name", "description": "The name of the module must start with 'n8n-nodes-'.", "example": "n8n-nodes-my-custom-nodes"}, {"name": "package.json key", "description": "Contains paths to nodes and credentials.", "example": "n8n"}], "code_block": "npm install n8n-nodes-my-custom-nodes"}, "keywords": ["custom module", "n8n-nodes-module", "package.json"]}
{"content_type": "How-To Guide", "section_title": "Setup to use n8n-nodes-module", "user_question": "How do I set up a custom n8n-nodes-module for use?", "concise_answer": "To set up a custom n8n-nodes-module, create a directory for your n8n installation, install n8n, and then install your custom nodes module. Start n8n to load the custom nodes.", "structured_data": {"key_parameters": null, "code_block": "mkdir my-n8n\ncd my-n8n\nnpm install n8n\nnpm install n8n-nodes-my-custom-nodes\nn8n"}, "keywords": ["setup", "custom nodes", "n8n installation"]}
{"content_type": "How-To Guide", "section_title": "Development/Testing of custom n8n-nodes-module", "user_question": "How can I develop and test a custom n8n-nodes-module?", "concise_answer": "To develop and test a custom n8n-nodes-module, build the code and publish it locally using npm link. Then, link the module in the n8n installation directory and start n8n to test the module.", "structured_data": {"key_parameters": null, "code_block": "npm run build\nnpm link\nnpm link n8n-nodes-my-custom-nodes\nn8n"}, "keywords": ["development", "testing", "npm link"]}
{"content_type": "General Concept", "section_title": "Plan your workflow logic", "user_question": "How do I plan the logic for my n8n workflow?", "concise_answer": "To plan your workflow logic in n8n, you create a sequence of nodes that define how data is processed. This includes accessing external applications, manipulating data, and performing actions based on the data. n8n supports complex logic, allowing you to build sophisticated workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["workflow logic", "n8n", "data processing", "nodes", "complex logic"]}
{"content_type": "General Concept", "section_title": "Fetch data", "user_question": "What are the main ways to fetch data in an n8n workflow?", "concise_answer": "In n8n, data can be fetched in three main ways: from the trigger node that starts the workflow, using an app node to retrieve data, or generating the data within the workflow using nodes like the Code node.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["fetch data", "n8n", "trigger node", "app node", "Code node"]}
{"content_type": "How-To Guide", "section_title": "Node review checklist", "user_question": "What should I check when reviewing a node for submission to the n8n community?", "concise_answer": "When reviewing a node for submission to the n8n community, ensure code formatting is correct, credentials are set up, complementary operations are added, parameters have the correct type, and defaults are maintained. Test operations thoroughly, handle errors properly, and ensure the node's responses are consistent and simplified where possible.", "structured_data": {"key_parameters": [{"name": "code formatting", "description": "Ensure code is properly formatted with correct indentation and linting.", "example": null}, {"name": "credentials", "description": "Set up necessary credentials like Client ID, API key, etc.", "example": null}, {"name": "complementary operations", "description": "Add operations like create and delete for each resource.", "example": null}, {"name": "parameter types", "description": "Ensure parameters have the correct type.", "example": null}, {"name": "default values", "description": "Maintain default values as per the service's settings.", "example": null}], "code_block": null}, "keywords": ["node review", "n8n", "submission checklist", "code formatting", "testing"]}
{"content_type": "How-To Guide", "section_title": "Testing", "user_question": "How do I test a node in n8n to ensure it works correctly?", "concise_answer": "To test a node in n8n, perform operations like 'create' and 'update' with all fields, test the continueOnFail option, and ensure the node handles errors correctly. Check that API responses are consistent and simplified, and that the node's outputs are as expected.", "structured_data": {"key_parameters": [{"name": "create/update operations", "description": "Test these operations with all fields to ensure they work correctly.", "example": null}, {"name": "continueOnFail", "description": "Test this option to ensure the workflow continues on failure.", "example": null}, {"name": "error handling", "description": "Ensure the node handles and displays error responses correctly.", "example": null}], "code_block": null}, "keywords": ["testing", "n8n", "node testing", "error handling", "API responses"]}
{"content_type": "General Concept", "section_title": "Presentation", "user_question": "What should be ensured for the Get All operation in n8n?", "concise_answer": "For the Get All operation in n8n, ensure that the fields 'return' and 'limit' are included. Additionally, make sure the pagination is working by setting the limit to 1.", "structured_data": {"key_parameters": [{"name": "return", "description": "Specifies the fields to be returned in the response.", "example": null}, {"name": "limit", "description": "Sets the maximum number of items to return.", "example": "1"}], "code_block": null}, "keywords": ["Get All", "fields", "pagination", "limit", "return"]}
{"content_type": "General Concept", "section_title": "Writing", "user_question": "What are the guidelines for writing descriptions in n8n?", "concise_answer": "Ensure all descriptions in n8n are correct and end with a period. Descriptions should exist for most items, excluding redundant ones. Capitalize 'IDs' in displayNames, and use camelCase for the name property in node class descriptions.", "structured_data": {"key_parameters": [{"name": "displayNames", "description": "The display name should capitalize 'IDs'.", "example": "IDs"}, {"name": "name property", "description": "Use camelCase for the name property in node class descriptions.", "example": "exampleName"}], "code_block": null}, "keywords": ["descriptions", "capitalization", "camelCase", "displayNames", "writing"]}
{"content_type": "General Concept", "section_title": "Branding", "user_question": "What are the branding guidelines for node logos in n8n?", "concise_answer": "Node logos in n8n should ideally be SVGs with a perfect square canvas. If using PNGs, they should be 60x60 pixels and compressed. Ensure the border color matches the service's branding.", "structured_data": {"key_parameters": [{"name": "logo format", "description": "The logo should be either a PNG or SVG, ideally SVG.", "example": "SVG"}, {"name": "PNG dimensions", "description": "If the logo is a PNG, it should be 60x60 pixels.", "example": "60x60"}, {"name": "border color", "description": "The border color should match the branding of the service.", "example": null}], "code_block": null}, "keywords": ["branding", "logo", "SVG", "PNG", "border color"]}
{"content_type": "How-To Guide", "section_title": "Nice-to-haves (optional)", "user_question": "How can I handle node execution failures in n8n?", "concise_answer": "To handle node execution failures in n8n, add a handler for 'continueOnFail'. This allows the workflow to continue even if a node's execution fails.", "structured_data": {"key_parameters": [{"name": "continueOnFail", "description": "A handler that allows the workflow to continue despite node execution failures.", "example": null}], "code_block": null}, "keywords": ["continueOnFail", "execution", "failure", "workflow", "handler"]}
{"content_type": "General Concept", "section_title": "n8n v1.0 migration guide", "user_question": "What is new in n8n version 1.0?", "concise_answer": "n8n version 1.0 introduces several new features and improvements, marking a significant milestone for the platform. It is now ready for demanding production environments, with enhancements such as Python support in the Code node and a new execution order for multi-branch workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.0", "new features", "production", "Python support"]}
{"content_type": "Node Reference", "section_title": "n8n v1.0 migration guide", "user_question": "Can I use Python in the Code node in n8n?", "concise_answer": "Yes, starting from n8n version 1.0, you can use Python in the Code node. This feature allows you to select Python as an option and utilize many Python modules. However, Python is not available in Code nodes added to a workflow before version 1.0.", "structured_data": {"key_parameters": [{"name": "Language", "description": "The programming language used in the Code node.", "example": "Python"}], "code_block": null}, "keywords": ["n8n", "Code node", "Python", "version 1.0", "programming language"]}
{"content_type": "General Concept", "section_title": "Execution order", "user_question": "How does the new execution order work in n8n 1.0 for multi-branch workflows?", "concise_answer": "In n8n 1.0, the execution order for multi-branch workflows has changed to a depth-first approach. Each branch executes completely before the next one starts, based on their position on the canvas from top to bottom. If branches are at the same height, the leftmost one executes first. Multi-input nodes now require data on at least one input to execute.", "structured_data": {"key_parameters": [{"name": "Execution Order", "description": "Determines the sequence in which nodes are executed in multi-branch workflows.", "example": "Depth-first execution"}, {"name": "Multi-input Node Execution", "description": "Nodes execute only when they receive data on at least one input.", "example": null}], "code_block": null}, "keywords": ["execution order", "multi-branch", "depth-first", "n8n 1.0", "workflow"]}
{"content_type": "Configuration", "section_title": "Deprecations", "user_question": "What database systems are no longer supported by n8n?", "concise_answer": "n8n has removed support for MySQL and MariaDB as storage backends. Users are recommended to migrate to PostgreSQL for better compatibility and long-term support.", "structured_data": {"key_parameters": [{"name": "Deprecated Databases", "description": "Database systems that are no longer supported by n8n.", "example": "MySQL, MariaDB"}, {"name": "Recommended Database", "description": "The database system recommended for use with n8n.", "example": "PostgreSQL"}], "code_block": null}, "keywords": ["deprecation", "MySQL", "MariaDB", "PostgreSQL", "database support"]}
{"content_type": "Configuration", "section_title": "EXECUTIONS_PROCESS and \"own\" mode", "user_question": "What changes have been made to the EXECUTIONS_PROCESS environment variable in n8n 1.0?", "concise_answer": "The EXECUTIONS_PROCESS environment variable and 'own' mode are deprecated in n8n 1.0. Executions now default to running in the main process, which starts faster but may crash the entire application if memory is exceeded. Users should allocate enough resources or configure queue mode to distribute executions.", "structured_data": {"key_parameters": [{"name": "EXECUTIONS_PROCESS", "description": "Environment variable to specify execution process mode, now deprecated.", "example": null}, {"name": "Default Execution Mode", "description": "The new default mode for executing workflows in n8n.", "example": "main"}], "code_block": null}, "keywords": ["EXECUTIONS_PROCESS", "own mode", "main process", "n8n 1.0", "execution mode"]}
{"content_type": "Configuration", "section_title": "Breaking changes", "user_question": "What are the breaking changes related to Docker deployments in n8n?", "concise_answer": "In Docker deployments, the n8n process now runs as the user node instead of root, enhancing security. If permission errors occur, update permissions using a specific Docker command. Additionally, Debian and RHEL images have been removed, and the entrypoint for the container has changed, eliminating the need to specify the n8n command.", "structured_data": {"key_parameters": [{"name": "User Change", "description": "The n8n process now runs as the user node instead of root.", "example": null}, {"name": "Image Removal", "description": "Debian and RHEL images have been removed.", "example": null}, {"name": "Entrypoint Change", "description": "The entrypoint for the container has changed, no longer requiring the n8n command.", "example": null}], "code_block": "bash docker run --rm -it --user root -v ~/.n8n:/home/node/.n8n --entrypoint chown n8nio/base:16 -R node:node /home/node/.n8n"}, "keywords": ["Docker", "permissions", "entrypoint", "n8n 1.0", "breaking changes"]}
{"content_type": "Configuration", "section_title": "Workflow failures due to expression errors", "user_question": "How does n8n handle expression errors in workflows?", "concise_answer": "n8n now throws errors on the backend for syntax or runtime errors in expressions, such as those referencing non-existent nodes. Previously, these errors were only thrown on the frontend. Users are advised to set up an 'error workflow' to receive notifications of failing workflows.", "structured_data": {"key_parameters": [{"name": "Expression Error Handling", "description": "n8n now throws backend errors for expression issues.", "example": null}, {"name": "Error Workflow", "description": "A workflow setup to notify users of failing workflows.", "example": null}], "code_block": null}, "keywords": ["expression errors", "workflow failures", "backend errors", "n8n 1.0", "error workflow"]}
{"content_type": "Configuration", "section_title": "Mandatory owner account", "user_question": "What changes have been made to user management in n8n?", "concise_answer": "User Management is now mandatory in n8n, and support for other authentication methods like BasicAuth and External JWT has been removed. The number of permitted users varies based on your subscription plan.", "structured_data": {"key_parameters": [{"name": "User Management", "description": "Mandatory for all n8n instances.", "example": null}, {"name": "Authentication Methods", "description": "BasicAuth and External JWT are no longer supported.", "example": null}], "code_block": null}, "keywords": ["User Management", "Authentication", "BasicAuth", "JWT", "n8n.cloud"]}
{"content_type": "Configuration", "section_title": "Directory for installing custom nodes", "user_question": "Where should I install custom nodes in n8n?", "concise_answer": "Custom nodes should be installed in the ~/.n8n/custom directory or a directory defined by N8N_CUSTOM_EXTENSIONS. Custom npm package nodes should be located in ~/.n8n/nodes.", "structured_data": {"key_parameters": [{"name": "Custom Node Directory", "description": "Directory where custom nodes should be installed.", "example": "~/.n8n/custom"}, {"name": "N8N_CUSTOM_EXTENSIONS", "description": "Environment variable to define a custom directory for extensions.", "example": null}], "code_block": null}, "keywords": ["Custom Nodes", "Directory", "n8n", "N8N_CUSTOM_EXTENSIONS", "npm"]}
{"content_type": "Configuration", "section_title": "WebSockets", "user_question": "How can I configure the push backend method in n8n?", "concise_answer": "The N8N_PUSH_BACKEND environment variable allows you to configure the push backend method. Starting with n8n 1.0, 'websocket' is the default method, but 'sse' is also available.", "structured_data": {"key_parameters": [{"name": "N8N_PUSH_BACKEND", "description": "Environment variable to set the push backend method.", "example": "websocket"}], "code_block": null}, "keywords": ["WebSockets", "N8N_PUSH_BACKEND", "sse", "websocket", "n8n"]}
{"content_type": "General Concept", "section_title": "Date transformation functions", "user_question": "What changes have been made to date transformation functions in n8n?", "concise_answer": "Date transformation functions in n8n now return a type that matches the input type. If the input is a JavaScript Date, the output will be a Date. If the input is a Luxon DateTime object, the output will be a DateTime object.", "structured_data": {"key_parameters": [{"name": "Date Transformation Functions", "description": "Functions that operate on dates and return a type matching the input.", "example": null}], "code_block": null}, "keywords": ["Date Transformation", "JavaScript Date", "Luxon DateTime", "n8n", "Functions"]}
{"content_type": "Configuration", "section_title": "Execution data retention", "user_question": "How does n8n handle execution data retention?", "concise_answer": "Starting from n8n 1.0, all workflow executions are saved by default. The EXECUTIONS_DATA_PRUNE setting is enabled by default, with a max count of 10,000 to prevent performance issues with SQLite.", "structured_data": {"key_parameters": [{"name": "EXECUTIONS_DATA_PRUNE", "description": "Setting to enable data pruning for executions.", "example": "true"}, {"name": "EXECUTIONS_DATA_PRUNE_MAX_COUNT", "description": "Maximum count of execution data to retain.", "example": "10000"}], "code_block": null}, "keywords": ["Execution Data", "Retention", "n8n", "SQLite", "Performance"]}
{"content_type": "Configuration", "section_title": "Removed N8N_USE_DEPRECATED_REQUEST_LIB", "user_question": "What happened to the deprecated request library in n8n?", "concise_answer": "The deprecated request library has been fully removed in n8n 1.0. The HTTP Request node now uses the new HttpRequest interface exclusively.", "structured_data": {"key_parameters": [{"name": "N8N_USE_DEPRECATED_REQUEST_LIB", "description": "Environment variable to use the deprecated request library, now removed.", "example": null}], "code_block": null}, "keywords": ["Deprecated", "Request Library", "HTTP Request", "n8n", "HttpRequest"]}
{"content_type": "Configuration", "section_title": "Removed WEBHOOK_TUNNEL_URL", "user_question": "What changes have been made to the webhook configuration in n8n?", "concise_answer": "The WEBHOOK_TUNNEL_URL configuration option has been renamed to WEBHOOK_URL in version 0.227.0 and removed in n8n 1.0. Update your setup to use WEBHOOK_URL.", "structured_data": {"key_parameters": [{"name": "WEBHOOK_TUNNEL_URL", "description": "Old configuration option for webhook URL, now removed.", "example": null}, {"name": "WEBHOOK_URL", "description": "New configuration option for webhook URL.", "example": null}], "code_block": null}, "keywords": ["Webhook", "Configuration", "WEBHOOK_URL", "n8n", "WEBHOOK_TUNNEL_URL"]}
{"content_type": "Configuration", "section_title": "Remove Node 16 support", "user_question": "What Node.js version is required for n8n 1.0?", "concise_answer": "n8n 1.0 requires Node.js version 18.17.0 or above. Support for Node 16 has been removed.", "structured_data": {"key_parameters": [{"name": "Node.js Version", "description": "Minimum required Node.js version for n8n 1.0.", "example": "18.17.0"}], "code_block": null}, "keywords": ["Node.js", "Version", "n8n", "Node 16", "Node 18"]}
{"content_type": "How-To Guide", "section_title": "Updating to n8n 1.0", "user_question": "How do I update to n8n 1.0?", "concise_answer": "To update to n8n 1.0, first create a full backup and update to the latest n8n 0.x release. Verify that it starts without issues, then proceed to update to n8n 1.0. If using Docker, pull the latest Docker image after July 24th, 2023.", "structured_data": {"key_parameters": [{"name": "Backup", "description": "Create a full backup before updating.", "example": null}, {"name": "Docker Image", "description": "Pull the latest Docker image for n8n 1.0.", "example": null}], "code_block": null}, "keywords": ["Update", "n8n 1.0", "Backup", "Docker", "Release"]}
{"content_type": "How-To Guide", "section_title": "Update to n8n 1.0", "user_question": "How do I update to n8n 1.0 using Docker?", "concise_answer": "To update to n8n 1.0 using Docker, pull the next Docker image if you are updating before July 24th, 2023. After this date, pull the latest Docker image. If you encounter issues, redeploy the previous version and restore the backup.", "structured_data": {"key_parameters": [{"name": "Docker Image", "description": "The Docker image to pull for updating n8n.", "example": "next or latest"}], "code_block": null}, "keywords": ["n8n", "update", "Docker", "version 1.0", "redeploy"]}
{"content_type": "General Concept", "section_title": "Choose your n8n", "user_question": "What are the different ways to set up n8n?", "concise_answer": "n8n can be set up in several ways: using n8n Cloud for a hosted solution, self-hosting via npm or Docker, or embedding n8n into your own product. Each method caters to different use cases, from simple setups to customized production environments.", "structured_data": {"key_parameters": [{"name": "n8n Cloud", "description": "A hosted solution with no installation required.", "example": null}, {"name": "Self-host", "description": "Recommended for production or customized use cases.", "example": "npm, Docker"}, {"name": "Embed", "description": "Allows white labeling and integration into your own product.", "example": null}], "code_block": null}, "keywords": ["n8n", "setup", "Cloud", "self-host", "embed"]}
{"content_type": "General Concept", "section_title": "Licenses", "user_question": "What licensing options does n8n offer?", "concise_answer": "n8n offers a Sustainable Use License and an Enterprise License based on the fair-code model. There are free options like a trial of Cloud and a self-hosted community edition, as well as paid versions for both Cloud and self-hosted setups.", "structured_data": {"key_parameters": [{"name": "Sustainable Use License", "description": "A license based on the fair-code model.", "example": null}, {"name": "Enterprise License", "description": "A license for enterprise-level use.", "example": null}, {"name": "Free Trial", "description": "A free trial of n8n Cloud.", "example": null}, {"name": "Community Edition", "description": "A free self-hosted version for community use.", "example": null}], "code_block": null}, "keywords": ["n8n", "license", "Sustainable Use", "Enterprise", "free trial"]}
{"content_type": "How-To Guide", "section_title": "External secrets", "user_question": "How can I use external secrets with n8n?", "concise_answer": "To use external secrets with n8n, connect to a supported secrets store like AWS Secrets Manager or Azure Key Vault. This feature allows you to manage credentials securely and centrally across multiple environments.", "structured_data": {"key_parameters": [{"name": "Supported Stores", "description": "External secrets can be managed using AWS Secrets Manager, Azure Key Vault, GCP Secrets Manager, Infisical, and HashiCorp Vault.", "example": null}, {"name": "Secret Names", "description": "Secret names can only contain alphanumeric characters and underscores.", "example": "my_secret_123"}], "code_block": null}, "keywords": ["n8n", "external secrets", "AWS Secrets Manager", "Azure Key Vault", "security"]}
{"content_type": "Configuration", "section_title": "Azure Key Vault", "user_question": "How do I configure Azure Key Vault in n8n?", "concise_answer": "To configure Azure Key Vault in n8n, provide your vault name, tenant ID, client ID, and client secret. Ensure you have registered a Microsoft Entra ID app and created a service principal.", "structured_data": {"key_parameters": [{"name": "vault name", "description": "The name of your Azure Key Vault.", "example": "myVault"}, {"name": "tenant ID", "description": "The ID of your Azure tenant.", "example": "12345678-1234-1234-1234-123456789abc"}, {"name": "client ID", "description": "The ID of your Azure client.", "example": "87654321-4321-4321-4321-cba987654321"}, {"name": "client secret", "description": "The secret key for your Azure client.", "example": "mySecretKey"}], "code_block": null}, "keywords": ["Azure Key Vault", "n8n", "configuration", "credentials", "Microsoft Entra ID"]}
{"content_type": "Configuration", "section_title": "AWS Secrets Manager", "user_question": "What are the steps to configure AWS Secrets Manager in n8n?", "concise_answer": "To configure AWS Secrets Manager in n8n, provide your access key ID, secret access key, and region. Ensure the IAM user has the necessary permissions like secretsmanager:ListSecrets and secretsmanager:GetSecretValue.", "structured_data": {"key_parameters": [{"name": "access key ID", "description": "The access key ID for your AWS account.", "example": "AKIAIOSFODNN7EXAMPLE"}, {"name": "secret access key", "description": "The secret access key for your AWS account.", "example": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"}, {"name": "region", "description": "The AWS region where your secrets are stored.", "example": "us-west-2"}], "code_block": "json { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"AccessAllSecrets\", \"Effect\": \"Allow\", \"Action\": [ \"secretsmanager:ListSecrets\", \"secretsmanager:BatchGetSecretValue\", \"secretsmanager:GetResourcePolicy\", \"secretsmanager:GetSecretValue\", \"secretsmanager:DescribeSecret\", \"secretsmanager:ListSecretVersionIds\" ], \"Resource\": \"*\" } ] }"}, "keywords": ["AWS Secrets Manager", "n8n", "configuration", "IAM policy", "permissions"]}
{"content_type": "Configuration", "section_title": "HashiCorp Vault", "user_question": "How can I set up HashiCorp Vault in n8n?", "concise_answer": "To set up HashiCorp Vault in n8n, provide the Vault URL and select your Authentication Method. Enter your authentication details and optionally provide a namespace if using Vault Enterprise.", "structured_data": {"key_parameters": [{"name": "Vault URL", "description": "The URL of your HashiCorp Vault instance.", "example": "https://vault.example.com"}, {"name": "Authentication Method", "description": "The method used to authenticate with HashiCorp Vault.", "example": "Token"}], "code_block": null}, "keywords": ["HashiCorp Vault", "n8n", "configuration", "authentication", "namespace"]}
{"content_type": "Configuration", "section_title": "Infisical", "user_question": "What is required to configure Infisical in n8n?", "concise_answer": "To configure Infisical in n8n, provide a Service Token and ensure you select the correct environment. If self-hosting, enter the Site URL. Note that n8n only supports service tokens for a single environment.", "structured_data": {"key_parameters": [{"name": "Service Token", "description": "The token used to authenticate with Infisical.", "example": "myServiceToken"}, {"name": "Site URL", "description": "The URL of your self-hosted Infisical instance.", "example": "https://infisical.example.com"}], "code_block": null}, "keywords": ["Infisical", "n8n", "configuration", "service token", "environment"]}
{"content_type": "Configuration", "section_title": "Google Cloud Platform", "user_question": "How do I configure Google Cloud Platform in n8n?", "concise_answer": "To configure Google Cloud Platform in n8n, provide a Service Account Key (JSON) for a service account with the roles Secret Manager Secret Accessor and Secret Manager Secret Viewer.", "structured_data": {"key_parameters": [{"name": "Service Account Key (JSON)", "description": "The JSON key file for your Google Cloud service account.", "example": "service-account-key.json"}], "code_block": null}, "keywords": ["Google Cloud Platform", "n8n", "configuration", "service account", "Secret Manager"]}
{"content_type": "How-To Guide", "section_title": "Use secrets in n8n credentials", "user_question": "How can I use a secret from my store in an n8n credential?", "concise_answer": "To use a secret in an n8n credential, create or open a credential, hover over the desired field, select 'Expression', and enter an expression referencing the secret name using the format: js {{ $secrets.<vault-name>.<secret-name> }}. Replace <vault-name> with 'vault', 'infisical', or 'awsSecretsManager', and <secret-name> with the actual secret name.", "structured_data": {"key_parameters": [{"name": "vault-name", "description": "The name of the vault where the secret is stored.", "example": "vault"}, {"name": "secret-name", "description": "The name of the secret as it appears in your vault.", "example": "mySecret"}], "code_block": "js {{ $secrets.<vault-name>.<secret-name> }}"}, "keywords": ["n8n", "secrets", "credentials", "vault", "expression"]}
{"content_type": "General Concept", "section_title": "Using external secrets with n8n environments", "user_question": "How can I use external secrets with different n8n environments?", "concise_answer": "To use external secrets with different n8n environments, connect each n8n instance to a different vault or project environment. For example, use Infisical to create a project with separate environments for development and production, and generate tokens for each. Use these tokens to connect the respective n8n instances.", "structured_data": {"key_parameters": [{"name": "Infisical environment", "description": "The environment in Infisical for which a token is generated.", "example": "development"}, {"name": "n8n instance", "description": "The specific n8n instance connected to an Infisical environment.", "example": "development n8n instance"}], "code_block": null}, "keywords": ["n8n", "external secrets", "environments", "Infisical", "tokens"]}
{"content_type": "Troubleshooting", "section_title": "Infisical version changes", "user_question": "What should I do if my Infisical connection to n8n stops working?", "concise_answer": "If your Infisical connection to n8n stops working, check for recent version changes in Infisical. If a version change is the cause, report the issue to help@n8n.io.", "structured_data": {"key_parameters": [{"name": "Infisical version change", "description": "A change in the version of Infisical that might affect connectivity.", "example": null}], "code_block": null}, "keywords": ["Infisical", "n8n", "connection", "troubleshooting", "version change"]}
{"content_type": "General Concept", "section_title": "AI agent", "user_question": "What is an AI agent in the context of n8n?", "concise_answer": "An AI agent is an artificial intelligence system capable of responding to requests, making decisions, and performing real-world tasks for users. It uses large language models (LLMs) to interpret user input and decide how to best process requests.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI agent", "n8n", "LLM", "artificial intelligence", "tasks"]}
{"content_type": "General Concept", "section_title": "AI chain", "user_question": "What is an AI chain in n8n?", "concise_answer": "An AI chain in n8n allows interaction with large language models (LLMs) and other resources in sequences of calls to components. AI chains do not use persistent memory, so they cannot reference previous context.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI chain", "n8n", "LLM", "interaction", "components"]}
{"content_type": "General Concept", "section_title": "AI embedding", "user_question": "What are AI embeddings?", "concise_answer": "AI embeddings are numerical representations of data using vectors. They help AI interpret complex data and relationships by mapping values across many dimensions. Vector databases are designed to store and access these embeddings.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI embedding", "vectors", "data representation", "vector databases", "AI"]}
{"content_type": "General Concept", "section_title": "AI memory", "user_question": "What is AI memory in n8n?", "concise_answer": "AI memory allows AI tools to persist message context across interactions, enabling continuous conversations without resubmitting context. In n8n, AI agent nodes can use memory, but AI chains cannot.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI memory", "n8n", "context persistence", "AI agent", "interaction"]}
{"content_type": "General Concept", "section_title": "AI tool", "user_question": "What is an AI tool in the context of AI systems?", "concise_answer": "An AI tool is an add-on resource that an AI can refer to for specific information or functionality when responding to a request. It allows the AI model to interact with external systems or complete specific tasks.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI tool", "add-on", "AI system", "functionality", "external systems"]}
{"content_type": "General Concept", "section_title": "AI vector store", "user_question": "What is a vector store?", "concise_answer": "Vector stores, or vector databases, are databases designed to store numerical representations of information called embeddings.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["vector store", "vector database", "embeddings"]}
{"content_type": "General Concept", "section_title": "API", "user_question": "What is an API?", "concise_answer": "APIs, or application programming interfaces, offer programmatic access to a service's data and functionality, facilitating interaction with external systems.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["API", "application programming interface", "programmatic access"]}
{"content_type": "Node Reference", "section_title": "canvas (n8n)", "user_question": "What is the canvas in n8n?", "concise_answer": "The canvas is the main interface for building workflows in n8n's editor UI, where you add and connect nodes to compose workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["canvas", "n8n", "workflow building"]}
{"content_type": "Node Reference", "section_title": "cluster node (n8n)", "user_question": "What is a cluster node in n8n?", "concise_answer": "In n8n, cluster nodes are groups of nodes that work together to provide functionality in a workflow, consisting of a root node and sub nodes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["cluster node", "n8n", "workflow functionality"]}
{"content_type": "Node Reference", "section_title": "credential (n8n)", "user_question": "What are credentials in n8n?", "concise_answer": "In n8n, credentials store authentication information to connect with specific apps and services, allowing interaction with the service through app nodes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["credentials", "n8n", "authentication"]}
{"content_type": "Node Reference", "section_title": "data pinning (n8n)", "user_question": "What is data pinning in n8n?", "concise_answer": "Data pinning allows you to temporarily freeze the output data of a node during workflow development, ensuring predictable data without repeated external requests.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["data pinning", "n8n", "workflow development"]}
{"content_type": "Node Reference", "section_title": "editor (n8n)", "user_question": "What is the n8n editor?", "concise_answer": "The n8n editor UI allows you to create and manage workflows, with the canvas as the main area for composing workflows by adding, configuring, and connecting nodes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["editor", "n8n", "workflow management"]}
{"content_type": "Node Reference", "section_title": "entitlement (n8n)", "user_question": "What are entitlements in n8n?", "concise_answer": "In n8n, entitlements grant access to plan-restricted features for a specific period, with floating entitlements allowing distribution among various instances.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["entitlement", "n8n", "plan-restricted features"]}
{"content_type": "Node Reference", "section_title": "evaluation (n8n)", "user_question": "What is evaluation in n8n?", "concise_answer": "In n8n, evaluation allows you to tag and organize execution history and compare it against new executions, useful for understanding workflow performance over time.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["evaluation", "n8n", "execution history"]}
{"content_type": "Node Reference", "section_title": "expression (n8n)", "user_question": "What are expressions in n8n?", "concise_answer": "In n8n, expressions allow you to populate node parameters dynamically by executing JavaScript code, using data from previous nodes or the n8n environment.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["expression", "n8n", "dynamic parameters"]}
{"content_type": "General Concept", "section_title": "LangChain", "user_question": "What is LangChain?", "concise_answer": "LangChain is an AI-development framework used to work with large language models (LLMs), providing a standardized system for building complex applications.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["LangChain", "AI-development", "LLMs"]}
{"content_type": "General Concept", "section_title": "Large language model (LLM)", "user_question": "What is a large language model (LLM)?", "concise_answer": "Large language models, or LLMs, are AI machine learning models designed for natural language processing tasks, built by training on large datasets.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["large language model", "LLM", "NLP"]}
{"content_type": "Node Reference", "section_title": "node (n8n)", "user_question": "What is a node in n8n?", "concise_answer": "In n8n, nodes are individual components used to create workflows, defining when workflows run, processing data, and connecting with external services.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["node", "n8n", "workflow component"]}
{"content_type": "Node Reference", "section_title": "project (n8n)", "user_question": "What are projects in n8n?", "concise_answer": "n8n projects allow you to separate workflows, variables, and credentials into groups for easier management, facilitating team collaboration.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["project", "n8n", "workflow management"]}
{"content_type": "Node Reference", "section_title": "root node (n8n)", "user_question": "What is a root node in n8n?", "concise_answer": "Each n8n cluster node contains a single root node that defines the main functionality of the cluster, with sub nodes extending its functionality.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["root node", "n8n", "cluster functionality"]}
{"content_type": "General Concept", "section_title": "n8n Cluster Nodes", "user_question": "What is the structure of an n8n cluster node?", "concise_answer": "An n8n cluster node contains a single root node that defines the main functionality of the cluster. One or more sub nodes attach to the root node to extend its functionality, providing access to specific services or resources.", "structured_data": {"key_parameters": [{"name": "root node", "description": "Defines the main functionality of the cluster.", "example": null}, {"name": "sub node", "description": "Extends the functionality of the root node, providing access to specific services or resources.", "example": "calculator functionality"}], "code_block": null}, "keywords": ["n8n", "cluster node", "root node", "sub node", "functionality"]}
{"content_type": "General Concept", "section_title": "n8n Templates", "user_question": "What are n8n templates and how are they used?", "concise_answer": "n8n templates are pre-built workflows designed by n8n and community members. They can be imported into your n8n instance, but you may need to fill in credentials and adjust the configuration to suit your needs.", "structured_data": {"key_parameters": [{"name": "template", "description": "Pre-built workflows that can be imported into an n8n instance.", "example": null}], "code_block": null}, "keywords": ["n8n", "templates", "workflows", "import", "configuration"]}
{"content_type": "Node Reference", "section_title": "Trigger Node", "user_question": "What is a trigger node in n8n?", "concise_answer": "A trigger node is a special node responsible for executing the workflow in response to certain conditions. All production workflows need at least one trigger to determine when the workflow should run.", "structured_data": {"key_parameters": [{"name": "trigger node", "description": "Responsible for executing the workflow in response to certain conditions.", "example": null}], "code_block": null}, "keywords": ["n8n", "trigger node", "workflow", "execution", "conditions"]}
{"content_type": "General Concept", "section_title": "n8n Workflow", "user_question": "What is an n8n workflow?", "concise_answer": "An n8n workflow is a collection of nodes that automate a process. Workflows begin execution when a trigger condition occurs and execute sequentially to achieve complex tasks.", "structured_data": {"key_parameters": [{"name": "workflow", "description": "A collection of nodes that automate a process.", "example": null}], "code_block": null}, "keywords": ["n8n", "workflow", "nodes", "automation", "process"]}
{"content_type": "General Concept", "section_title": "Insights", "user_question": "What is the Insights feature in n8n?", "concise_answer": "The Insights feature gives instance owners and admins visibility into how workflows perform over time. It includes an insights summary banner, an insights dashboard, and a time saved metric for each workflow.", "structured_data": {"key_parameters": [{"name": "insights summary banner", "description": "Shows key metrics about your instance from the last 7 days.", "example": null}, {"name": "insights dashboard", "description": "Provides a detailed visual breakdown with per-workflow metrics and historical comparisons.", "example": null}, {"name": "time saved", "description": "For each workflow, you can set the number of minutes of work that each production execution saves you.", "example": null}], "code_block": null}, "keywords": ["n8n", "insights", "metrics", "dashboard", "performance"]}
{"content_type": "General Concept", "section_title": "Insights dashboard", "user_question": "What metrics are available in the n8n Insights dashboard?", "concise_answer": "The n8n Insights dashboard provides metrics such as total production executions, failed production executions, failure rate, time saved, and run time average. These metrics help users understand the performance and efficiency of their workflows.", "structured_data": {"key_parameters": [{"name": "Total production executions", "description": "The total number of times workflows have been executed in production.", "example": null}, {"name": "Failed production executions", "description": "The number of workflow executions that failed in production.", "example": null}, {"name": "Failure rate", "description": "The rate at which production executions fail.", "example": null}, {"name": "Time saved", "description": "The amount of time saved by automating workflows compared to manual execution.", "example": null}, {"name": "Run time average", "description": "The average time taken for workflows to run, including wait times from any wait nodes.", "example": null}], "code_block": null}, "keywords": ["Insights dashboard", "metrics", "production executions", "failure rate", "time saved"]}
{"content_type": "Configuration", "section_title": "Setting the time saved by a workflow", "user_question": "How can I configure the time saved by a workflow in n8n?", "concise_answer": "To configure the time saved by a workflow in n8n, navigate to the workflow, select the three dots menu in the top right, and choose settings. Update the 'Estimated time saved' value and save. This helps calculate the time saved by automation versus manual effort.", "structured_data": {"key_parameters": [{"name": "Estimated time saved", "description": "The number of minutes a workflow saves each time it runs.", "example": "10"}], "code_block": null}, "keywords": ["time saved", "workflow configuration", "automation", "manual effort", "n8n settings"]}
{"content_type": "Configuration", "section_title": "Disable or configure insights metrics collection", "user_question": "How can I disable or configure insights metrics collection in n8n?", "concise_answer": "If you self-host n8n, you can disable or configure insights and metrics collection using environment variables. This allows you to control the data collected for insights.", "structured_data": {"key_parameters": [{"name": "Environment variables", "description": "Variables used to configure or disable insights metrics collection.", "example": null}], "code_block": null}, "keywords": ["insights metrics", "disable", "configure", "environment variables", "self-hosted n8n"]}
{"content_type": "General Concept", "section_title": "Insights FAQs", "user_question": "What data does n8n use for insights calculations?", "concise_answer": "n8n insights only collect data from production executions of active workflows triggered on a schedule or a webhook. It does not include manual test executions or those from sub-workflows or error workflows.", "structured_data": {"key_parameters": [{"name": "Production executions", "description": "Executions from active workflows triggered on a schedule or webhook.", "example": null}], "code_block": null}, "keywords": ["insights data", "production executions", "active workflows", "n8n insights", "calculations"]}
{"content_type": "Node Reference", "section_title": "Keyboard shortcuts and controls", "user_question": "What are the keyboard shortcuts available in n8n for workflow controls?", "concise_answer": "n8n provides several keyboard shortcuts for workflow controls, including creating, opening, saving, undoing, redoing, and executing workflows. These shortcuts enhance efficiency when working with workflows.", "structured_data": {"key_parameters": [{"name": "Ctrl + Alt + n", "description": "Create new workflow.", "example": null}, {"name": "Ctrl + o", "description": "Open workflow.", "example": null}, {"name": "Ctrl + s", "description": "Save the current workflow.", "example": null}, {"name": "Ctrl + z", "description": "Undo the last action.", "example": null}, {"name": "Ctrl + shift + z", "description": "Redo the last undone action.", "example": null}, {"name": "Ctrl + Enter", "description": "Execute the current workflow.", "example": null}], "code_block": null}, "keywords": ["keyboard shortcuts", "workflow controls", "n8n", "efficiency", "productivity"]}
{"content_type": "General Concept", "section_title": "Suggested Learning Path", "user_question": "What resources are available to get started with n8n?", "concise_answer": "n8n provides a series of tutorials, courses, and step-by-step guides to help you get started. You can choose from quickstart guides, video courses, and text courses to learn at your own pace.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "learning path", "tutorials", "courses", "guides"]}
{"content_type": "How-To Guide", "section_title": "Set up your n8n", "user_question": "How can I set up n8n for the first time?", "concise_answer": "To set up n8n, you can sign up for a free trial on n8n Cloud or install the community edition using Docker or npm. Refer to the 'Choose your n8n' section for more details.", "structured_data": {"key_parameters": [{"name": "Installation Method", "description": "Options for setting up n8n, including n8n Cloud, Docker, or npm.", "example": "Docker"}], "code_block": null}, "keywords": ["n8n setup", "installation", "n8n Cloud", "Docker", "npm"]}
{"content_type": "How-To Guide", "section_title": "License Key", "user_question": "How do I activate my n8n license key?", "concise_answer": "To activate your n8n license key, log in as Admin or Owner, go to Settings > Usage and plan, select 'Enter activation key', paste your license key, and click 'Activate'.", "structured_data": {"key_parameters": [{"name": "License Activation", "description": "Steps to activate a license key in n8n.", "example": "Settings > Usage and plan > Enter activation key"}], "code_block": null}, "keywords": ["n8n", "license key", "activation", "settings", "UI"]}
{"content_type": "Configuration", "section_title": "Add a license key using an environment variables", "user_question": "How do I add a license key to n8n using environment variables?", "concise_answer": "To add a license key using environment variables in n8n, set the N8N_LICENSE_ACTIVATION_KEY to your license key in the n8n configuration. Note that if the instance already has an activated license, this variable will have no effect.", "structured_data": {"key_parameters": [{"name": "N8N_LICENSE_ACTIVATION_KEY", "description": "Environment variable to set your license key for n8n.", "example": "your-license-key"}], "code_block": null}, "keywords": ["license key", "environment variables", "n8n configuration"]}
{"content_type": "How-To Guide", "section_title": "Set up log streaming", "user_question": "How can I set up log streaming in n8n?", "concise_answer": "To set up log streaming in n8n, navigate to Settings > Log Streaming, select 'Add new destination', choose your destination type, and enter the configuration information in the New Event Destination modal. Then, select the events you want to stream and save the configuration.", "structured_data": {"key_parameters": [{"name": "destination type", "description": "The type of destination for log streaming.", "example": "syslog server, generic webhook, Sentry client"}], "code_block": null}, "keywords": ["log streaming", "n8n", "event destination"]}
{"content_type": "General Concept", "section_title": "Log streaming", "user_question": "What is log streaming in n8n?", "concise_answer": "Log streaming in n8n allows you to send events from n8n to your own logging tools, enabling you to manage monitoring within your own alerting and logging processes. It is available on Enterprise Self-hosted and Cloud plans.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["log streaming", "n8n", "monitoring"]}
{"content_type": "Node Reference", "section_title": "Events", "user_question": "What events can be streamed in n8n?", "concise_answer": "In n8n, you can stream various events such as Workflow (Started, Success, Failed), Node executions (Started, Finished), Audit events (User signed up, User updated, etc.), and AI node logs (Memory get messages, Embeddings embedded document, etc.).", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["events", "n8n", "streaming"]}
{"content_type": "General Concept", "section_title": "Destinations", "user_question": "What are the supported log streaming destinations in n8n?", "concise_answer": "n8n supports three types of log streaming destinations: a syslog server, a generic webhook, and a Sentry client.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["log streaming", "destinations", "n8n"]}
{"content_type": "General Concept", "section_title": "Semantic versioning in n8n", "user_question": "How does n8n use semantic versioning?", "concise_answer": "n8n uses semantic versioning with version numbers in the format MAJOR.MINOR.PATCH. The MAJOR version changes for incompatible changes, the MINOR version for backward-compatible functionality additions, and the PATCH version for backward-compatible bug fixes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["semantic versioning", "n8n", "version numbers"]}
{"content_type": "General Concept", "section_title": "Convert to sub-workflow", "user_question": "How can I convert a large workflow into a sub-workflow in n8n?", "concise_answer": "To convert a large workflow into a sub-workflow in n8n, highlight the nodes you want to convert, ensuring they are fully connected, start from a single node, and end with a single node. Right-click to open the context menu and select 'Convert to sub-workflow' or use the shortcut Alt + X. n8n will open a new tab with the selected nodes, preserve all node parameters, and replace the selected nodes in the original workflow with a 'Call My Sub-workflow' node. You will need to manually adjust the field types in the Start and Return nodes in the new sub-workflow.", "structured_data": {"key_parameters": [{"name": "Nodes", "description": "Nodes to be converted must be fully connected, start from a single node, and end with a single node.", "example": null}, {"name": "Shortcut", "description": "Keyboard shortcut to convert nodes to sub-workflow.", "example": "Alt + X"}], "code_block": null}, "keywords": ["sub-workflow", "convert", "n8n", "workflow", "nodes"]}
{"content_type": "General Concept", "section_title": "API support for assigning users to projects", "user_question": "What new API features are available for managing users in projects in n8n?", "concise_answer": "The new API features in n8n allow you to add and update users within projects. You can assign existing or pending users to a project with a specific role, update a user’s role within a project, and remove users from projects. This update enables you to manage user assignments via the API, eliminating the need for manual UI assignments.", "structured_data": {"key_parameters": [{"name": "Assign Users", "description": "Assign existing or pending users to a project with a specific role.", "example": null}, {"name": "Update Role", "description": "Update a user’s role within a project.", "example": null}, {"name": "Remove Users", "description": "Remove users from one or more projects.", "example": null}], "code_block": null}, "keywords": ["API", "user management", "projects", "n8n", "roles"]}
{"content_type": "General Concept", "section_title": "Add pending users to project member assignment", "user_question": "How can I add pending users to projects in n8n?", "concise_answer": "In n8n, you can now add pending users, who have been invited but haven't completed sign-up, to projects as members. This allows you to configure a user's project access upfront, ensuring they have the correct roles immediately upon joining, without waiting for them to finish setting up their account.", "structured_data": {"key_parameters": [{"name": "Pending Users", "description": "Users who have been invited but haven't completed sign-up.", "example": null}, {"name": "Project Access", "description": "Configure a user's project access upfront.", "example": null}], "code_block": null}, "keywords": ["pending users", "project access", "n8n", "user roles", "sign-up"]}
{"content_type": "General Concept", "section_title": "n8n@1.95.0", "user_question": "What new feature was added in n8n version 1.95.0 to help with AI workflows?", "concise_answer": "In n8n version 1.95.0, a new feature called 'Evaluations for AI workflows' was added. This feature allows users to iterate, test, and compare changes to AI automations before deploying them to production. It helps in assessing AI performance across various inputs by adding a dedicated path in workflows for running test cases and applying custom metrics.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "AI workflows", "Evaluations", "AI performance", "version 1.95.0"]}
{"content_type": "Node Reference", "section_title": "Evaluation node and tab", "user_question": "What is the purpose of the Evaluation node in n8n?", "concise_answer": "The Evaluation node in n8n is designed to enable end-to-end AI evaluation. It includes several operations that, when used together, allow users to assess AI performance across a range of inputs, helping to build proof-of-concepts, iterate effectively, catch regressions early, and make confident decisions in production.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Evaluation node", "AI evaluation", "AI workflows", "end-to-end"]}
{"content_type": "How-To Guide", "section_title": "🛠 How evaluations work", "user_question": "How do I set up an evaluation path in n8n for AI workflows?", "concise_answer": "To set up an evaluation path in n8n, start by selecting an AI workflow with LLM or Agent nodes. Add an Evaluation node with the 'On new Evaluation event' operation to trigger the evaluation. Configure it to read your dataset from Google Sheets. Add a second Evaluation node with the 'Set Outputs' operation to capture responses. Finally, add a third Evaluation node with the 'Set Metrics' operation to score the outputs. This setup allows you to test and iterate on your AI logic effectively.", "structured_data": {"key_parameters": [{"name": "On new Evaluation event", "description": "Operation to trigger the evaluation process.", "example": null}, {"name": "Set Outputs", "description": "Operation to capture the response and write it back to the dataset.", "example": null}, {"name": "Set Metrics", "description": "Operation to score the outputs based on defined metrics.", "example": null}], "code_block": null}, "keywords": ["evaluation path", "AI workflow", "n8n", "Google Sheets", "metrics"]}
{"content_type": "General Concept", "section_title": "Things to keep in mind", "user_question": "What should I consider when using evaluations for AI workflows in n8n?", "concise_answer": "When using evaluations for AI workflows in n8n, note that test datasets are managed through Google Sheets, requiring a Google Sheets credential. Each workflow supports one evaluation at a time, and Community Edition allows only one evaluation, while Pro and Enterprise plans offer unlimited evaluations. AI Evaluations are not available for instances in scaling mode.", "structured_data": {"key_parameters": [{"name": "Google Sheets credential", "description": "Required to manage test datasets for evaluations.", "example": null}, {"name": "Evaluation limit", "description": "Community Edition supports one evaluation; Pro and Enterprise plans allow unlimited evaluations.", "example": null}, {"name": "Scaling mode", "description": "AI Evaluations are not enabled for instances in scaling mode.", "example": null}], "code_block": null}, "keywords": ["AI evaluations", "n8n", "Google Sheets", "workflow", "scaling mode"]}
{"content_type": "General Concept", "section_title": "Verified community nodes on Cloud", "user_question": "What are verified community nodes in n8n Cloud?", "concise_answer": "Verified community nodes in n8n Cloud are a select set of community and partner integrations that have been manually vetted for quality and security. These nodes are available directly from the Nodes panel in the editor, marked with a checkmark, and can be installed and used without leaving the workspace.", "structured_data": {"key_parameters": [{"name": "Cloud availability", "description": "Community nodes are now available on n8n Cloud, not just for self-hosted users.", "example": null}, {"name": "Built-in discovery", "description": "Nodes can be found and explored directly from the Nodes panel in the editor.", "example": null}, {"name": "Trust and verification", "description": "Nodes are manually vetted for quality and security and marked with a checkmark.", "example": null}], "code_block": null}, "keywords": ["n8n Cloud", "community nodes", "verified nodes", "integrations", "editor"]}
{"content_type": "How-To Guide", "section_title": "Use a verified node", "user_question": "How do I use a verified node in n8n?", "concise_answer": "To use a verified node in n8n, ensure you are on version 1.94.0 or later. Verified nodes are enabled by default. Open the Nodes panel from the editor, search for the node indicated by a shield, select it, and click Install. Once installed by an Owner, all users on the instance can use it.", "structured_data": {"key_parameters": [{"name": "n8n version", "description": "Ensure you are using n8n version 1.94.0 or later.", "example": "1.94.0"}, {"name": "Nodes panel", "description": "The panel in the editor where you can search and install nodes.", "example": null}, {"name": "Verified node indicator", "description": "Verified nodes are indicated by a shield icon.", "example": "🛡️"}], "code_block": null}, "keywords": ["use node", "verified node", "n8n", "install node", "Nodes panel"]}
{"content_type": "How-To Guide", "section_title": "Build a node and get it verified", "user_question": "How can I get my n8n node verified?", "concise_answer": "To get your n8n node verified, review the community node verification guidelines, follow the recommendations for creating nodes, check your design against UX guidelines, submit your node to npm, and request verification by filling out the provided form.", "structured_data": {"key_parameters": [{"name": "Verification guidelines", "description": "Guidelines to ensure your node meets the quality and security standards.", "example": null}, {"name": "Node submission", "description": "Submit your node to npm and request verification.", "example": null}], "code_block": null}, "keywords": ["build node", "verification", "n8n", "community node", "submit node"]}
{"content_type": "General Concept", "section_title": "Extended logs view", "user_question": "What is the extended logs view in n8n and how does it help in debugging?", "concise_answer": "The extended logs view in n8n provides a unified panel at the bottom of the canvas to trace workflow executions. It helps in debugging by showing each step of execution, including input, output, and status information. It highlights nodes in real-time, shows execution time, and allows logs to be popped out for easier debugging across multiple screens.", "structured_data": {"key_parameters": [{"name": "Logs view", "description": "A panel at the bottom of the canvas that shows execution steps.", "example": null}, {"name": "Real-time highlighting", "description": "Shows which nodes are currently running or have failed.", "example": null}, {"name": "Execution history", "description": "Allows exploration of past execution data.", "example": null}, {"name": "Pop out button", "description": "Opens the logs as a floating window for easier debugging.", "example": null}], "code_block": null}, "keywords": ["logs view", "debugging", "workflow execution", "real-time", "n8n"]}
{"content_type": "How-To Guide", "section_title": "🛠️How to", "user_question": "How can I access the expanded logs view in n8n?", "concise_answer": "To access the expanded logs view in n8n, click on the Logs bar at the bottom of the canvas. The view also opens when you open the chat window at the bottom of the page.", "structured_data": {"key_parameters": [{"name": "Logs bar", "description": "The bar at the bottom of the canvas to access logs.", "example": null}, {"name": "Chat window", "description": "Opening the chat window also opens the logs view.", "example": null}], "code_block": null}, "keywords": ["access logs", "expanded logs view", "n8n", "canvas", "chat window"]}
{"content_type": "How-To Guide", "section_title": "Faster ways to open sub-workflows", "user_question": "What are the new ways to open sub-workflows in n8n?", "concise_answer": "In n8n, you can open sub-workflows faster by right-clicking on a sub-workflow node and selecting 'Open sub-workflow' from the context menu. Alternatively, use keyboard shortcuts: CTRL + SHIFT + O or CTRL + Double Click on Windows, and CMD + SHIFT + O or CMD + Double Click on Mac.", "structured_data": {"key_parameters": [{"name": "Right-click menu", "description": "Option to open sub-workflow from the context menu.", "example": "Open sub-workflow"}, {"name": "Keyboard shortcuts", "description": "Shortcuts to open sub-workflows quickly.", "example": "CTRL + SHIFT + O"}], "code_block": null}, "keywords": ["sub-workflows", "open sub-workflow", "keyboard shortcuts", "n8n", "context menu"]}
{"content_type": "How-To Guide", "section_title": "Archive workflows", "user_question": "How do I archive and manage workflows in n8n?", "concise_answer": "To archive a workflow in n8n, select 'Archive' from the Editor UI menu. Archived workflows are hidden by default but can be shown using the 'Show archived workflows' option in the workflow filter menu. Archived workflows can be permanently deleted or recovered by selecting 'Unarchive'.", "structured_data": {"key_parameters": [{"name": "Archive", "description": "Action to archive a workflow instead of removing it.", "example": null}, {"name": "Show archived workflows", "description": "Option to display archived workflows in the filter menu.", "example": null}, {"name": "Unarchive", "description": "Action to recover an archived workflow.", "example": null}], "code_block": null}, "keywords": ["archive workflows", "manage workflows", "n8n", "unarchive", "workflow filter"]}
{"content_type": "General Concept", "section_title": "Archived Workflows", "user_question": "What happens to workflows when they are archived in n8n?", "concise_answer": "When workflows are archived in n8n, they become deactivated and cannot be edited. Additionally, archived workflows cannot be selected as sub-workflows for execution.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["archived workflows", "deactivated", "n8n"]}
{"content_type": "Configuration", "section_title": "Partial Execution for AI Tools", "user_question": "How can I execute specific tools in an AI workflow without running the entire workflow in n8n?", "concise_answer": "In n8n, you can execute specific tools in an AI workflow by using the partial execution feature. This can be done by clicking the Play button on the tool directly from the canvas view or by selecting 'Test step' in the Node Details View. This allows for incremental testing and reduces unnecessary AI calls.", "structured_data": {"key_parameters": [{"name": "Play button", "description": "Button to execute a specific tool directly from the canvas view.", "example": null}, {"name": "Test step", "description": "Option in the Node Details View to run a specific tool.", "example": null}], "code_block": null}, "keywords": ["partial execution", "AI tools", "n8n"]}
{"content_type": "General Concept", "section_title": "Extended Logs View", "user_question": "What is the extended Logs View in n8n and how does it help?", "concise_answer": "The extended Logs View in n8n provides a unified panel at the bottom of the canvas that displays a hierarchical list of nodes in the order they were executed. It helps in tracing executions, troubleshooting issues, and understanding workflow behavior by showing inputs, outputs, and status information in real-time.", "structured_data": {"key_parameters": [{"name": "Logs view", "description": "A panel that shows the execution order of nodes with detailed input and output data.", "example": null}, {"name": "Real-time highlighting", "description": "Feature that shows which nodes are currently running or have failed.", "example": null}], "code_block": null}, "keywords": ["logs view", "debugging", "n8n"]}
{"content_type": "General Concept", "section_title": "Execution and Logs", "user_question": "How can I view the execution history and logs in n8n?", "concise_answer": "In n8n, you can view the execution history and logs by clicking on the Logs bar at the bottom of the canvas. This view allows you to explore past execution data, see roll-up stats like total execution time and AI tokens used, and even pop out the logs into a floating window for easier debugging.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["execution history", "logs", "debugging", "n8n", "workflow"]}
{"content_type": "How-To Guide", "section_title": "How to Access Expanded Logs View", "user_question": "How do I access the expanded logs view in n8n?", "concise_answer": "To access the expanded logs view in n8n, click on the Logs bar at the bottom of the canvas. This view also opens when you open the chat window at the bottom of the page.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["expanded logs", "logs view", "n8n", "workflow", "debugging"]}
{"content_type": "General Concept", "section_title": "Insights Enhancements for Enterprise", "user_question": "What are the new insights enhancements for enterprise users in n8n?", "concise_answer": "The new insights enhancements for enterprise users in n8n include expanded time ranges for filtering insights, allowing views from the last 24 hours up to 1 year, and hourly granularity for the last 24 hours of production executions. These updates provide deeper visibility into workflow history and help detect problems sooner.", "structured_data": {"key_parameters": [{"name": "Expanded time ranges", "description": "Allows filtering insights over a variety of time periods, from the last 24 hours up to 1 year.", "example": null}, {"name": "Hourly granularity", "description": "Provides detailed insights into the last 24 hours of production executions with hourly granularity.", "example": null}], "code_block": null}, "keywords": ["insights", "enterprise", "n8n", "workflow history", "granularity"]}
{"content_type": "Configuration", "section_title": "Extended HTTP Request Tool Functionality", "user_question": "What new features are available in the HTTP Request tool for AI workflows in n8n?", "concise_answer": "The HTTP Request tool in AI workflows now includes advanced configuration options such as Pagination, Batching, Timeout, Redirects, Proxy support, and cURL import. It also supports the $fromAI function to dynamically generate parameters based on the context of your prompt.", "structured_data": {"key_parameters": [{"name": "Pagination", "description": "Allows handling of paginated API responses.", "example": null}, {"name": "Batching", "description": "Enables sending multiple requests in a single batch.", "example": null}, {"name": "Timeout", "description": "Sets the maximum time to wait for a response.", "example": "5000"}, {"name": "Redirects", "description": "Handles HTTP redirects automatically.", "example": null}, {"name": "Proxy support", "description": "Allows requests to be sent through a proxy server.", "example": null}, {"name": "cURL import", "description": "Enables importing of cURL commands directly into the tool.", "example": null}, {"name": "$fromAI function", "description": "Dynamically generates parameters based on the context of the prompt.", "example": null}], "code_block": null}, "keywords": ["HTTP Request", "AI workflows", "n8n", "configuration", "API"]}
{"content_type": "How-To Guide", "section_title": "HTTP Request Tool", "user_question": "How do I add and configure a new HTTP Request tool in n8n?", "concise_answer": "To add a new HTTP Request tool in n8n, click the ‘+’ icon to add a new tool connection. In the Tools panel, select the HTTP Request Tool and configure it as you would a regular HTTP Request node, including any advanced options.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["HTTP Request", "tool connection", "n8n configuration"]}
{"content_type": "General Concept", "section_title": "Scoped API keys", "user_question": "What are scoped API keys in n8n and how do they enhance security?", "concise_answer": "Scoped API keys in n8n allow users to create API keys with specific scopes, limiting access to only the necessary resources and actions. This enhances security by preventing excessive access and making it safer to work with third parties.", "structured_data": {"key_parameters": [{"name": "Access Type", "description": "Select whether the key has read, write, or both types of access.", "example": "read"}, {"name": "Resources", "description": "Specify which resources the key can interact with.", "example": "Variables, Projects"}, {"name": "Supported Scopes", "description": "Defines the actions that can be performed with the key.", "example": "list, create, delete"}], "code_block": null}, "keywords": ["API keys", "security", "scoped access", "n8n"]}
{"content_type": "General Concept", "section_title": "Drag and Drop in Folders", "user_question": "How has the folder management improved in n8n?", "concise_answer": "Folder management in n8n has improved with the ability to drag and drop workflows and folders, making it easier to organize and manage a growing collection of workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["folder management", "drag and drop", "workflow organization", "n8n"]}
{"content_type": "General Concept", "section_title": "Insights", "user_question": "What is the new Insights feature in n8n and what does it offer?", "concise_answer": "The new Insights feature in n8n provides a dashboard to monitor workflow performance over time. It includes a summary banner with key metrics like total executions and failure rate, and an insights dashboard for deeper analysis, available on Pro and Enterprise plans.", "structured_data": {"key_parameters": [{"name": "Summary Banner", "description": "Provides a quick overview of key metrics over the last 7 days.", "example": "Total production executions"}, {"name": "Insights Dashboard", "description": "Offers a deeper view into workflow performance and activity.", "example": "Available on Pro and Enterprise plans"}], "code_block": null}, "keywords": ["Insights", "workflow metrics", "performance monitoring", "n8n"]}
{"content_type": "General Concept", "section_title": "Dashboard Overview", "user_question": "What features does the n8n dashboard include?", "concise_answer": "The n8n dashboard includes total production executions over time, a comparison of successful and failed executions, per-workflow breakdowns of key metrics, comparisons with previous periods, and runtime average and failure rate over time.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["dashboard", "executions", "metrics", "workflow", "comparison"]}
{"content_type": "Configuration", "section_title": "Time Saved per Execution", "user_question": "How can I track the time saved per execution in n8n?", "concise_answer": "Within workflow settings, you can assign a 'time saved per execution' value to any workflow. This helps track the impact of your workflows and makes it easier to share this information visually with other teams and stakeholders.", "structured_data": {"key_parameters": [{"name": "time saved per execution", "description": "A value assigned to a workflow to track the time saved per execution.", "example": null}], "code_block": null}, "keywords": ["time saved", "execution", "workflow", "impact", "tracking"]}
{"content_type": "Node Reference", "section_title": "Node Updates", "user_question": "What new nodes have been added in the latest n8n release?", "concise_answer": "The latest n8n release includes a credential check for the Salesforce node, the addition of SearXNG as a tool for AI agents, a node for Azure Cosmos DB, and a node for Milvus Vector Store.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["nodes", "Salesforce", "SearXNG", "Azure Cosmos DB", "Milvus"]}
{"content_type": "Node Reference", "section_title": "MCP Nodes", "user_question": "What are MCP nodes in n8n?", "concise_answer": "MCP nodes in n8n standardize how LLMs like Claude, ChatGPT, or Cursor interact with tools or integrate data for their agents. They include the MCP Server Trigger and MCP Client Tool nodes, which allow n8n to act as an MCP server or client.", "structured_data": {"key_parameters": [{"name": "MCP Server Trigger", "description": "Turns n8n into an MCP server, providing n8n tools to models running outside of n8n.", "example": null}, {"name": "MCP Client Tool", "description": "Allows you to use tools exposed by an external MCP server, connecting models to call external tools with n8n agents.", "example": null}], "code_block": null}, "keywords": ["MCP", "nodes", "LLMs", "Server Trigger", "Client Tool"]}
{"content_type": "Node Reference", "section_title": "MCP Server Trigger", "user_question": "What does the MCP Server Trigger node do in n8n?", "concise_answer": "The MCP Server Trigger node turns n8n into an MCP server, providing n8n tools to models running outside of n8n. It acts as an entry point for MCP clients by exposing a URL for interaction.", "structured_data": {"key_parameters": [{"name": "MCP Server Trigger", "description": "Acts as an entry point into n8n for MCP clients, exposing a URL for interaction.", "example": null}], "code_block": null}, "keywords": ["MCP", "Server Trigger", "n8n", "models", "tools"]}
{"content_type": "Node Reference", "section_title": "MCP Client Tool", "user_question": "How does the MCP Client Tool node function in n8n?", "concise_answer": "The MCP Client Tool node allows you to use tools exposed by an external MCP server. It connects models to call external tools with n8n agents, accessing multiple tools on the MCP server at once.", "structured_data": {"key_parameters": [{"name": "MCP Client Tool", "description": "Connects models to call external tools with n8n agents, accessing multiple tools on the MCP server.", "example": null}], "code_block": null}, "keywords": ["MCP", "Client Tool", "n8n", "external tools", "models"]}
{"content_type": "General Concept", "section_title": "Folders", "user_question": "What are folders in n8n and how can they be used?", "concise_answer": "Folders in n8n are a feature that allows users to categorize and organize their workflows more effectively. They support unlimited and nested folders, making it easier to manage and search for workflows within your n8n instances.", "structured_data": {"key_parameters": [{"name": "Folders", "description": "Used for categorizing and organizing workflows in n8n.", "example": "Unlimited folders and nested folders."}], "code_block": null}, "keywords": ["folders", "organization", "workflows", "n8n", "categorization"]}
{"content_type": "How-To Guide", "section_title": "Folders", "user_question": "How do I create and manage folders in n8n?", "concise_answer": "To create and manage folders in n8n, you can do so within your personal space or within projects. You can also create workflows from within a folder. It may be necessary to restart your instance to activate the folders feature.", "structured_data": {"key_parameters": [{"name": "Create and manage folders", "description": "Allows users to organize workflows within personal space or projects.", "example": "Create workflows from within a folder."}], "code_block": null}, "keywords": ["create folders", "manage folders", "n8n", "workflows", "organization"]}
{"content_type": "Configuration", "section_title": "n8n@1.87.0", "user_question": "What updates were included in the n8n version 1.87.0 release?", "concise_answer": "The n8n version 1.87.0 release included new nodes, node updates, API updates, core updates, editor updates, and bug fixes.", "structured_data": {"key_parameters": [{"name": "New nodes", "description": "Introduction of new nodes in the system.", "example": null}, {"name": "Node updates", "description": "Updates to existing nodes.", "example": null}, {"name": "API updates", "description": "Updates to the API.", "example": null}, {"name": "Core updates", "description": "Updates to the core system.", "example": null}, {"name": "Editor updates", "description": "Updates to the editor interface.", "example": null}, {"name": "Bug fixes", "description": "Fixes for bugs identified in previous versions.", "example": null}], "code_block": null}, "keywords": ["n8n", "version 1.87.0", "release", "updates", "bug fixes"]}
{"content_type": "Configuration", "section_title": "n8n@1.86.0", "user_question": "What changes were made in the n8n version 1.86.0 release?", "concise_answer": "The n8n version 1.86.0 release included API updates, core updates, editor improvements, node updates, and bug fixes.", "structured_data": {"key_parameters": [{"name": "API updates", "description": "Updates to the API.", "example": null}, {"name": "Core updates", "description": "Updates to the core system.", "example": null}, {"name": "Editor improvements", "description": "Improvements to the editor interface.", "example": null}, {"name": "Node updates", "description": "Updates to existing nodes.", "example": null}, {"name": "Bug fixes", "description": "Fixes for bugs identified in previous versions.", "example": null}], "code_block": null}, "keywords": ["n8n", "version 1.86.0", "release", "updates", "bug fixes"]}
{"content_type": "General Concept", "section_title": "Create and manage folders", "user_question": "How can I organize my workspace in n8n?", "concise_answer": "In n8n, you can create and manage folders within your personal space or projects to organize your workspace. This feature is available for all registered users and helps in decluttering your workspace. You may need to restart your instance to activate folders.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["folders", "workspace", "organization", "n8n", "projects"]}
{"content_type": "Node Reference", "section_title": "Enhancements to Form Trigger Node", "user_question": "What new features are available in the Form Trigger node?", "concise_answer": "The Form Trigger node has been enhanced with features like HTML customization, custom CSS support, form previews, hidden fields, and new response options. These updates allow for more flexibility and customization, enabling the creation of visually engaging and functional workflows.", "structured_data": {"key_parameters": [{"name": "HTML customization", "description": "Add custom HTML to forms for richer user experiences.", "example": null}, {"name": "Custom CSS support", "description": "Apply custom styles to align forms with your brand’s look and feel.", "example": null}, {"name": "Form previews", "description": "Form’s description and title appear in previews when sharing.", "example": null}, {"name": "Hidden fields", "description": "Use query parameters to add hidden fields for passing data.", "example": null}, {"name": "New response options", "description": "Respond to submissions with text, HTML, or downloadable files.", "example": null}], "code_block": null}, "keywords": ["Form Trigger", "HTML customization", "CSS support", "hidden fields", "n8n"]}
{"content_type": "General Concept", "section_title": "Schema Preview", "user_question": "What is the Schema Preview feature in n8n?", "concise_answer": "Schema Preview in n8n allows you to view and work with a node’s expected output without executing it or adding credentials. This feature helps in designing workflows efficiently by letting you see expected node outputs instantly.", "structured_data": {"key_parameters": [{"name": "Schema Preview", "description": "View node’s expected output without execution or credentials.", "example": null}], "code_block": null}, "keywords": ["Schema Preview", "node output", "workflow design", "n8n", "credentials"]}
{"content_type": "How-To Guide", "section_title": "Define workflow logic first, take care of credentials later", "user_question": "How can I build an n8n workflow without being sidetracked by credential setup?", "concise_answer": "To build an n8n workflow efficiently, focus on defining the workflow logic first and handle credential setup later. This approach allows you to create an end-to-end workflow without interruptions.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["workflow logic", "credential setup", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Avoid unwanted executions when building", "user_question": "How can I prevent unwanted executions in n8n while building a workflow?", "concise_answer": "To avoid unwanted executions in n8n, use the Schema Preview feature to view outputs without executing nodes. This prevents unnecessary API calls, data changes, or third-party service costs.", "structured_data": {"key_parameters": [{"name": "Schema Preview", "description": "Allows viewing of node outputs without execution.", "example": null}], "code_block": null}, "keywords": ["unwanted executions", "Schema Preview", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Tidy up", "user_question": "How can I organize my n8n workflow for better readability?", "concise_answer": "Use the 'Tidy up' feature in n8n to instantly align nodes, center stickies, and untangle connections. This improves workflow readability and structure, making it easier to understand and share.", "structured_data": {"key_parameters": [{"name": "Tidy up button", "description": "Located in the bottom-left corner of the canvas, it organizes the workflow.", "example": "broom icon"}, {"name": "Keyboard shortcut", "description": "Press Shift + Alt + T to tidy up the workflow.", "example": "Shift + Alt + T"}, {"name": "Right-click option", "description": "Right-click on the canvas and select 'Tidy up workflow'.", "example": null}], "code_block": null}, "keywords": ["Tidy up", "workflow organization", "n8n"]}
{"content_type": "General Concept", "section_title": "Multiple API keys", "user_question": "What is the benefit of using multiple API keys in n8n?", "concise_answer": "Using multiple API keys in n8n allows users to generate and manage separate keys for different workflows or integrations. This enhances security by enabling easier key rotation and isolation of credentials.", "structured_data": {"key_parameters": [{"name": "Multiple API keys", "description": "Allows generation and management of separate keys for different workflows.", "example": null}], "code_block": null}, "keywords": ["API keys", "security", "n8n"]}
{"content_type": "General Concept", "section_title": "Improved partial executions", "user_question": "What improvements have been made to partial executions in n8n?", "concise_answer": "The new execution engine for partial executions in n8n ensures that testing parts of a workflow in the builder closely mirrors production behavior. This update makes iterating with updated run-data faster and more reliable, particularly for complex workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["partial executions", "workflow testing", "execution engine", "n8n", "builder"]}
{"content_type": "General Concept", "section_title": "Release n8n@1.81.0", "user_question": "What updates are included in n8n version 1.81.0?", "concise_answer": "n8n version 1.81.0 includes bug fixes, a core update, editor improvements, and a node update.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.81.0", "bug fixes", "core update", "editor improvements"]}
{"content_type": "General Concept", "section_title": "n8n@1.79.0", "user_question": "What updates are included in the n8n version 1.79.0 release?", "concise_answer": "The n8n version 1.79.0 release includes new features, node updates, and bug fixes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.79.0", "release updates", "new features", "bug fixes"]}
{"content_type": "General Concept", "section_title": "n8n@1.78.0", "user_question": "What does the n8n version 1.78.0 release contain?", "concise_answer": "The n8n version 1.78.0 release contains new features, node updates, and bug fixes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.78.0", "release details", "new features", "bug fixes"]}
{"content_type": "General Concept", "section_title": "n8n@1.77.0", "user_question": "What are the highlights of the n8n version 1.77.0 release?", "concise_answer": "The n8n version 1.77.0 release includes new features, editor updates, new nodes, new credentials, node updates, and bug fixes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.77.0", "release highlights", "new features", "editor updates"]}
{"content_type": "General Concept", "section_title": "n8n@1.76.0", "user_question": "What updates are included in the n8n version 1.76.0 release?", "concise_answer": "The n8n version 1.76.0 release includes new features, editor updates, new credentials, node improvements, and bug fixes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.76.0", "release updates", "new features", "editor updates"]}
{"content_type": "General Concept", "section_title": "Improved consistency across environments", "user_question": "What improvements have been made to ensure consistency across environments in n8n?", "concise_answer": "The release includes improvements for better consistency between staging and production environments. It addresses issues like visibility into required credential updates, synchronization of changes, and clarity in the commit process.", "structured_data": {"key_parameters": [{"name": "Credential Updates", "description": "Indicates required credential updates when pulling changes.", "example": null}, {"name": "Synchronization", "description": "Ensures deletions and other modifications sync correctly across environments.", "example": null}, {"name": "Commit Process", "description": "Improves commit selection to provide better visibility into what’s being pushed.", "example": null}], "code_block": null}, "keywords": ["consistency", "environments", "credential updates", "synchronization", "commit process"]}
{"content_type": "Node Reference", "section_title": "New node: Microsoft Entra ID", "user_question": "What features does the new Microsoft Entra ID node support in n8n?", "concise_answer": "The Microsoft Entra ID node supports creating, getting, updating, and deleting users and groups, as well as adding and removing users from groups.", "structured_data": {"key_parameters": [{"name": "User Management", "description": "Create, get, update, and delete users.", "example": null}, {"name": "Group Management", "description": "Create, get, update, and delete groups.", "example": null}, {"name": "Group Membership", "description": "Add users to and remove them from groups.", "example": null}], "code_block": null}, "keywords": ["Microsoft Entra ID", "user management", "group management", "identity", "access management"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What updates have been made to the AI Agent and Google Vertex Chat nodes in n8n?", "concise_answer": "The AI Agent node now supports using vector stores as tools, and the Google Vertex Chat node has an option to specify the GCP region for API credentials.", "structured_data": {"key_parameters": [{"name": "AI Agent", "description": "Vector stores can be directly used as tools for the agent.", "example": null}, {"name": "Google Vertex Chat", "description": "Added option to specify the GCP region for the Google API credentials.", "example": null}], "code_block": null}, "keywords": ["AI Agent", "Google Vertex Chat", "vector stores", "GCP region", "API credentials"]}
{"content_type": "Node Reference", "section_title": "Overhauled Code node editing experience", "user_question": "What new features have been added to the Code node editing experience in n8n?", "concise_answer": "The Code node editing experience now includes TypeScript autocomplete, linting, hover tips, search and replace, new keyboard shortcuts, auto-formatting, and more, all built on a web worker architecture.", "structured_data": {"key_parameters": [{"name": "TypeScript Autocomplete", "description": "Provides autocomplete suggestions for TypeScript.", "example": null}, {"name": "TypeScript Linting", "description": "Linting support for TypeScript code.", "example": null}, {"name": "Keyboard Shortcuts", "description": "New shortcuts based on the VSCode keymap.", "example": null}, {"name": "Auto-formatting", "description": "Auto-formatting using prettier (Alt+Shift+F).", "example": null}], "code_block": null}, "keywords": ["Code node", "TypeScript", "autocomplete", "linting", "keyboard shortcuts"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What updates were made to the AI Agent node in n8n version 1.73.0?", "concise_answer": "In n8n version 1.73.0, the AI Agent node received updated descriptions for Chat Trigger options.", "structured_data": {"key_parameters": [{"name": "Chat Trigger options", "description": "Options for triggering actions based on chat inputs.", "example": null}], "code_block": null}, "keywords": ["AI Agent", "Chat Trigger", "n8n 1.73.0"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What changes were made to the Facebook Graph API node in n8n version 1.73.0?", "concise_answer": "The Facebook Graph API node was updated to support API version 21.0 in n8n version 1.73.0.", "structured_data": {"key_parameters": [{"name": "API version", "description": "The version of the Facebook Graph API that the node supports.", "example": "21.0"}], "code_block": null}, "keywords": ["Facebook Graph API", "API v21.0", "n8n 1.73.0"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new options were added to the Gmail node in n8n version 1.73.0?", "concise_answer": "In n8n version 1.73.0, the Gmail node added two new options for the 'Send and wait' operation: free text and custom form.", "structured_data": {"key_parameters": [{"name": "Send and wait operation", "description": "An operation in the Gmail node that allows sending emails and waiting for a response.", "example": null}, {"name": "Free text", "description": "An option to input text freely in the operation.", "example": null}, {"name": "Custom form", "description": "An option to use a custom form in the operation.", "example": null}], "code_block": null}, "keywords": ["Gmail", "Send and wait", "n8n 1.73.0"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What support was added to the Linear Trigger node in n8n version 1.73.0?", "concise_answer": "The Linear Trigger node in n8n version 1.73.0 added support for the admin scope.", "structured_data": {"key_parameters": [{"name": "Admin scope", "description": "A scope that allows administrative actions within the Linear Trigger node.", "example": null}], "code_block": null}, "keywords": ["Linear Trigger", "admin scope", "n8n 1.73.0"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new API support was added to the MailerLite node in n8n version 1.73.0?", "concise_answer": "The MailerLite node now supports the new API in n8n version 1.73.0.", "structured_data": {"key_parameters": [{"name": "New API", "description": "The latest API version supported by the MailerLite node.", "example": null}], "code_block": null}, "keywords": ["MailerLite", "new API", "n8n 1.73.0"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new options were added to the Slack node in n8n version 1.73.0?", "concise_answer": "In n8n version 1.73.0, the Slack node added two new options for the 'Send and wait' operation: free text and custom form.", "structured_data": {"key_parameters": [{"name": "Send and wait operation", "description": "An operation in the Slack node that allows sending messages and waiting for a response.", "example": null}, {"name": "Free text", "description": "An option to input text freely in the operation.", "example": null}, {"name": "Custom form", "description": "An option to use a custom form in the operation.", "example": null}], "code_block": null}, "keywords": ["Slack", "Send and wait", "n8n 1.73.0"]}
{"content_type": "General Concept", "section_title": "Node updates", "user_question": "What credential support was added in n8n version 1.73.0?", "concise_answer": "In n8n version 1.73.0, credential support was added for SolarWinds IPAM and SolarWinds Observability.", "structured_data": {"key_parameters": [{"name": "SolarWinds IPAM", "description": "Credential support for SolarWinds IP Address Manager.", "example": null}, {"name": "SolarWinds Observability", "description": "Credential support for SolarWinds Observability platform.", "example": null}], "code_block": null}, "keywords": ["SolarWinds IPAM", "SolarWinds Observability", "n8n 1.73.0"]}
{"content_type": "General Concept", "section_title": "Node updates", "user_question": "What performance improvements were made in n8n version 1.73.0?", "concise_answer": "In n8n version 1.73.0, the schema view performance in the node details view was improved by 90%, and drag and drop re-ordering was added to parameters.", "structured_data": {"key_parameters": [{"name": "Schema view performance", "description": "The performance of the schema view in node details was improved significantly.", "example": "90% improvement"}, {"name": "Drag and drop re-ordering", "description": "A feature that allows users to reorder parameters using drag and drop.", "example": null}], "code_block": null}, "keywords": ["performance improvement", "schema view", "drag and drop", "n8n 1.73.0"]}
{"content_type": "General Concept", "section_title": "Task runners for the Code node in public beta", "user_question": "What is the new Task runner system for the Code node in n8n version 1.71.0?", "concise_answer": "The new Task runner system for the Code node in n8n version 1.71.0 moves JavaScript code execution to a separate process, enhancing workflow execution speed and providing better isolation.", "structured_data": {"key_parameters": [{"name": "Task runner system", "description": "A system that executes JavaScript code in a separate process for improved performance and isolation.", "example": null}], "code_block": null}, "keywords": ["Task runner", "Code node", "performance", "n8n 1.71.0"]}
{"content_type": "General Concept", "section_title": "Task runner modes", "user_question": "What are the different modes available for task runners in n8n?", "concise_answer": "n8n offers two modes for task runners: Internal mode, which is the default and automatically manages task runners as child processes, and External mode, which is suitable for advanced hosting scenarios requiring maximum isolation and security.", "structured_data": {"key_parameters": [{"name": "Internal mode", "description": "Automatically manages task runners as child processes, ideal for getting started.", "example": null}, {"name": "External mode", "description": "Suitable for advanced hosting scenarios requiring maximum isolation and security.", "example": null}], "code_block": null}, "keywords": ["task runner", "internal mode", "external mode", "n8n", "execution"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What updates have been made to the AI Transform and Code nodes in n8n?", "concise_answer": "The AI Transform node has an improved prompt for code generation to transform data. The Code node now includes a warning if pairedItem is absent or could not be auto-mapped.", "structured_data": {"key_parameters": [{"name": "AI Transform node", "description": "Improved prompt for code generation to transform data.", "example": null}, {"name": "Code node", "description": "Added a warning if pairedItem is absent or could not be auto-mapped.", "example": null}], "code_block": null}, "keywords": ["AI Transform node", "Code node", "updates", "n8n", "prompt improvement"]}
{"content_type": "Configuration", "section_title": "Task runner configuration", "user_question": "How can I enable task runners in n8n?", "concise_answer": "Task runners in n8n can be enabled using environment variables. This feature is currently opt-in and will become the default execution method for Code nodes once stable.", "structured_data": {"key_parameters": [{"name": "Enable task runners", "description": "Use environment variables to enable task runners.", "example": null}], "code_block": null}, "keywords": ["task runners", "enable", "environment variables", "n8n", "configuration"]}
{"content_type": "General Concept", "section_title": "New canvas in beta", "user_question": "What are the features of the new canvas in n8n?", "concise_answer": "The new canvas in n8n, now the default setting for all users, offers significant performance improvements and includes a handy minimap. It is still in beta, allowing users to revert to the previous version if needed.", "structured_data": {"key_parameters": [{"name": "New canvas", "description": "Default setting with performance improvements and a minimap.", "example": null}], "code_block": null}, "keywords": ["new canvas", "beta", "performance", "minimap", "n8n"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new credential supports have been added to n8n nodes?", "concise_answer": "n8n has added credential support for Zabbix to the HTTP request node and new OAuth2 credentials for Microsoft SharePoint. Additionally, the Slack node now uses markdown for the approval message in the Send and Wait for Approval operation.", "structured_data": {"key_parameters": [{"name": "Zabbix credential support", "description": "Added to the HTTP request node.", "example": null}, {"name": "OAuth2 credentials", "description": "New credentials for Microsoft SharePoint.", "example": null}, {"name": "Slack node markdown", "description": "Uses markdown for the approval message in the Send and Wait for Approval operation.", "example": null}], "code_block": null}, "keywords": ["Zabbix", "OAuth2", "Microsoft SharePoint", "Slack node", "credentials"]}
{"content_type": "General Concept", "section_title": "New AI agent canvas chat", "user_question": "What improvements have been made to the AI agent canvas chat in n8n version 1.68.0?", "concise_answer": "In n8n version 1.68.0, the AI agent canvas chat has been revamped to provide a more organized view. Users can now see the canvas, chat, and logs simultaneously when testing workflows, instead of using a modal that hides the nodes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI agent", "canvas chat", "workflow testing", "n8n 1.68.0", "chat improvements"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new support was added to the Anthropic Chat Model Node in n8n version 1.67.0?", "concise_answer": "In n8n version 1.67.0, the Anthropic Chat Model Node was updated to include support for Haiku 3.5.", "structured_data": {"key_parameters": [{"name": "Anthropic Chat Model Node", "description": "A node that supports various chat models, now including Haiku 3.5.", "example": "Haiku 3.5"}], "code_block": null}, "keywords": ["Anthropic Chat Model", "Haiku 3.5", "node update", "n8n 1.67.0"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new option was added to the Convert to File node in n8n version 1.67.0?", "concise_answer": "In n8n version 1.67.0, a delimiter option was added to the Convert to File node for writing to CSV files.", "structured_data": {"key_parameters": [{"name": "delimiter option", "description": "An option to specify a delimiter when writing to CSV files.", "example": ","}], "code_block": null}, "keywords": ["Convert to File", "delimiter option", "CSV", "node update", "n8n 1.67.0"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new feature was added to the Gmail Trigger node in n8n version 1.67.0?", "concise_answer": "In n8n version 1.67.0, the Gmail Trigger node was updated to include an option to filter for draft messages.", "structured_data": {"key_parameters": [{"name": "filter for draft messages", "description": "An option to filter Gmail messages to only include drafts.", "example": "true"}], "code_block": null}, "keywords": ["Gmail Trigger", "draft messages", "filter option", "node update", "n8n 1.67.0"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What credential support was added to the Rapid7 InsightVM node in n8n version 1.67.0?", "concise_answer": "In n8n version 1.67.0, credential support was added to the Rapid7 InsightVM node.", "structured_data": {"key_parameters": [{"name": "credential support", "description": "Allows the use of credentials for authentication in the Rapid7 InsightVM node.", "example": null}], "code_block": null}, "keywords": ["Rapid7 InsightVM", "credential support", "node update", "n8n 1.67.0"]}
{"content_type": "Configuration", "section_title": "Breaking change", "user_question": "What breaking change was introduced in n8n version 1.65.0 regarding queue polling?", "concise_answer": "In n8n version 1.65.0, the queue polling via the environment variable QUEUE_RECOVERY_INTERVAL was removed. Users who have set this variable should remove it as it no longer has any effect.", "structured_data": {"key_parameters": [{"name": "QUEUE_RECOVERY_INTERVAL", "description": "An environment variable previously used for queue polling, now removed.", "example": null}], "code_block": null}, "keywords": ["breaking change", "queue polling", "QUEUE_RECOVERY_INTERVAL", "n8n 1.65.0"]}
{"content_type": "Node Reference", "section_title": "New node: n8n Form", "user_question": "What is the new n8n Form node introduced in version 1.65.0?", "concise_answer": "The new n8n Form node introduced in version 1.65.0 allows users to create user-facing forms with multiple pages. It supports adding other nodes with custom logic to process user input, setting default selections with query parameters, defining the form with a JSON array of objects, and showing a completion screen with a redirect option.", "structured_data": {"key_parameters": [{"name": "n8n Form node", "description": "A node to create user-facing forms with multiple pages and custom logic.", "example": null}, {"name": "default selections", "description": "Allows setting default selections using query parameters.", "example": "param=value"}, {"name": "JSON array of objects", "description": "Defines the form structure.", "example": "[{\"field\": \"value\"}]"}, {"name": "completion screen", "description": "Shows a completion screen and redirects to another URL.", "example": "https://example.com"}], "code_block": null}, "keywords": ["n8n Form node", "user-facing forms", "custom logic", "n8n 1.65.0"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new nodes were introduced in the latest n8n update?", "concise_answer": "The latest n8n update introduced new nodes for Google Business Profile and Gong. The Google Business Profile nodes allow integration of reviews and posts with workflows, while the Gong node enables processing of users and calls for sales-related workflows.", "structured_data": {"key_parameters": [{"name": "Google Business Profile", "description": "Integrate Google Business Profile reviews and posts with workflows.", "example": null}, {"name": "Gong", "description": "Get users and calls to process them further in n8n, useful for sales-related workflows.", "example": null}], "code_block": null}, "keywords": ["n8n", "Google Business Profile", "Gong", "new nodes", "integration"]}
{"content_type": "Node Reference", "section_title": "Enhanced nodes", "user_question": "What enhancements were made to existing nodes in the latest n8n update?", "concise_answer": "The AI Agent node no longer requires at least one tool to be added. The GitHub node now includes workflows as a resource operation. The Structured Output Parser node has improved user-friendly error messages.", "structured_data": {"key_parameters": [{"name": "AI Agent", "description": "Removed the requirement to add at least one tool.", "example": null}, {"name": "GitHub", "description": "Added workflows as a resource operation.", "example": null}, {"name": "Structured Output Parser", "description": "Added more user-friendly error messages.", "example": null}], "code_block": null}, "keywords": ["n8n", "AI Agent", "GitHub", "Structured Output Parser", "node enhancements"]}
{"content_type": "Node Reference", "section_title": "Enhanced node: Remove Duplicates", "user_question": "What new operations were added to the Remove Duplicates node in n8n?", "concise_answer": "The Remove Duplicates node now includes two new operations: 'Remove Items Processed in Previous Executions' and 'Clear Deduplication History'. These operations help manage duplicate data across workflow runs.", "structured_data": {"key_parameters": [{"name": "Remove Items Processed in Previous Executions", "description": "Compare items in the current input to items from previous executions and remove duplicates.", "example": null}, {"name": "Clear Deduplication History", "description": "Wipe the memory of items from previous executions to only process new items.", "example": null}], "code_block": null}, "keywords": ["n8n", "Remove Duplicates", "deduplication", "workflow", "operations"]}
{"content_type": "General Concept", "section_title": "Performance and Security Improvements", "user_question": "What performance and security improvements were made in the latest n8n update?", "concise_answer": "The latest n8n update improved the handling of multi-factor authentication, hardened config file permissions, and introduced JWT for the public API for enhanced security. For performance, improvements were made in handling partial executions in loops.", "structured_data": {"key_parameters": [{"name": "Multi-factor Authentication", "description": "Improved handling for additional security.", "example": null}, {"name": "Config File Permissions", "description": "Hardened permissions for better security.", "example": null}, {"name": "JWT for Public API", "description": "Introduced JWT for enhanced security.", "example": null}, {"name": "Partial Executions in Loops", "description": "Improved handling for better performance.", "example": null}], "code_block": null}, "keywords": ["n8n", "security", "performance", "multi-factor authentication", "JWT"]}
{"content_type": "General Concept", "section_title": "Breaking change", "user_question": "What are the breaking changes in the latest n8n release?", "concise_answer": "The worker server now binds to IPv4 by default instead of IPv6. The /healthz endpoint no longer reports healthy status based on database and Redis checks; these checks are now part of /healthz/readiness.", "structured_data": {"key_parameters": [{"name": "QUEUE_HEALTH_CHECK_PORT", "description": "Set a different port for the worker server if there is a port conflict error.", "example": null}], "code_block": null}, "keywords": ["breaking change", "worker server", "IPv4", "health checks", "n8n"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What updates have been made to the OpenAI node in the latest n8n release?", "concise_answer": "The OpenAI node now includes an option to choose between the default memory connector or specify a thread ID for providing memory to the assistant.", "structured_data": {"key_parameters": [{"name": "memory connector", "description": "Option to choose between the default memory connector or specify a thread ID.", "example": null}], "code_block": null}, "keywords": ["OpenAI node", "memory connector", "thread ID", "n8n", "node update"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new operations have been added to the Gmail and Slack nodes?", "concise_answer": "Custom approval operations have been added to the Gmail and Slack nodes to include a human in the loop of a workflow.", "structured_data": {"key_parameters": [{"name": "custom approval operations", "description": "Allows a human to be included in the workflow loop.", "example": null}], "code_block": null}, "keywords": ["Gmail node", "Slack node", "custom approval", "workflow", "n8n"]}
{"content_type": "General Concept", "section_title": "Additional nodes as tools", "user_question": "What new features have been added to the Tools AI Agent node?", "concise_answer": "Additional nodes are now usable with the Tools AI Agent node, and a $fromAI() placeholder function has been added to dynamically pass information from models to connected tools.", "structured_data": {"key_parameters": [{"name": "$fromAI()", "description": "Placeholder function to dynamically pass information from models to connected tools.", "example": null}], "code_block": null}, "keywords": ["Tools AI Agent", "nodes", "placeholder function", "n8n", "AI integration"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What updates have been made to the Google BigQuery node?", "concise_answer": "The Google BigQuery node now has an option to return numeric values as integers instead of strings.", "structured_data": {"key_parameters": [{"name": "return numeric values as integers", "description": "Option to return numeric values as integers instead of strings.", "example": null}], "code_block": null}, "keywords": ["Google BigQuery", "numeric values", "integers", "node update", "n8n"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new feature has been added to the HTTP Request node?", "concise_answer": "The HTTP Request node now supports credentials for Sysdig.", "structured_data": {"key_parameters": [{"name": "Sysdig credential support", "description": "Allows the HTTP Request node to use credentials for Sysdig.", "example": null}], "code_block": null}, "keywords": ["HTTP Request node", "Sysdig", "credential support", "n8n", "node update"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What enhancements have been made to the Invoice Ninja node?", "concise_answer": "The Invoice Ninja node now includes additional query parameters for getAll requests.", "structured_data": {"key_parameters": [{"name": "additional query params", "description": "Allows more specific getAll requests in the Invoice Ninja node.", "example": null}], "code_block": null}, "keywords": ["Invoice Ninja", "query parameters", "getAll requests", "node update", "n8n"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new option is available in the Question and Answer Chain node?", "concise_answer": "The Question and Answer Chain node now allows the use of a custom prompt.", "structured_data": {"key_parameters": [{"name": "custom prompt", "description": "Option to use a custom prompt in the Question and Answer Chain node.", "example": null}], "code_block": null}, "keywords": ["Question and Answer Chain", "custom prompt", "node update", "n8n", "AI"]}
{"content_type": "Node Reference", "section_title": "n8n@1.61.0", "user_question": "What updates were made to the Brandfetch and Slack nodes in n8n version 1.61.0?", "concise_answer": "In n8n version 1.61.0, the Brandfetch node was updated to use the new API, and the Slack node was enhanced to make adding or removing the workflow link to a message easier.", "structured_data": {"key_parameters": [{"name": "Brandfetch API", "description": "The Brandfetch node now uses the updated API.", "example": null}, {"name": "Slack Workflow Link", "description": "Improved functionality for adding or removing workflow links in messages.", "example": null}], "code_block": null}, "keywords": ["Brandfetch", "Slack", "node update", "n8n 1.61.0", "API"]}
{"content_type": "Configuration", "section_title": "n8n@1.60.0", "user_question": "How can I customize the maximum file size for uploads in n8n webhooks?", "concise_answer": "To customize the maximum file size for uploads in n8n webhooks, set the environment variable N8N_FORMDATA_FILE_SIZE_MAX. The default setting is 200MiB.", "structured_data": {"key_parameters": [{"name": "N8N_FORMDATA_FILE_SIZE_MAX", "description": "Environment variable to set the maximum file size for uploads in webhooks.", "example": "200MiB"}], "code_block": null}, "keywords": ["file size", "webhooks", "environment variable", "n8n 1.60.0", "upload limit"]}
{"content_type": "General Concept", "section_title": "n8n@1.60.0", "user_question": "What are queue metrics for workers in n8n?", "concise_answer": "Queue metrics for workers in n8n allow you to expose and consume metrics from your worker instances, similar to the main instance(s). These can be configured using environment variables.", "structured_data": {"key_parameters": [{"name": "Queue Metrics", "description": "Metrics that can be exposed and consumed from worker instances.", "example": null}], "code_block": null}, "keywords": ["queue metrics", "workers", "n8n 1.60.0", "environment variables", "metrics"]}
{"content_type": "General Concept", "section_title": "n8n@1.59.0", "user_question": "What issue might occur with the Chat Trigger in n8n version 1.59.0?", "concise_answer": "In n8n version 1.59.0, using the Chat Trigger in 'Embedded Chat' mode with authentication turned on may cause connection errors if the authentication on the sending/embedded side is misconfigured.", "structured_data": {"key_parameters": [{"name": "Chat Trigger", "description": "Potential connection errors in 'Embedded Chat' mode with authentication.", "example": null}], "code_block": null}, "keywords": ["Chat Trigger", "Embedded Chat", "authentication", "n8n 1.59.0", "connection errors"]}
{"content_type": "Node Reference", "section_title": "New node: PGVector Vector Store", "user_question": "What is the PGVector Vector Store node in n8n and how can I use it?", "concise_answer": "The PGVector Vector Store node in n8n allows you to interact with PGVector tables in your PostgreSQL database. You can use this node to insert, get, and retrieve documents from a vector table, which can then be provided to a retriever connected to a chain.", "structured_data": {"key_parameters": [{"name": "PGVector Vector Store node", "description": "A node to interact with PGVector tables in PostgreSQL databases.", "example": null}], "code_block": null}, "keywords": ["PGVector", "Vector Store", "PostgreSQL", "n8n node", "database interaction"]}
{"content_type": "General Concept", "section_title": "See active collaborators on workflows", "user_question": "How can I see active collaborators on workflows in n8n?", "concise_answer": "n8n now displays collaborator avatars on the workflow canvas, allowing you to see other users who are active on the workflow. This feature helps prevent users from overriding each other's work.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["collaborators", "workflow", "n8n", "avatars", "real-time collaboration"]}
{"content_type": "Configuration", "section_title": "Improved execution queue handling", "user_question": "What improvements have been made to execution queue handling in n8n?", "concise_answer": "n8n has introduced new execution queue metrics to provide users with better visibility of the queue length. This enhancement aids in making informed decisions about horizontal scaling based on the queue status. Additionally, querying executions has been made faster.", "structured_data": {"key_parameters": [{"name": "execution queue metrics", "description": "Metrics that provide visibility into the queue length for better scaling decisions.", "example": null}], "code_block": null}, "keywords": ["execution queue", "metrics", "scaling", "n8n", "performance"]}
{"content_type": "Node Reference", "section_title": "New credentials for the HTTP Request node", "user_question": "What new credentials have been added to the HTTP Request node in n8n?", "concise_answer": "The HTTP Request node in n8n now supports credentials for Datadog, Dynatrace, Elastic Security, Filescan, Iris, and Malcore, making it easier to use existing credentials.", "structured_data": {"key_parameters": [{"name": "HTTP Request node credentials", "description": "Support for new credentials including Datadog, Dynatrace, Elastic Security, Filescan, Iris, and Malcore.", "example": null}], "code_block": null}, "keywords": ["HTTP Request", "credentials", "Datadog", "Dynatrace", "n8n"]}
{"content_type": "Configuration", "section_title": "Breaking change", "user_question": "What is the impact of the N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES environment variable in the latest release?", "concise_answer": "The N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES environment variable now also blocks access to n8n's static cache directory at ~/.cache/n8n/public. If you are using this directory for file operations, you need to update your node to use a different path.", "structured_data": {"key_parameters": [{"name": "N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES", "description": "Blocks access to n8n's static cache directory.", "example": "~/.cache/n8n/public"}], "code_block": null}, "keywords": ["environment variable", "file access", "static cache", "breaking change", "n8n"]}
{"content_type": "Node Reference", "section_title": "New node: AI Transform", "user_question": "What is the AI Transform node in n8n and what does it do?", "concise_answer": "The AI Transform node in n8n is used to generate code snippets based on your prompt. It is context-aware, understanding the workflow’s nodes and their data types. This node is available only on Cloud plans.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI Transform node", "code generation", "context-aware", "n8n", "Cloud plans"]}
{"content_type": "Node Reference", "section_title": "New node: Okta", "user_question": "What functionalities does the Okta node provide in n8n?", "concise_answer": "The Okta node in n8n allows you to automate work in Okta and integrate it with other applications. It supports a wide range of Okta features, including creating, updating, and deleting users.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Okta node", "automation", "user management", "n8n", "integration"]}
{"content_type": "General Concept", "section_title": "Override the npm registry", "user_question": "How does n8n handle npm registry overrides in the latest release?", "concise_answer": "In the latest release, n8n adds the option to override the npm registry for installing community packages. This is a paid feature and ensures that npm does not download community packages from a compromised registry by explicitly using --registry in all npm install commands.", "structured_data": {"key_parameters": [{"name": "--registry", "description": "Used in npm install commands to specify a registry.", "example": null}], "code_block": null}, "keywords": ["npm registry", "override", "community packages", "security", "n8n"]}
{"content_type": "General Concept", "section_title": "API update", "user_question": "What new operations are supported by n8n's public REST API in the latest release?", "concise_answer": "The latest release of n8n's public REST API supports additional operations such as creating, deleting, and editing roles for users, as well as creating, reading, updating, and deleting projects.", "structured_data": {"key_parameters": [{"name": "Create, delete, and edit roles", "description": "Manage user roles through the API.", "example": null}, {"name": "Create, read, update, and delete projects", "description": "Manage projects through the API.", "example": null}], "code_block": null}, "keywords": ["API update", "roles", "projects", "REST API", "n8n"]}
{"content_type": "Node Reference", "section_title": "New node: Information Extractor", "user_question": "What is the Information Extractor node in n8n and how does it work?", "concise_answer": "The Information Extractor node in n8n is designed for information extraction tasks. It utilizes the Structured Output Parser to extract information from text and outputs it in a structured JSON format, simplifying the process of handling text data.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Information Extractor", "n8n node", "Structured Output Parser"]}
{"content_type": "Node Reference", "section_title": "New node: Sentiment Analysis", "user_question": "How can I perform sentiment analysis using n8n?", "concise_answer": "You can perform sentiment analysis in n8n using the Sentiment Analysis node. This node leverages LLMs to analyze and categorize the sentiment of input text, supporting various use cases from basic positive/negative classification to more nuanced sentiment categories.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Sentiment Analysis", "n8n node", "LLMs"]}
{"content_type": "General Concept", "section_title": "Added Google Cloud Platform Secrets Manager support", "user_question": "Does n8n support Google Cloud Platform Secrets Manager?", "concise_answer": "Yes, n8n now supports Google Cloud Platform Secrets Manager as part of its external secret stores, which are available under an enterprise license. This adds to the existing support for AWS secrets, Azure Key Vault, Infisical, and HashiCorp Vault.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Google Cloud Platform", "Secrets Manager", "n8n"]}
{"content_type": "Configuration", "section_title": "API update", "user_question": "What new operations are supported by the n8n public REST API?", "concise_answer": "The n8n public REST API now supports additional operations, including creating, reading, and deleting variables, filtering workflows by project, and transferring workflows. Detailed information can be found in the API reference.", "structured_data": {"key_parameters": [{"name": "Create, read, and delete for variables", "description": "Operations to manage variables in the API.", "example": null}, {"name": "Filtering workflows by project", "description": "Allows filtering of workflows based on project association.", "example": null}, {"name": "Transferring workflows", "description": "Enables the transfer of workflows between different projects or environments.", "example": null}], "code_block": null}, "keywords": ["API update", "REST API", "n8n operations"]}
{"content_type": "Configuration", "section_title": "Breaking change", "user_question": "What changes were made to Prometheus metrics in n8n version 1.52.0?", "concise_answer": "In n8n version 1.52.0, Prometheus metrics enabled via N8N_METRICS_INCLUDE_DEFAULT_METRICS and N8N_METRICS_INCLUDE_API_ENDPOINTS were updated to include the default n8n prefix. Users with non-empty prefixes should update their metrics to match the new prefixed names.", "structured_data": {"key_parameters": [{"name": "N8N_METRICS_INCLUDE_DEFAULT_METRICS", "description": "Environment variable to include default metrics with n8n prefix.", "example": null}, {"name": "N8N_METRICS_INCLUDE_API_ENDPOINTS", "description": "Environment variable to include API endpoint metrics with n8n prefix.", "example": null}], "code_block": null}, "keywords": ["Prometheus metrics", "n8n", "Breaking change"]}
{"content_type": "Node Reference", "section_title": "New node: Text Classifier", "user_question": "What new nodes were added in n8n version 1.51.0?", "concise_answer": "In n8n version 1.51.0, new nodes such as the Text Classifier, Postgres Chat Memory, and Google Vertex Chat Model were added.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Text Classifier", "Postgres Chat Memory", "Google Vertex Chat Model", "new nodes"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "Which nodes were enhanced in n8n version 1.50.0?", "concise_answer": "In n8n version 1.50.0, the following nodes were enhanced: Chat Trigger, Google Cloud Firestore, Qdrant Vector Store, Splunk, and Telegram.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "node enhancements", "Chat Trigger", "Google Cloud Firestore", "Qdrant Vector Store"]}
{"content_type": "General Concept", "section_title": "Beta Feature Removal", "user_question": "What beta feature was removed in n8n version 1.50.0?", "concise_answer": "The Ask AI beta feature for the HTTP Request node was removed in n8n version 1.50.0.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "beta feature", "Ask AI", "HTTP Request node", "removal"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "What new node was added in n8n version 1.49.0?", "concise_answer": "In n8n version 1.49.0, a new node called Vector Store Tool for the AI Agent was added.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "new node", "Vector Store Tool", "AI Agent", "version 1.49.0"]}
{"content_type": "Node Reference", "section_title": "Node updates", "user_question": "Which nodes were enhanced in n8n version 1.49.0?", "concise_answer": "In n8n version 1.49.0, the following nodes were enhanced: Zep Cloud Memory, Copper, Embeddings Cohere, GitHub, Merge, and Zammad.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "node enhancements", "Zep Cloud Memory", "Copper", "Embeddings Cohere"]}
{"content_type": "General Concept", "section_title": "n8n@1.48.0", "user_question": "What are the key updates in n8n version 1.48.0?", "concise_answer": "n8n version 1.48.0, released on June 27, 2024, includes bug fixes and feature enhancements.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.48.0", "release", "bug fixes", "feature enhancements"]}
{"content_type": "General Concept", "section_title": "n8n@1.47.1", "user_question": "What was the focus of the n8n version 1.47.1 release?", "concise_answer": "The n8n version 1.47.1, released on June 26, 2024, was primarily a bug fix release.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.47.1", "release", "bug fix"]}
{"content_type": "General Concept", "section_title": "n8n@1.47.0", "user_question": "What are the major changes in n8n version 1.47.0?", "concise_answer": "n8n version 1.47.0, released on June 20, 2024, includes bug fixes, feature enhancements, a new node, node enhancements, and performance improvements. It also introduces a breaking change in the behavior of the $(...).last(), $(...).first(), and $(...).all() functions.", "structured_data": {"key_parameters": [{"name": "Breaking change", "description": "Calling $(...).last(), $(...).first(), or $(...).all() without arguments now returns the last, first, or all items of the output connecting two nodes, instead of the first output of that node.", "example": null}], "code_block": null}, "keywords": ["n8n", "version 1.47.0", "release", "breaking change", "new node"]}
{"content_type": "Node Reference", "section_title": "New node: HTTP request tool", "user_question": "What is the new HTTP request tool in n8n version 1.47.0?", "concise_answer": "The new HTTP request tool added in n8n version 1.47.0 allows users to collect information from a website or API. It can be used with an AI agent as a tool.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "HTTP request tool", "version 1.47.0", "new node"]}
{"content_type": "General Concept", "section_title": "n8n@1.46.0", "user_question": "What updates were included in n8n version 1.46.0?", "concise_answer": "n8n version 1.46.0, released on June 12, 2024, includes feature enhancements, node enhancements, and bug fixes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.46.0", "release", "feature enhancements", "bug fixes"]}
{"content_type": "General Concept", "section_title": "n8n@1.45.1", "user_question": "What was the purpose of the n8n version 1.45.1 release?", "concise_answer": "The n8n version 1.45.1, released on June 12, 2024, was a bug fix release.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.45.1", "release", "bug fix"]}
{"content_type": "General Concept", "section_title": "n8n@1.45.0", "user_question": "What are the new features in n8n version 1.45.0?", "concise_answer": "n8n version 1.45.0, released on June 6, 2024, includes new features, node enhancements, and bug fixes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.45.0", "release", "new features", "bug fixes"]}
{"content_type": "General Concept", "section_title": "n8n@1.44.2", "user_question": "What was addressed in the n8n version 1.44.2 release?", "concise_answer": "The n8n version 1.44.2, released on June 12, 2024, was a bug fix release.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.44.2", "release", "bug fix"]}
{"content_type": "General Concept", "section_title": "n8n@1.44.1", "user_question": "What was the focus of the n8n version 1.44.1 release?", "concise_answer": "The n8n version 1.44.1, released on June 3, 2024, was a bug fix release.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.44.1", "release", "bug fix"]}
{"content_type": "General Concept", "section_title": "n8n@1.44.0", "user_question": "What updates were included in n8n version 1.44.0?", "concise_answer": "n8n version 1.44.0, released on May 30, 2024, includes new features, node enhancements, and bug fixes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.44.0", "release", "new features", "bug fixes"]}
{"content_type": "General Concept", "section_title": "n8n@1.43.1", "user_question": "What was the purpose of the n8n version 1.43.1 release?", "concise_answer": "The n8n version 1.43.1, released on May 28, 2024, was a bug fix release.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "version 1.43.1", "release", "bug fix"]}
{"content_type": "General Concept", "section_title": "Backup recommended", "user_question": "Is it necessary to back up my data before updating to n8n version 1.43.0?", "concise_answer": "Yes, it is recommended to back up your data before updating to n8n version 1.43.0, as this update includes significant changes such as database migrations.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["backup", "update", "database migrations", "n8n 1.43.0"]}
{"content_type": "General Concept", "section_title": "Credential sharing required for manual executions", "user_question": "What changes have been made to credential sharing for manual executions in n8n version 1.43.0?", "concise_answer": "In n8n version 1.43.0, manual workflow executions now require the same permissions checks as production executions. This means you cannot manually execute a workflow if you don't have access to the credentials, unlike before where owners and admins could execute without shared credentials.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["credential sharing", "manual execution", "permissions", "n8n 1.43.0"]}
{"content_type": "Node Reference", "section_title": "New node: Slack Trigger", "user_question": "What new node has been added in n8n version 1.43.0?", "concise_answer": "The Slack Trigger node has been added in n8n version 1.43.0, allowing workflows to be triggered by events in Slack.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Slack Trigger", "new node", "n8n 1.43.0", "integration"]}
{"content_type": "General Concept", "section_title": "New feature: Projects", "user_question": "What is the new 'Projects' feature in n8n version 1.43.0?", "concise_answer": "The 'Projects' feature allows you to give your team access to collections of workflows and credentials, enhancing security by limiting access to relevant team members. The number of projects and role types available depends on your plan.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Projects", "roles", "team access", "n8n 1.43.0"]}
{"content_type": "How-To Guide", "section_title": "Rolling back to a previous version", "user_question": "How can I roll back to a previous version of n8n after updating?", "concise_answer": "To roll back to a previous version of n8n after updating, self-hosted users should delete any RBAC projects created and revert database migrations using 'n8n db:revert'. Cloud users should contact help@n8n.io for assistance.", "structured_data": {"key_parameters": [{"name": "RBAC projects", "description": "Delete any RBAC projects created during the update.", "example": null}, {"name": "Database migrations", "description": "Revert the database migrations using the command.", "example": "n8n db:revert"}], "code_block": null}, "keywords": ["rollback", "previous version", "n8n", "database migrations"]}
{"content_type": "Node Reference", "section_title": "New feature: Tools Agent", "user_question": "What is the new Tools Agent feature in n8n version 1.42.0?", "concise_answer": "The Tools Agent is a new option added to the Agent node in n8n version 1.42.0. It enhances the ability to work with tools and ensures a standard output format, becoming the recommended default agent.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Tools Agent", "Agent node", "n8n 1.42.0", "standard output"]}
{"content_type": "Configuration", "section_title": "Breaking change", "user_question": "What is the breaking change in n8n version 1.40.0 regarding Postgres database?", "concise_answer": "In n8n version 1.40.0, the default value for the DB_POSTGRESDB_USER environment variable was changed from 'root' to 'postgres'. This is a breaking change for instances using a Postgres database.", "structured_data": {"key_parameters": [{"name": "DB_POSTGRESDB_USER", "description": "Environment variable for the Postgres database user.", "example": "postgres"}], "code_block": null}, "keywords": ["breaking change", "Postgres", "DB_POSTGRESDB_USER", "n8n 1.40.0", "configuration"]}
{"content_type": "How-To Guide", "section_title": "New feature: Ask AI in the HTTP node", "user_question": "How can I use the Ask AI feature in the HTTP Request node in n8n?", "concise_answer": "To use the Ask AI feature in the HTTP Request node, select 'Ask AI', then enter the 'Service' and 'Request' you want to use. For example, to use the NASA API to get their picture of the day, enter 'NASA' in 'Service' and 'get picture of the day' in 'Request'. Check and adjust the parameters as needed.", "structured_data": {"key_parameters": [{"name": "Service", "description": "The service you want to use for the API request.", "example": "NASA"}, {"name": "Request", "description": "The specific request you want to make to the service.", "example": "get picture of the day"}], "code_block": null}, "keywords": ["Ask AI", "HTTP Request node", "n8n", "API request", "NASA API"]}
{"content_type": "Node Reference", "section_title": "New node: Groq Chat Model", "user_question": "What is the new Groq Chat Model node in n8n?", "concise_answer": "The Groq Chat Model node is a new addition in n8n, allowing integration with the Groq Chat Model for enhanced chat functionalities.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Groq Chat Model", "n8n", "new node", "chat", "integration"]}
{"content_type": "Node Reference", "section_title": "New node: WhatsApp Trigger", "user_question": "What is the WhatsApp Trigger node in n8n?", "concise_answer": "The WhatsApp Trigger node is a new feature in n8n that allows users to trigger workflows based on WhatsApp messages.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["WhatsApp Trigger", "n8n", "new node", "trigger", "WhatsApp"]}
{"content_type": "Node Reference", "section_title": "Node enhancement: Multiple methods, one Webhook node", "user_question": "How has the Webhook Trigger node been enhanced in n8n?", "concise_answer": "The Webhook Trigger node in n8n has been enhanced to handle calls to multiple HTTP methods, allowing for more flexible workflow triggers.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Webhook Trigger", "n8n", "node enhancement", "HTTP methods", "workflow"]}
{"content_type": "Node Reference", "section_title": "New node: Google Gemini Chat Model", "user_question": "What new nodes were added in n8n version 1.38.0?", "concise_answer": "In n8n version 1.38.0, the Google Gemini Chat Model sub-node was added.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Google Gemini", "Chat Model", "new node", "version 1.38.0"]}
{"content_type": "Node Reference", "section_title": "New node: Embeddings Google Gemini", "user_question": "What new nodes were introduced in n8n version 1.38.0?", "concise_answer": "In n8n version 1.38.0, the Google Gemini Embeddings sub-node was introduced.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Google Gemini", "Embeddings", "new node", "version 1.38.0"]}
{"content_type": "General Concept", "section_title": "n8n@1.37.1", "user_question": "What breaking change was introduced in n8n version 1.37.1?", "concise_answer": "In n8n version 1.37.1, a breaking change was introduced by removing the --file flag for the execute CLI command. Users need to update scripts to import the workflow first and then execute it using the --id flag.", "structured_data": {"key_parameters": [{"name": "--file flag", "description": "Previously used in the execute CLI command, now removed.", "example": null}, {"name": "--id flag", "description": "New flag to use after importing the workflow for execution.", "example": null}], "code_block": null}, "keywords": ["n8n", "breaking change", "CLI", "execute command", "version 1.37.1"]}
{"content_type": "Node Reference", "section_title": "New node: JWT", "user_question": "What new node was added in n8n version 1.37.0?", "concise_answer": "In n8n version 1.37.0, the JWT core node was added.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "JWT", "new node", "version 1.37.0"]}
{"content_type": "Node Reference", "section_title": "New node: Salesforce Trigger node", "user_question": "What new nodes were introduced in n8n version 1.36.0?", "concise_answer": "In n8n version 1.36.0, the Salesforce Trigger node was introduced.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Salesforce Trigger", "new node", "version 1.36.0"]}
{"content_type": "Node Reference", "section_title": "New node: Twilio Trigger node", "user_question": "What new nodes were introduced in n8n version 1.36.0?", "concise_answer": "In n8n version 1.36.0, the Twilio Trigger node was introduced.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Twilio Trigger", "new node", "version 1.36.0"]}
{"content_type": "Node Reference", "section_title": "New node: Microsoft OneDrive Trigger node", "user_question": "What new node was introduced in n8n version 1.34.0?", "concise_answer": "The Microsoft OneDrive Trigger node was introduced in n8n version 1.34.0. It allows workflows to be triggered on file and folder creation and update events.", "structured_data": {"key_parameters": [{"name": "Microsoft OneDrive Trigger node", "description": "Triggers workflows on file and folder creation and update events.", "example": null}], "code_block": null}, "keywords": ["Microsoft OneDrive", "Trigger node", "n8n 1.34.0"]}
{"content_type": "General Concept", "section_title": "New data transformation functions", "user_question": "What new data transformation functions were added in n8n version 1.34.0?", "concise_answer": "n8n version 1.34.0 introduced new data transformation functions for various data types, including String, Number, Object, Array, Date & DateTime, and Boolean.", "structured_data": {"key_parameters": [{"name": "String", "description": "Functions for string manipulation.", "example": "toDateTime(), parseJson(), extractUrlPath(), toBoolean(), base64Encode(), base64Decode()"}, {"name": "Number", "description": "Functions for number manipulation.", "example": "toDateTime(), toBoolean()"}, {"name": "Object", "description": "Functions for object manipulation.", "example": "toJsonString()"}, {"name": "Array", "description": "Functions for array manipulation.", "example": "toJsonString()"}, {"name": "Date & DateTime", "description": "Functions for date and datetime manipulation.", "example": "toDateTime(), toInt()"}, {"name": "Boolean", "description": "Functions for boolean manipulation.", "example": "toInt()"}], "code_block": "String: toDateTime(), parseJson(), extractUrlPath(), toBoolean(), base64Encode(), base64Decode()\nNumber: toDateTime(), toBoolean()\nObject: toJsonString()\nArray: toJsonString()\nDate & DateTime: toDateTime(), toInt()\nBoolean: toInt()"}, "keywords": ["data transformation", "functions", "n8n 1.34.0"]}
{"content_type": "Node Reference", "section_title": "Support for Claude 3", "user_question": "What new support was added to the Anthropic Chat Model node in n8n version 1.33.0?", "concise_answer": "Support for Claude 3 was added to the Anthropic Chat Model node in n8n version 1.33.0.", "structured_data": {"key_parameters": [{"name": "Claude 3", "description": "A new support feature added to the Anthropic Chat Model node.", "example": null}], "code_block": null}, "keywords": ["Claude 3", "Anthropic Chat Model", "n8n 1.33.0"]}
{"content_type": "Configuration", "section_title": "Breaking changes", "user_question": "What breaking change was introduced in n8n version 1.31.1?", "concise_answer": "In n8n version 1.31.1, a breaking change was introduced where HTTP connections to the editor will fail on domains other than localhost.", "structured_data": {"key_parameters": [{"name": "HTTP connections", "description": "Connections to the editor will fail on non-localhost domains.", "example": null}], "code_block": null}, "keywords": ["breaking change", "HTTP connections", "n8n 1.31.1"]}
{"content_type": "Node Reference", "section_title": "New nodes: Microsoft Outlook trigger and Ollama embeddings", "user_question": "What new nodes were introduced in n8n version 1.31.0?", "concise_answer": "In n8n version 1.31.0, two new nodes were introduced: the Microsoft Outlook Trigger and Ollama Embeddings.", "structured_data": {"key_parameters": [{"name": "Microsoft Outlook Trigger", "description": "A node to trigger workflows based on events in Microsoft Outlook.", "example": null}, {"name": "Ollama Embeddings", "description": "A node to work with Ollama embeddings for advanced data processing.", "example": null}], "code_block": null}, "keywords": ["n8n", "Microsoft Outlook Trigger", "Ollama Embeddings", "new nodes", "version 1.31.0"]}
{"content_type": "Node Reference", "section_title": "OpenAI node overhaul", "user_question": "What changes were made to the OpenAI node in n8n version 1.29.0?", "concise_answer": "In n8n version 1.29.0, the OpenAI node was overhauled to include more operations, such as support for working with assistants.", "structured_data": {"key_parameters": [{"name": "OpenAI node", "description": "A node that allows interaction with OpenAI's API, now with enhanced operations.", "example": null}], "code_block": null}, "keywords": ["n8n", "OpenAI node", "overhaul", "version 1.29.0", "assistants"]}
{"content_type": "Node Reference", "section_title": "New nodes: Azure OpenAI chat model and embeddings", "user_question": "What new Azure OpenAI nodes were added in n8n version 1.28.0?", "concise_answer": "In n8n version 1.28.0, two new nodes were added for Azure OpenAI: the Embeddings Azure OpenAI node and the Azure OpenAI Chat Model node.", "structured_data": {"key_parameters": [{"name": "Embeddings Azure OpenAI", "description": "A node to work with Azure OpenAI embeddings for AI workflows.", "example": null}, {"name": "Azure OpenAI Chat Model", "description": "A node to interact with Azure OpenAI's chat model for advanced AI workflows.", "example": null}], "code_block": null}, "keywords": ["n8n", "Azure OpenAI", "Embeddings", "Chat Model", "version 1.28.0"]}
{"content_type": "Configuration", "section_title": "n8n@1.27.0", "user_question": "What breaking changes are introduced in n8n version 1.27.0?", "concise_answer": "In n8n version 1.27.0, the own mode for self-hosted n8n has been removed. Users must now use EXECUTIONS_MODE and set it to either 'regular' or 'queue'.", "structured_data": {"key_parameters": [{"name": "EXECUTIONS_MODE", "description": "Determines the mode of execution for n8n. Must be set to either 'regular' or 'queue'.", "example": "queue"}], "code_block": null}, "keywords": ["n8n", "breaking change", "EXECUTIONS_MODE", "self-hosted", "configuration"]}
{"content_type": "Node Reference", "section_title": "n8n@1.25.0", "user_question": "What is the new node introduced in n8n version 1.25.0?", "concise_answer": "The new node introduced in n8n version 1.25.0 is the Chat Memory Manager. It replaces the Chat Messages Retriever node and manages chat message memories within AI workflows.", "structured_data": {"key_parameters": [{"name": "Chat Memory Manager", "description": "Manages chat message memories within AI workflows, replacing the Chat Messages Retriever node.", "example": null}], "code_block": null}, "keywords": ["n8n", "Chat Memory Manager", "new node", "AI workflows", "chat messages"]}
{"content_type": "Node Reference", "section_title": "n8n@1.24.0", "user_question": "What new nodes are introduced in n8n version 1.24.0 for AI support?", "concise_answer": "n8n version 1.24.0 introduces the Chat Trigger node, Mistral Cloud Chat Model node, and Embeddings Mistral Cloud node to support advanced AI functionalities.", "structured_data": {"key_parameters": [{"name": "Chat Trigger", "description": "Provides a chat interface that can be made publicly available with customization and authentication options.", "example": null}, {"name": "Mistral Cloud Chat Model", "description": "Supports Mistral AI by providing a cloud chat model.", "example": null}, {"name": "Embeddings Mistral Cloud", "description": "Supports Mistral AI by providing embeddings functionality.", "example": null}], "code_block": null}, "keywords": ["n8n", "AI", "Chat Trigger", "Mistral AI", "new nodes"]}
{"content_type": "Node Reference", "section_title": "New nodes and improved experience for working with files", "user_question": "What are the new nodes introduced in n8n for handling binary data files?", "concise_answer": "n8n has introduced three new nodes for handling binary data files: 'Read/Write Files from Disk', 'Convert to File', and 'Extract From File'. These nodes are designed to read and write files from/to the machine, convert input data to a file, and extract data from a binary format to JSON, respectively.", "structured_data": {"key_parameters": [{"name": "Read/Write Files from Disk", "description": "Node to read and write files from/to the machine where n8n is running.", "example": null}, {"name": "Convert to File", "description": "Node to take input data and output it as a file.", "example": null}, {"name": "Extract From File", "description": "Node to get data from a binary format and convert it to JSON.", "example": null}], "code_block": null}, "keywords": ["binary data", "file handling", "n8n nodes", "Read/Write Files", "Convert to File"]}
{"content_type": "Node Reference", "section_title": "New node: Qdrant vector store", "user_question": "What is the new Qdrant vector store node in n8n?", "concise_answer": "The Qdrant vector store node is a new addition to n8n that supports integration with Qdrant, a vector database. This node allows users to store and manage vector data efficiently.", "structured_data": {"key_parameters": [{"name": "Qdrant vector store", "description": "Node to integrate with Qdrant, a vector database for storing and managing vector data.", "example": null}], "code_block": null}, "keywords": ["Qdrant", "vector store", "n8n node", "database integration", "vector data"]}
{"content_type": "General Concept", "section_title": "New user role: Admin", "user_question": "What is the new admin role introduced in n8n version 1.21.0?", "concise_answer": "The new admin role introduced in n8n version 1.21.0 is available on pro and enterprise plans. Admins have similar permissions to instance owners, allowing them to manage workflows and credentials.", "structured_data": {"key_parameters": [{"name": "Role", "description": "The type of user account with specific permissions.", "example": "Admin"}, {"name": "Permissions", "description": "The level of access and control over the n8n instance.", "example": "Similar to instance owners"}], "code_block": null}, "keywords": ["admin role", "user permissions", "n8n 1.21.0"]}
{"content_type": "Node Reference", "section_title": "New data transformation nodes", "user_question": "What new data transformation nodes were introduced in n8n version 1.21.0?", "concise_answer": "n8n version 1.21.0 introduced several new data transformation nodes, including Aggregate, Limit, Remove Duplicates, Sort, Split Out, and Summarize. These nodes replace the Item Lists node and offer various data manipulation capabilities.", "structured_data": {"key_parameters": [{"name": "Aggregate", "description": "Groups separate items into individual items.", "example": null}, {"name": "Limit", "description": "Removes items beyond a defined maximum number.", "example": null}, {"name": "Remove Duplicates", "description": "Identifies and deletes identical items across fields.", "example": null}, {"name": "Sort", "description": "Organizes lists in a desired order or randomly.", "example": null}, {"name": "Split Out", "description": "Separates a single data item into multiple items.", "example": null}, {"name": "Summarize", "description": "Aggregates items similar to Excel pivot tables.", "example": null}], "code_block": null}, "keywords": ["data transformation", "n8n nodes", "n8n 1.21.0"]}
{"content_type": "General Concept", "section_title": "Increased sharing permissions for owners and admins", "user_question": "What are the new sharing permissions for owners and admins in n8n version 1.21.0?", "concise_answer": "In n8n version 1.21.0, instance owners and admins can now see and share all workflows and credentials. However, they cannot view sensitive credential information.", "structured_data": {"key_parameters": [{"name": "Sharing Permissions", "description": "The ability to see and share workflows and credentials.", "example": "All workflows and credentials"}, {"name": "Sensitive Information", "description": "Details that remain hidden from owners and admins.", "example": "Sensitive credential information"}], "code_block": null}, "keywords": ["sharing permissions", "n8n 1.21.0", "admin capabilities"]}
{"content_type": "General Concept", "section_title": "LangChain general availability", "user_question": "What is the LangChain feature introduced in n8n version 1.19.0?", "concise_answer": "LangChain support was added to the main n8n version in release 1.19.0. It allows users to build AI tools within n8n using new nodes and provides related learning resources.", "structured_data": {"key_parameters": [{"name": "LangChain", "description": "A feature for building AI tools in n8n.", "example": null}], "code_block": null}, "keywords": ["LangChain", "AI tools", "n8n 1.19.0"]}
{"content_type": "General Concept", "section_title": "Show avatars of users working on the same workflow", "user_question": "What collaboration feature was added in n8n version 1.19.0?", "concise_answer": "n8n version 1.19.0 introduced a feature that shows avatars of users who are working on the same workflow, enhancing collaboration by indicating who else is editing simultaneously.", "structured_data": {"key_parameters": [{"name": "Collaboration Feature", "description": "Displays avatars of users editing the same workflow.", "example": null}], "code_block": null}, "keywords": ["collaboration", "user avatars", "n8n 1.19.0"]}
{"content_type": "General Concept", "section_title": "Template creator hub", "user_question": "What is the n8n Creator hub introduced in the latest release?", "concise_answer": "The n8n Creator hub is a new feature introduced in the latest release that allows users to share templates they have built. More information can be found in the Creator hub Notion document.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Creator hub", "template sharing", "new feature"]}
{"content_type": "General Concept", "section_title": "Node input and output search filter", "user_question": "How can Cloud Pro and Enterprise users filter node input and output data in n8n?", "concise_answer": "Cloud Pro and Enterprise users can now search and filter the input and output data in nodes. Detailed information is available in the Data filtering documentation.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "data filtering", "node input", "node output", "Cloud Pro", "Enterprise"]}
{"content_type": "Node Reference", "section_title": "Discord Node Overhaul", "user_question": "What improvements were made to the Discord node in the latest n8n release?", "concise_answer": "The Discord node underwent an overhaul to improve the user interface, making it easier to configure, enhance error handling, and fix existing issues.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Discord node", "UI improvement", "error handling", "node overhaul"]}
{"content_type": "How-To Guide", "section_title": "Dark mode", "user_question": "How do I enable dark mode in n8n?", "concise_answer": "To enable dark mode in n8n, go to Settings > Personal, and under Personalisation, change the Theme to Dark theme.", "structured_data": {"key_parameters": [{"name": "Theme", "description": "The setting to change the appearance of the n8n interface.", "example": "Dark theme"}], "code_block": null}, "keywords": ["n8n", "dark mode", "theme", "settings", "personalisation"]}
{"content_type": "Node Reference", "section_title": "Optional error output for nodes", "user_question": "What is the new optional error output feature for nodes in n8n?", "concise_answer": "All nodes, except sub-nodes and trigger nodes, now have a new optional output called Error. This feature allows users to add steps to handle node errors.", "structured_data": {"key_parameters": [{"name": "Error output", "description": "An optional output for nodes to handle errors.", "example": null}], "code_block": null}, "keywords": ["n8n", "error output", "node error handling", "optional output"]}
{"content_type": "Node Reference", "section_title": "Pagination support added to HTTP Request node", "user_question": "What new feature was added to the HTTP Request node in n8n?", "concise_answer": "The HTTP Request node now supports pagination, allowing users to handle paginated data more effectively. More information and examples can be found in the node documentation.", "structured_data": {"key_parameters": [{"name": "Pagination", "description": "Support for handling paginated data in HTTP requests.", "example": null}], "code_block": null}, "keywords": ["n8n", "HTTP Request node", "pagination", "node enhancement"]}
{"content_type": "Node Reference", "section_title": "Switch node supports more outputs", "user_question": "What new feature does the Switch node have in n8n version 1.14.0?", "concise_answer": "In n8n version 1.14.0, the Switch node has been enhanced to support an unlimited number of outputs, allowing for more complex workflow branching.", "structured_data": {"key_parameters": [{"name": "outputs", "description": "The number of outputs the Switch node can handle.", "example": "unlimited"}], "code_block": null}, "keywords": ["Switch node", "outputs", "n8n 1.14.0", "workflow", "enhancement"]}
{"content_type": "Node Reference", "section_title": "RSS Feed Trigger node", "user_question": "What is the RSS Feed Trigger node introduced in n8n version 1.13.0?", "concise_answer": "The RSS Feed Trigger node, introduced in n8n version 1.13.0, is used to start a workflow when a new RSS feed item is published.", "structured_data": {"key_parameters": [{"name": "trigger", "description": "Starts a workflow when a new RSS feed item is published.", "example": null}], "code_block": null}, "keywords": ["RSS Feed Trigger", "n8n 1.13.0", "workflow", "new node", "trigger"]}
{"content_type": "Node Reference", "section_title": "Facebook Lead Ads Trigger node", "user_question": "What functionality does the Facebook Lead Ads Trigger node provide in n8n version 1.13.0?", "concise_answer": "The Facebook Lead Ads Trigger node, added in n8n version 1.13.0, triggers a workflow when a new lead is received from Facebook Lead Ads.", "structured_data": {"key_parameters": [{"name": "trigger", "description": "Initiates a workflow upon receiving a new lead from Facebook Lead Ads.", "example": null}], "code_block": null}, "keywords": ["Facebook Lead Ads Trigger", "n8n 1.13.0", "workflow", "new node", "lead"]}
{"content_type": "Node Reference", "section_title": "Form Trigger node", "user_question": "What is the purpose of the Form Trigger node introduced in n8n version 1.12.0?", "concise_answer": "The Form Trigger node, introduced in n8n version 1.12.0, starts a workflow when a user submits a form, providing a configurable form interface.", "structured_data": {"key_parameters": [{"name": "trigger", "description": "Starts a workflow based on a user submitting a form.", "example": null}], "code_block": null}, "keywords": ["Form Trigger", "n8n 1.12.0", "workflow", "new node", "form submission"]}
{"content_type": "General Concept", "section_title": "External storage for binary files", "user_question": "What new feature regarding binary files was introduced in n8n version 1.11.0?", "concise_answer": "In n8n version 1.11.0, self-hosted users can now use an external service to store binary data, enhancing data management capabilities.", "structured_data": {"key_parameters": [{"name": "external storage", "description": "Allows self-hosted users to store binary data externally.", "example": null}], "code_block": null}, "keywords": ["external storage", "binary files", "n8n 1.11.0", "self-hosted", "data management"]}
{"content_type": "Node Reference", "section_title": "Item Lists node supports binary data", "user_question": "What enhancement was made to the Item Lists node in n8n version 1.11.0?", "concise_answer": "The Item Lists node in n8n version 1.11.0 now supports splitting and concatenating binary data inputs, eliminating the need for code to split file collections.", "structured_data": {"key_parameters": [{"name": "binary data support", "description": "Allows splitting and concatenating binary data inputs.", "example": null}], "code_block": null}, "keywords": ["Item Lists node", "binary data", "n8n 1.11.0", "enhancement", "data processing"]}
{"content_type": "General Concept", "section_title": "LangChain in n8n (beta)", "user_question": "What is the LangChain feature in n8n?", "concise_answer": "The LangChain feature in n8n allows users to build AI-powered functionality within their workflows using configurable LangChain nodes. Users can select their preferred agent, LLM, memory, and other components, and integrate LangChain logic with other data sources and services.", "structured_data": {"key_parameters": [{"name": "LangChain nodes", "description": "Configurable nodes that allow building AI-powered functionality.", "example": null}, {"name": "Agent", "description": "The preferred agent to use within LangChain nodes.", "example": null}, {"name": "LLM", "description": "The preferred language model to use within LangChain nodes.", "example": null}, {"name": "Memory", "description": "The memory component to use within LangChain nodes.", "example": null}], "code_block": null}, "keywords": ["LangChain", "AI-powered", "n8n", "workflows", "nodes"]}
{"content_type": "Configuration", "section_title": "n8n@1.9.0", "user_question": "What changes were made to environment variables in n8n version 1.9.0?", "concise_answer": "In n8n version 1.9.0, the environment variables `N8N_BINARY_DATA_TTL` and `EXECUTIONS_DATA_PRUNE_TIMEOUT` were removed. These variables no longer have any effect, as n8n now cleans up binary data together with executions during pruning.", "structured_data": {"key_parameters": [{"name": "N8N_BINARY_DATA_TTL", "description": "Previously used for setting a time-to-live for binary data, now removed.", "example": null}, {"name": "EXECUTIONS_DATA_PRUNE_TIMEOUT", "description": "Previously used for setting a timeout for execution data pruning, now removed.", "example": null}], "code_block": null}, "keywords": ["environment variables", "n8n", "binary data", "pruning", "version 1.9.0"]}
{"content_type": "General Concept", "section_title": "n8n@1.9.0", "user_question": "What is the Tournament templating language in n8n?", "concise_answer": "The Tournament templating language in n8n replaces the previous RiotTmpl language used in expressions. It allows users to use arrow functions in expressions, providing more flexibility and functionality.", "structured_data": {"key_parameters": [{"name": "Tournament", "description": "The new templating language used in n8n for expressions.", "example": null}, {"name": "Arrow functions", "description": "A feature of the Tournament language that allows more flexible expressions.", "example": null}], "code_block": null}, "keywords": ["Tournament", "templating language", "n8n", "expressions", "arrow functions"]}
{"content_type": "Node Reference", "section_title": "TheHive 5", "user_question": "What new nodes and credentials are introduced in n8n version 1.6.0?", "concise_answer": "n8n version 1.6.0 introduces support for TheHive API version 5, including a new node, a trigger node, and credentials specifically for TheHive 5.", "structured_data": {"key_parameters": [{"name": "TheHive 5 node", "description": "A new node for interacting with TheHive API version 5.", "example": null}, {"name": "TheHive 5 Trigger node", "description": "A trigger node for TheHive API version 5 to initiate workflows based on specific events.", "example": null}, {"name": "TheHive 5 credentials", "description": "Credentials required to authenticate and interact with TheHive API version 5.", "example": null}], "code_block": null}, "keywords": ["TheHive 5", "n8n nodes", "API version 5", "credentials", "trigger node"]}
{"content_type": "Configuration", "section_title": "N8N_PERSISTED_BINARY_DATA_TTL removed", "user_question": "What changes were made to the N8N_PERSISTED_BINARY_DATA_TTL environment variable in n8n version 1.6.0?", "concise_answer": "In n8n version 1.6.0, the environment variable N8N_PERSISTED_BINARY_DATA_TTL was removed as it no longer has any effect. This variable was originally used to support ephemeral executions, which are no longer supported.", "structured_data": {"key_parameters": [{"name": "N8N_PERSISTED_BINARY_DATA_TTL", "description": "An environment variable that was used to support ephemeral executions.", "example": null}], "code_block": null}, "keywords": ["N8N_PERSISTED_BINARY_DATA_TTL", "environment variable", "ephemeral executions", "n8n 1.6.0", "configuration change"]}
{"content_type": "General Concept", "section_title": "External secrets storage for credentials", "user_question": "How does n8n handle external secrets storage for credentials in version 1.5.0?", "concise_answer": "In n8n version 1.5.0, enterprise-tier accounts can use external secrets vaults to manage credentials securely outside the n8n instance. Supported vaults include Infisical and HashiCorp Vault.", "structured_data": {"key_parameters": [{"name": "External secrets vaults", "description": "Secure storage solutions for managing credentials outside the n8n instance.", "example": "Infisical, HashiCorp Vault"}], "code_block": null}, "keywords": ["external secrets", "credentials", "Infisical", "HashiCorp Vault", "n8n 1.5.0"]}
{"content_type": "General Concept", "section_title": "Two-factor authentication", "user_question": "What new security feature was introduced in n8n version 1.5.0?", "concise_answer": "n8n version 1.5.0 introduced two-factor authentication (2FA) for self-hosted instances, enhancing security by requiring an additional verification step during login.", "structured_data": {"key_parameters": [{"name": "Two-factor authentication (2FA)", "description": "An additional security layer requiring a second form of verification during login.", "example": null}], "code_block": null}, "keywords": ["two-factor authentication", "2FA", "security", "n8n 1.5.0", "self-hosted"]}
{"content_type": "General Concept", "section_title": "Debug executions", "user_question": "What feature in n8n version 1.5.0 helps with debugging failed executions?", "concise_answer": "n8n version 1.5.0 allows users on a paid plan to load data from previous executions into their current workflow, aiding in debugging failed executions.", "structured_data": {"key_parameters": [{"name": "Debug executions", "description": "A feature that allows loading data from previous executions to help debug current workflows.", "example": null}], "code_block": null}, "keywords": ["debug executions", "n8n 1.5.0", "workflow", "debugging", "failed executions"]}
{"content_type": "General Concept", "section_title": "Trial feature: AI support in the Code node", "user_question": "What new AI feature was introduced in n8n version 1.3.0?", "concise_answer": "n8n version 1.3.0 introduced a trial feature that provides limited AI support for generating code in the Code node. This feature is initially available only on Cloud and will be gradually rolled out to about 20% of users.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI support", "Code node", "n8n 1.3.0", "Cloud", "trial feature"]}
{"content_type": "General Concept", "section_title": "Credential support for SecOps services", "user_question": "What credential support was added in n8n version 1.2.0?", "concise_answer": "n8n version 1.2.0 added credential support for various SecOps services, including AlienVault, Auth0 Management, Carbon Black API, Cisco Meraki API, Cisco Secure Endpoint, Cisco Umbrella API, CrowdStrike, F5 Big-IP, Fortinet FortiGate, Hybrid Analysis, Imperva WAF, Kibana, Microsoft Entra ID, Mist, Okta, OpenCTI, QRadar, Qualys, Recorded Future, Sekoia, Shuffler, Trellix ePO, VirusTotal, and Zscaler ZIA.", "structured_data": {"key_parameters": [{"name": "AlienVault", "description": "Credential support for AlienVault service.", "example": null}, {"name": "Auth0 Management", "description": "Credential support for Auth0 Management service.", "example": null}, {"name": "Carbon Black API", "description": "Credential support for Carbon Black API service.", "example": null}, {"name": "Cisco Meraki API", "description": "Credential support for Cisco Meraki API service.", "example": null}, {"name": "Cisco Secure Endpoint", "description": "Credential support for Cisco Secure Endpoint service.", "example": null}, {"name": "Cisco Umbrella API", "description": "Credential support for Cisco Umbrella API service.", "example": null}, {"name": "CrowdStrike", "description": "Credential support for CrowdStrike service.", "example": null}, {"name": "F5 Big-IP", "description": "Credential support for F5 Big-IP service.", "example": null}, {"name": "Fortinet FortiGate", "description": "Credential support for Fortinet FortiGate service.", "example": null}, {"name": "Hybrid Analysis", "description": "Credential support for Hybrid Analysis service.", "example": null}, {"name": "Imperva WAF", "description": "Credential support for Imperva WAF service.", "example": null}, {"name": "Kibana", "description": "Credential support for Kibana service.", "example": null}, {"name": "Microsoft Entra ID", "description": "Credential support for Microsoft Entra ID service.", "example": null}, {"name": "Mist", "description": "Credential support for Mist service.", "example": null}, {"name": "Okta", "description": "Credential support for Okta service.", "example": null}, {"name": "OpenCTI", "description": "Credential support for OpenCTI service.", "example": null}, {"name": "QRadar", "description": "Credential support for QRadar service.", "example": null}, {"name": "Qualys", "description": "Credential support for Qualys service.", "example": null}, {"name": "Recorded Future", "description": "Credential support for Recorded Future service.", "example": null}, {"name": "Sekoia", "description": "Credential support for Sekoia service.", "example": null}, {"name": "Shuffler", "description": "Credential support for Shuffler service.", "example": null}, {"name": "Trellix ePO", "description": "Credential support for Trellix ePO service.", "example": null}, {"name": "VirusTotal", "description": "Credential support for VirusTotal service.", "example": null}, {"name": "Zscaler ZIA", "description": "Credential support for Zscaler ZIA service.", "example": null}], "code_block": null}, "keywords": ["credential support", "SecOps services", "n8n 1.2.0", "integration", "security"]}
{"content_type": "General Concept", "section_title": "Source control and environments", "user_question": "What new features does n8n version 1.1.0 introduce for enterprise users?", "concise_answer": "n8n version 1.1.0 introduces source control and environments for enterprise users. It uses Git-based source control to support environments, allowing users to link their n8n instances to a Git repository to create multiple environments backed by Git branches.", "structured_data": {"key_parameters": [{"name": "Source Control", "description": "Git-based system to manage and track changes in n8n environments.", "example": "Git repository"}, {"name": "Environments", "description": "Multiple n8n environments can be created and managed using Git branches.", "example": "Development, Staging, Production"}], "code_block": null}, "keywords": ["n8n", "source control", "environments", "Git", "enterprise"]}
{"content_type": "General Concept", "section_title": "Highlights", "user_question": "What is the significance of n8n version 1.0.1?", "concise_answer": "n8n version 1.0.1 marks the release of n8n's version one, introducing breaking changes and the ability to use Python in the Code node, alongside JavaScript.", "structured_data": {"key_parameters": [{"name": "Python Support", "description": "Allows the use of Python in the Code node, in addition to JavaScript.", "example": "Python modules via Pyodide"}], "code_block": null}, "keywords": ["n8n", "version 1.0.1", "Python support", "Code node", "breaking changes"]}
{"content_type": "Node Reference", "section_title": "n8n@1.0.3", "user_question": "What enhancements were made in n8n version 1.0.3?", "concise_answer": "n8n version 1.0.3 includes API enhancements and adds support for sending messages to forum threads in the Telegram node.", "structured_data": {"key_parameters": [{"name": "API Enhancements", "description": "Improvements made to the existing API functionalities.", "example": null}, {"name": "Telegram Node", "description": "Added support for sending messages to forum threads.", "example": "Sending a message to a specific forum thread"}], "code_block": null}, "keywords": ["n8n", "version 1.0.3", "API enhancements", "Telegram node", "forum threads"]}
{"content_type": "General Concept", "section_title": "Sustainable Use License", "user_question": "What is the Sustainable Use License for n8n?", "concise_answer": "The Sustainable Use License is a fair-code software license created by n8n in 2022. It allows free use, modification, creation of derivative works, and redistribution with limitations on commercial use and distribution.", "structured_data": {"key_parameters": [{"name": "Internal business purposes", "description": "Use or modify the software only for internal business purposes or non-commercial/personal use.", "example": null}, {"name": "Non-commercial distribution", "description": "Distribute the software free of charge for non-commercial purposes.", "example": null}, {"name": "Licensing notices", "description": "Do not alter, remove, or obscure any licensing, copyright, or other notices of the licensor.", "example": null}], "code_block": null}, "keywords": ["Sustainable Use License", "n8n", "fair-code", "software license", "2022"]}
{"content_type": "General Concept", "section_title": "License FAQs", "user_question": "What licenses does n8n use?", "concise_answer": "n8n uses the Sustainable Use License and the n8n Enterprise License, both based on the fair-code model.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "licenses", "Sustainable Use License", "Enterprise License", "fair-code"]}
{"content_type": "General Concept", "section_title": "License FAQs", "user_question": "What source code is covered by the Sustainable Use License?", "concise_answer": "The Sustainable Use License applies to all source code in n8n's main GitHub repository, except for non-master branches and files with '.ee.' in their name, which are under the n8n Enterprise License.", "structured_data": {"key_parameters": [{"name": "Main GitHub repository", "description": "The license covers all source code in the main repository except specified exceptions.", "example": null}, {"name": "Non-master branches", "description": "Branches other than master are not covered by the Sustainable Use License.", "example": null}, {"name": ".ee. files", "description": "Files containing '.ee.' in their name are licensed under the n8n Enterprise License.", "example": null}], "code_block": null}, "keywords": ["source code", "Sustainable Use License", "GitHub", "Enterprise License", "n8n"]}
{"content_type": "General Concept", "section_title": "License FAQs", "user_question": "What is allowed under n8n's Sustainable Use License?", "concise_answer": "The license allows internal business use, non-commercial distribution, and prohibits altering licensing notices. Examples of allowed uses include syncing company data, creating n8n nodes, and providing consulting services related to n8n.", "structured_data": {"key_parameters": [{"name": "Internal business use", "description": "Allowed for syncing company data and creating n8n nodes.", "example": null}, {"name": "Consulting services", "description": "Providing consulting services related to n8n is allowed.", "example": null}], "code_block": null}, "keywords": ["allowed uses", "Sustainable Use License", "n8n", "consulting", "internal business"]}
{"content_type": "General Concept", "section_title": "License FAQs", "user_question": "Can I use n8n as a back-end for my app under the Sustainable Use License?", "concise_answer": "Yes, as long as the back-end process doesn't use users' own credentials to access their data. For example, embedding an AI chatbot using company credentials is allowed.", "structured_data": {"key_parameters": [{"name": "User credentials", "description": "Back-end processes should not use users' own credentials.", "example": null}, {"name": "Company credentials", "description": "Using company credentials for back-end processes is allowed.", "example": null}], "code_block": null}, "keywords": ["back-end", "Sustainable Use License", "n8n", "app", "credentials"]}
{"content_type": "General Concept", "section_title": "Why don't you use an open source license?", "user_question": "Why does n8n not use an open source license?", "concise_answer": "n8n aims to provide technical superpowers to everyone using a computer by making the product widely available while ensuring a sustainable business model. The decision to not use an open source license allows n8n to offer the product for free, distribute it easily, and maintain a viable business to continue improving the software.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "open source", "license", "business model", "sustainability"]}
{"content_type": "General Concept", "section_title": "Why did you create a license?", "user_question": "Why did n8n create a proprietary license?", "concise_answer": "n8n created a proprietary license to be as permissive as possible while safeguarding their business. The license is designed to be clear about permitted uses and to promote fair-code, making it easier for users to understand and comply with the terms.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "proprietary license", "fair-code", "permissive", "business"]}
{"content_type": "General Concept", "section_title": "What happens to the code I contribute to n8n in light of the Sustainable Use License?", "user_question": "What are the implications of contributing code to n8n under the Sustainable Use License?", "concise_answer": "When you contribute code to n8n on GitHub, you retain ownership and responsibility for your contributions, while granting other GitHub users rights to use the code. Contributors must sign a Contributor License Agreement, allowing n8n to change its license without additional permission and protecting contributors from liability.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "contribution", "Sustainable Use License", "GitHub", "Contributor License Agreement"]}
{"content_type": "General Concept", "section_title": "Why did you switch to the Sustainable Use License from your previous license arrangement (Apache 2.0 with Commons Clause)?", "user_question": "Why did n8n switch from Apache 2.0 with Commons Clause to the Sustainable Use License?", "concise_answer": "n8n switched from Apache 2.0 with Commons Clause to the Sustainable Use License to better protect their rights and business model. The Commons Clause was initially used to add commercial restrictions to open source licenses, but n8n opted for a more tailored approach with the Sustainable Use License.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "license switch", "Apache 2.0", "Commons Clause", "Sustainable Use License"]}
{"content_type": "General Concept", "section_title": "My company has a policy against using code that restricts commercial use – can I still use n8n?", "user_question": "Can my company use n8n if we have a policy against code that restricts commercial use?", "concise_answer": "Your company can use n8n for internal business purposes, provided it is not made available to customers for connecting accounts and building workflows. If there is uncertainty about whether a use case is considered internal, n8n provides examples and offers support via email.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "commercial use", "internal business", "policy", "license"]}
{"content_type": "General Concept", "section_title": "What if I want to use n8n for something that's not permitted by the license?", "user_question": "What should I do if I want to use n8n in a way not permitted by the license?", "concise_answer": "If you wish to use n8n in a manner not permitted by the license, you must sign a separate commercial agreement with n8n. This is encouraged for software creators who want to embed n8n within their products, under the n8n Embed program.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "license", "commercial agreement", "n8n Embed", "use case"]}
{"content_type": "General Concept", "section_title": "Sustainable Use License", "user_question": "What are the main differences between the Sustainable Use License and the previous license arrangement for n8n?", "concise_answer": "The Sustainable Use License differs from the previous Apache 2.0 with Commons Clause in two main ways: it restricts the use of the software to internal business purposes, and it removes the restriction on charging fees for consulting or support services related to the software.", "structured_data": {"key_parameters": [{"name": "Use Restriction", "description": "Restricts the use of the software to internal business purposes.", "example": null}, {"name": "Consulting and Support Services", "description": "Allows charging fees for consulting or support services related to the software.", "example": null}], "code_block": null}, "keywords": ["Sustainable Use License", "Commons Clause", "consulting services", "internal business use", "n8n licensing"]}
{"content_type": "General Concept", "section_title": "Open Source Status", "user_question": "Is n8n considered open source?", "concise_answer": "n8n is not considered open source by the Open Source Initiative (OSI) because its license includes limitations on use. However, it offers many of the same benefits as OSI-approved open source licenses.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "open source", "OSI", "Sustainable Use License", "fair-code"]}
{"content_type": "General Concept", "section_title": "Fair-code Model", "user_question": "What is the fair-code model and how does it relate to the Sustainable Use License?", "concise_answer": "The fair-code model describes software that is generally free to use, has openly available source code, can be extended by anyone, but is commercially restricted by its authors. The Sustainable Use License is an example of a fair-code license.", "structured_data": {"key_parameters": [{"name": "Free Use", "description": "Software is generally free to use and can be distributed by anybody.", "example": null}, {"name": "Source Code Availability", "description": "Source code is openly available.", "example": null}, {"name": "Extensibility", "description": "Can be extended by anybody in public and private communities.", "example": null}, {"name": "Commercial Restriction", "description": "Commercial use is restricted by its authors.", "example": null}], "code_block": null}, "keywords": ["fair-code", "Sustainable Use License", "n8n", "software model", "commercial restriction"]}
{"content_type": "How-To Guide", "section_title": "Using the Sustainable Use License", "user_question": "Can I use n8n's Sustainable Use License for my own project?", "concise_answer": "Yes, you can use n8n's Sustainable Use License for your own project. The n8n team is interested in hearing about projects using their license.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Sustainable Use License", "n8n", "project use", "licensing", "software license"]}
{"content_type": "How-To Guide", "section_title": "Video Courses", "user_question": "What video courses does n8n offer on YouTube?", "concise_answer": "n8n offers two video courses on YouTube: a Beginner course covering the basics of n8n, and an Advanced course that covers more complex workflows and enterprise features.", "structured_data": {"key_parameters": [{"name": "Beginner Course", "description": "Covers the basics of n8n, including introduction, workflows, APIs, webhooks, nodes, data handling, core concepts, useful nodes, error handling, debugging, and collaboration.", "example": null}, {"name": "Advanced Course", "description": "Covers more complex workflows, technical nodes, and enterprise features.", "example": null}], "code_block": null}, "keywords": ["n8n", "video courses", "YouTube", "Beginner course", "Advanced course"]}
{"content_type": "General Concept", "section_title": "Advanced", "user_question": "What topics are covered in the n8n Advanced course?", "concise_answer": "The n8n Advanced course covers complex workflows, technical nodes, enterprise features, and includes topics like introduction to complex data flows, advanced technical nodes, pinning and editing output data, sub-workflows, error workflows, building a full example, handling files, and enterprise features.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Advanced course", "workflows", "technical nodes", "enterprise features"]}
{"content_type": "General Concept", "section_title": "Advanced AI", "user_question": "How can I build AI functionality using n8n?", "concise_answer": "You can build AI functionality in n8n by creating chat bots, processing documents and data from other sources, and using LangChain integrations. This feature is available on Cloud and self-hosted n8n, version 1.19.4 and above.", "structured_data": {"key_parameters": [{"name": "Feature availability", "description": "This feature is available on Cloud and self-hosted n8n, in version 1.19.4 and above.", "example": null}], "code_block": null}, "keywords": ["n8n", "AI functionality", "LangChain", "chat bot", "document processing"]}
{"content_type": "How-To Guide", "section_title": "Build an AI chat agent with n8n", "user_question": "How do I build an AI chat agent using n8n?", "concise_answer": "To build an AI chat agent with n8n, follow the introductory tutorial which guides you through the process of constructing a working AI-powered chat agent. You will need n8n (cloud or self-hosted) and credentials for a chat model like OpenAI.", "structured_data": {"key_parameters": [{"name": "n8n", "description": "Recommended to use the n8n cloud service for the tutorial, with a free trial available for new users.", "example": null}, {"name": "Credentials for a chat model", "description": "The tutorial uses OpenAI, but other models like DeepSeek, Google Gemini, Groq, Azure can also be used.", "example": null}], "code_block": null}, "keywords": ["n8n", "AI chat agent", "tutorial", "OpenAI", "chat model"]}
{"content_type": "Node Reference", "section_title": "Chat trigger", "user_question": "What is the n8n Chat Trigger used for?", "concise_answer": "The n8n Chat Trigger is used to trigger a workflow based on chat interactions, allowing you to integrate chat-based events into your workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Chat Trigger", "workflow", "chat interactions", "trigger"]}
{"content_type": "Node Reference", "section_title": "Chatbot widget", "user_question": "What is the n8n chatbot widget and how is it used?", "concise_answer": "The n8n chatbot widget is a frontend tool for AI-powered chat workflows. It can be used to create interactive chat interfaces and is documented on the @n8n/chat npm page.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "chatbot widget", "AI chat", "frontend", "npm"]}
{"content_type": "General Concept", "section_title": "AI concepts in n8n", "user_question": "What are AI agents in n8n and how do they differ from LLMs?", "concise_answer": "AI agents in n8n build on Large Language Models (LLMs) by adding goal-oriented functionality. While LLMs generate text based on input, AI agents can use tools, process outputs, and make decisions to complete tasks. They are represented as nodes in n8n workflows, allowing for complex, real-world task automation.", "structured_data": {"key_parameters": [{"name": "Core Capability", "description": "The main function of the system.", "example": "Text generation for LLM, Goal-oriented task completion for AI Agent"}, {"name": "Decision-Making", "description": "Ability to make decisions based on input.", "example": "None for LLM, Yes for AI Agent"}, {"name": "Uses Tools/APIs", "description": "Capability to use external tools or APIs.", "example": "No for LLM, Yes for AI Agent"}, {"name": "Workflow Complexity", "description": "The complexity of tasks the system can handle.", "example": "Single-step for LLM, Multi-step for AI Agent"}, {"name": "Scope", "description": "The range of tasks the system can perform.", "example": "Generates language for LLM, Performs complex, real-world tasks for AI Agent"}], "code_block": null}, "keywords": ["AI agent", "LLM", "n8n", "workflow", "task automation"]}
{"content_type": "How-To Guide", "section_title": "Add a trigger node", "user_question": "How do I add a Chat Trigger node in n8n?", "concise_answer": "To add a Chat Trigger node in n8n, start by selecting 'Add first step' or press 'tab' to open the node menu. Search for 'Chat Trigger' and select it from the list to add it to the canvas. This node will generate output when an event triggers it, allowing you to start workflows with chat input.", "structured_data": {"key_parameters": [{"name": "Node Type", "description": "The type of node to add.", "example": "Chat Trigger"}, {"name": "Trigger Event", "description": "The event that causes the node to trigger.", "example": "Text input in chat"}], "code_block": null}, "keywords": ["Chat Trigger", "n8n", "workflow", "node", "trigger"]}
{"content_type": "How-To Guide", "section_title": "Add an AI Agent Node", "user_question": "How can I add an AI Agent node to my n8n workflow?", "concise_answer": "To add an AI Agent node in n8n, click on the connector of the trigger node to open the node search. Type 'AI' and select the AI Agent node. This node allows you to incorporate AI-driven steps into your workflow, using models like OpenAI Chat Model for processing prompts.", "structured_data": {"key_parameters": [{"name": "Node Type", "description": "The type of node to add.", "example": "AI Agent"}, {"name": "Model", "description": "The AI model used for processing prompts.", "example": "OpenAI Chat Model"}], "code_block": null}, "keywords": ["AI Agent", "n8n", "workflow", "node", "OpenAI"]}
{"content_type": "Configuration", "section_title": "Configure the node", "user_question": "How do I configure the AI Agent node with a chat model in n8n?", "concise_answer": "To configure the AI Agent node with a chat model in n8n, click the plus button under the Chat Model connection on the AI Agent node. Search for 'Language Models' and select the OpenAI Chat Model. Note that for basic OpenAI accounts, only the 'gpt-4o-mini' model is allowed.", "structured_data": {"key_parameters": [{"name": "Chat Model", "description": "The model used for processing chat inputs.", "example": "OpenAI Chat Model"}, {"name": "Model", "description": "Specific model allowed for basic accounts.", "example": "gpt-4o-mini"}], "code_block": null}, "keywords": ["AI Agent", "n8n", "chat model", "OpenAI", "configuration"]}
{"content_type": "General Concept", "section_title": "Which chat model?", "user_question": "What is an LLM and how does it function in n8n?", "concise_answer": "An LLM, or Large Language Model, is a component that generates text based on a given prompt. These models are created and trained through an intensive process and have varying capabilities depending on their training data.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["LLM", "Large Language Model", "text generation"]}
{"content_type": "How-To Guide", "section_title": "Add credentials (if needed)", "user_question": "How do I add new credentials for OpenAI in n8n?", "concise_answer": "To add new credentials for OpenAI in n8n, click on 'Select credential' and choose to add a new credential. You will need an API key from your OpenAI account, which is a long string. Copy this key and paste it into the API key section in n8n.", "structured_data": {"key_parameters": [{"name": "API key", "description": "A long string used to authenticate and connect to OpenAI services.", "example": "sk-1234567890abcdef"}], "code_block": null}, "keywords": ["OpenAI", "credentials", "API key", "n8n"]}
{"content_type": "General Concept", "section_title": "Keeping your credentials safe", "user_question": "Why is it important to keep credentials safe in n8n?", "concise_answer": "Credentials are private information used to authenticate and connect to apps and services. It's crucial to keep them safe to prevent unauthorized access and data breaches.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["credentials", "security", "authentication"]}
{"content_type": "How-To Guide", "section_title": "Test the node", "user_question": "How can I test a chat model node in n8n?", "concise_answer": "To test a chat model node in n8n, connect it to the Chat Trigger, open the chat window, type a message, and press enter. The response from the chat model will appear below your message, and the log window will display the inputs and outputs.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["test node", "chat model", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Changing the prompt", "user_question": "How do I change the system prompt for an AI Agent in n8n?", "concise_answer": "To change the system prompt for an AI Agent in n8n, open the AI Agent node, go to the 'Options' section, and select 'System message'. Modify the prompt to change how the chat model is primed.", "structured_data": {"key_parameters": [{"name": "System message", "description": "The default message that primes the chat model.", "example": "You are a helpful assistant"}], "code_block": null}, "keywords": ["system prompt", "AI Agent", "n8n"]}
{"content_type": "General Concept", "section_title": "Adding persistence", "user_question": "Why doesn't the AI Agent remember previous interactions in n8n?", "concise_answer": "The AI Agent in n8n does not remember previous interactions because it lacks persistence. It does not save the context of conversations, which is why it cannot recall information like a user's name.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["persistence", "AI Agent", "context"]}
{"content_type": "How-To Guide", "section_title": "Adding Memory to AI Agent", "user_question": "How can I add memory to an AI Agent node in n8n?", "concise_answer": "To add memory to an AI Agent node in n8n, click on the 'Add node' icon at the bottom of the AI Agent node labeled 'Memory'. From the panel that appears, select 'Simple Memory'. This will use the memory from the instance running n8n, which is usually sufficient for simple usage.", "structured_data": {"key_parameters": [{"name": "Memory", "description": "Allows the AI Agent to preserve context by remembering past interactions.", "example": "Simple Memory"}, {"name": "Default Interactions", "description": "The default number of interactions the memory can hold.", "example": "5"}], "code_block": null}, "keywords": ["AI Agent", "Memory", "n8n", "Simple Memory", "Context"]}
{"content_type": "How-To Guide", "section_title": "Saving the workflow", "user_question": "How do I save a workflow in n8n?", "concise_answer": "To save a workflow in n8n, click on the 'Save' button located in the top right corner of the editor window. This ensures that all your changes are preserved and you can return to the workflow later.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Save", "Workflow", "n8n", "Editor", "Changes"]}
{"content_type": "General Concept", "section_title": "Light evaluations", "user_question": "What are light evaluations in n8n?", "concise_answer": "Light evaluations in n8n allow you to test your workflow with a small set of examples to assess its performance. This involves running examples through the workflow and comparing the outputs to expected results, which helps in making improvements without setting up formal scoring metrics.", "structured_data": {"key_parameters": [{"name": "Test Dataset", "description": "A collection of examples used to test the workflow.", "example": "Google Sheets"}, {"name": "Workflow Outputs", "description": "The results produced by the workflow when run with the test dataset.", "example": null}], "code_block": null}, "keywords": ["Light Evaluations", "Testing", "Workflow", "n8n", "Performance"]}
{"content_type": "Configuration", "section_title": "How it works", "user_question": "How do I set up light evaluations in n8n?", "concise_answer": "To set up light evaluations in n8n, create a Google Sheet with your test dataset, wire it to your workflow, and run the evaluation. The outputs will be written back to the dataset for comparison with expected results.", "structured_data": {"key_parameters": [{"name": "Google Sheets Credential", "description": "Required to store the test dataset for evaluations.", "example": null}], "code_block": null}, "keywords": ["Light Evaluations", "Google Sheets", "n8n", "Dataset", "Configuration"]}
{"content_type": "How-To Guide", "section_title": "Wire the dataset up to your workflow", "user_question": "How do I wire the evaluation trigger to my workflow in n8n?", "concise_answer": "To wire the evaluation trigger to your workflow in n8n, insert an evaluation trigger to pull in your dataset. You can run it once by setting 'Max rows to process' to 1 or by clicking 'Execute node'. Connect the trigger to your workflow and reference the data it outputs.", "structured_data": {"key_parameters": [{"name": "Max rows to process", "description": "Limits the number of rows the trigger processes in one execution.", "example": "1"}], "code_block": null}, "keywords": ["n8n", "evaluation trigger", "workflow", "dataset", "execute node"]}
{"content_type": "How-To Guide", "section_title": "Write workflow outputs back to dataset", "user_question": "How can I write workflow outputs back to the dataset in n8n?", "concise_answer": "To write workflow outputs back to the dataset in n8n, insert the 'Set outputs' action of the evaluation node. Wire it to your workflow after it has produced the outputs you're evaluating, and map the workflow outputs into the correct dataset column.", "structured_data": {"key_parameters": [{"name": "Set outputs", "description": "Action to map workflow outputs back to the dataset.", "example": null}], "code_block": null}, "keywords": ["n8n", "workflow outputs", "dataset", "set outputs", "evaluation node"]}
{"content_type": "General Concept", "section_title": "Metric-based evaluations", "user_question": "What are metric-based evaluations in n8n?", "concise_answer": "Metric-based evaluations in n8n are used to measure, score, and improve the performance of AI-based workflows over time. They assign scores to test runs, which can be compared to previous runs to track performance changes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "metric-based evaluations", "performance", "AI workflows", "scoring"]}
{"content_type": "General Concept", "section_title": "What are metric-based evaluations?", "user_question": "How do metric-based evaluations work in n8n?", "concise_answer": "Metric-based evaluations in n8n involve running tests on workflows to measure performance. They use metrics to assign scores to each test run, which can be compared to previous runs. This helps in identifying performance changes and understanding the reasons behind them.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "metric-based evaluations", "test runs", "performance measurement", "metrics"]}
{"content_type": "How-To Guide", "section_title": "Set up light evaluation", "user_question": "How do I set up a light evaluation in n8n?", "concise_answer": "To set up a light evaluation in n8n, follow the setup instructions to create a dataset and connect it to your workflow. Ensure that the outputs are written back to the dataset. This setup is used in the support ticket classification workflow from the light evaluation documentation.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["light evaluation", "setup", "workflow", "dataset", "n8n"]}
{"content_type": "General Concept", "section_title": "Calculate metrics", "user_question": "What are metrics in n8n and how are they used?", "concise_answer": "Metrics in n8n are numerical values used to score the output of a workflow by comparing it with a reference output. They can be calculated using AI or code and include dimensions like correctness, categorization, and string similarity. Metrics are calculated after the workflow produces outputs and can be added as columns in the dataset for reference.", "structured_data": {"key_parameters": [{"name": "Correctness", "description": "Whether the output's meaning is consistent with a reference output.", "example": null}, {"name": "Categorization", "description": "Whether the output exactly matches the expected output.", "example": null}, {"name": "Helpfulness", "description": "Whether the answer addresses the question.", "example": null}, {"name": "String similarity", "description": "How close the output is to a reference output, measured character-by-character.", "example": null}, {"name": "Tool calling", "description": "Whether the agent called the right tool.", "example": null}, {"name": "RAG document relevance", "description": "Whether the documents retrieved are relevant to the question when working with a vector database.", "example": null}, {"name": "RAG answer groundedness", "description": "Whether the answer is 'grounded' in the documents retrieved when working with a vector database.", "example": null}], "code_block": null}, "keywords": ["metrics", "workflow", "evaluation", "n8n", "AI"]}
{"content_type": "How-To Guide", "section_title": "Write metrics back to evaluation", "user_question": "How can I write metrics back to an evaluation in n8n?", "concise_answer": "To write metrics back to an evaluation in n8n, add an evaluation node with the 'Set metrics' operation. Map your calculated metrics into this node. In workflows where metrics check for exact matches, calculations can be done in an expression within the 'Set metrics' node.", "structured_data": {"key_parameters": [{"name": "Set metrics node", "description": "Node used to map calculated metrics back to the evaluation.", "example": null}], "code_block": null}, "keywords": ["metrics", "evaluation", "set metrics", "n8n", "workflow"]}
{"content_type": "How-To Guide", "section_title": "Run evaluation and view results", "user_question": "How do I run an evaluation and view results in n8n?", "concise_answer": "To run an evaluation in n8n, switch to the Evaluations tab in your workflow and click the Run evaluation button. After the evaluation completes, it will display a summary score for each metric. You can view results for each test case by clicking on the test run row, which opens the execution in a new tab.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["evaluation", "results", "n8n", "workflow", "test case"]}
{"content_type": "General Concept", "section_title": "What are evaluations?", "user_question": "What is the purpose of evaluations in n8n?", "concise_answer": "Evaluations in n8n are used to ensure the reliability of AI workflows. They involve running a test dataset through the workflow to check performance on various inputs, including edge cases. Evaluations help in making confident changes without negatively impacting other parts of the workflow.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["evaluations", "workflow", "reliability", "n8n", "test dataset"]}
{"content_type": "General Concept", "section_title": "Evaluation", "user_question": "What is the purpose of evaluation in AI workflows?", "concise_answer": "Evaluation in AI workflows is essential for testing the workflow over a range of inputs to understand its performance on edge cases. It helps in making confident changes without causing issues elsewhere and allows for performance comparison across different models or prompts.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["evaluation", "AI workflows", "performance", "edge cases", "models"]}
{"content_type": "General Concept", "section_title": "Why is evaluation needed?", "user_question": "Why is evaluation important for AI models compared to traditional code?", "concise_answer": "Evaluation is crucial for AI models because, unlike deterministic code, AI models are black boxes. You need to measure their output by running data through them to ensure they perform reliably across various inputs, especially edge cases.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["evaluation", "AI models", "deterministic", "black box", "reliability"]}
{"content_type": "General Concept", "section_title": "Two types of evaluation", "user_question": "What are the two types of evaluation in AI workflows?", "concise_answer": "The two types of evaluation in AI workflows are light evaluation (pre-deployment) and metric-based evaluation (post-deployment). Light evaluation involves generating a few examples to iterate the workflow, while metric-based evaluation uses a larger dataset to track quality changes and ensure performance in production.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["light evaluation", "metric-based evaluation", "pre-deployment", "post-deployment", "AI workflows"]}
{"content_type": "General Concept", "section_title": "Comparison of evaluation types", "user_question": "How do light evaluation and metric-based evaluation differ?", "concise_answer": "Light evaluation is used pre-deployment with small, hand-generated datasets to improve workflow quality. Metric-based evaluation is used post-deployment with large, AI-generated datasets to measure output quality using metrics and track performance changes.", "structured_data": {"key_parameters": [{"name": "Performance improvements", "description": "The extent of performance improvements with each iteration.", "example": "Large for light evaluation, Small for metric-based evaluation"}, {"name": "Dataset size", "description": "The size of the dataset used for evaluation.", "example": "Small for light evaluation, Large for metric-based evaluation"}, {"name": "Dataset sources", "description": "The origin of the datasets used for evaluation.", "example": "Hand-generated for light evaluation, AI-generated for metric-based evaluation"}, {"name": "Actual outputs", "description": "Whether actual outputs are required for evaluation.", "example": "Required for both"}, {"name": "Expected outputs", "description": "Whether expected outputs are required for evaluation.", "example": "Optional for light evaluation, Required for metric-based evaluation"}, {"name": "Evaluation metric", "description": "Whether a metric is required for evaluation.", "example": "Optional for light evaluation, Required for metric-based evaluation"}], "code_block": null}, "keywords": ["evaluation types", "light evaluation", "metric-based evaluation", "dataset size", "performance"]}
{"content_type": "How-To Guide", "section_title": "Tips and common issues", "user_question": "How can I combine multiple triggers in an n8n workflow?", "concise_answer": "To combine multiple triggers in an n8n workflow, you need to merge the branches from each trigger. Execute the other trigger, copy its JSON output, and reshape the evaluation trigger data to match using an Edit Fields (Set) node. Change its mode to JSON, paste the data, and map in the data from the trigger.", "structured_data": {"key_parameters": [{"name": "Edit Fields (Set) node", "description": "A node used to reshape data to match another trigger's format.", "example": null}, {"name": "JSON mode", "description": "The mode to set in the Edit Fields node to handle JSON data.", "example": null}, {"name": "Expression", "description": "The field type to switch to for mapping data from the trigger.", "example": null}], "code_block": null}, "keywords": ["n8n", "workflow", "triggers", "Edit Fields node", "JSON"]}
{"content_type": "How-To Guide", "section_title": "Map in the data from the trigger", "user_question": "How do I map data from a trigger in n8n?", "concise_answer": "To map data from a trigger in n8n, drag the data from the input pane. For string values, replace the entire value including quotes and append .toJsonString() to the expression.", "structured_data": {"key_parameters": [{"name": "String Mapping", "description": "Replace the entire string value and append .toJsonString() to the expression.", "example": null}], "code_block": null}, "keywords": ["n8n", "data mapping", "trigger", "input pane", "toJsonString"]}
{"content_type": "How-To Guide", "section_title": "Merge the branches using a 'No-op' node", "user_question": "How can I merge branches in n8n using a No-op node?", "concise_answer": "To merge branches in n8n, insert a No-op node and connect both the trigger and the Set node to it. The No-op node outputs whatever input it receives, ensuring consistent data flow.", "structured_data": {"key_parameters": [{"name": "No-op Node", "description": "A node that outputs whatever input it receives, used to merge branches.", "example": null}], "code_block": null}, "keywords": ["n8n", "No-op node", "merge branches", "workflow", "data flow"]}
{"content_type": "General Concept", "section_title": "Avoiding evaluation breaking the chat", "user_question": "How can I prevent evaluation from breaking the chat in n8n?", "concise_answer": "To prevent evaluation from breaking the chat in n8n, add an extra branch from your agent. This ensures that any node attached to this branch executes last, maintaining the expected data format.", "structured_data": {"key_parameters": [{"name": "Extra Branch", "description": "An additional branch to ensure nodes execute in the correct order.", "example": null}], "code_block": null}, "keywords": ["n8n", "evaluation", "chat", "workflow", "extra branch"]}
{"content_type": "General Concept", "section_title": "Accessing tool data when calculating metrics", "user_question": "How can I access tool data when calculating metrics in n8n?", "concise_answer": "Enable the 'Return intermediate steps' option in the agent to access tool data when calculating metrics. This adds an 'intermediateSteps' output field for use in later nodes.", "structured_data": {"key_parameters": [{"name": "Return Intermediate Steps", "description": "An option that adds an 'intermediateSteps' output field for accessing tool data.", "example": null}], "code_block": null}, "keywords": ["n8n", "metrics", "tool data", "intermediate steps", "agent"]}
{"content_type": "General Concept", "section_title": "Multiple evaluations in the same workflow", "user_question": "Can I have multiple evaluations in the same n8n workflow?", "concise_answer": "You can only have one evaluation trigger per workflow in n8n. However, you can test different parts by placing them in sub-workflows and evaluating each separately.", "structured_data": {"key_parameters": [{"name": "Evaluation Trigger", "description": "Only one evaluation trigger is allowed per workflow.", "example": null}], "code_block": null}, "keywords": ["n8n", "evaluation", "workflow", "sub-workflow", "testing"]}
{"content_type": "General Concept", "section_title": "Dealing with inconsistent results", "user_question": "How do I deal with inconsistent results in n8n metrics?", "concise_answer": "To deal with inconsistent results in n8n metrics, duplicate the rows of your dataset. This allows each input to run multiple times, smoothing out variations.", "structured_data": {"key_parameters": [{"name": "Duplicate Rows", "description": "Duplicate dataset rows to smooth out variations in results.", "example": null}], "code_block": null}, "keywords": ["n8n", "metrics", "inconsistent results", "duplicate rows", "dataset"]}
{"content_type": "How-To Guide", "section_title": "Call an API to fetch data", "user_question": "How can I call an API to fetch data in n8n?", "concise_answer": "Use the HTTP Request node in n8n to call an API and load data into your AI workflow. This node allows you to configure API requests and handle responses.", "structured_data": {"key_parameters": [{"name": "HTTP Request Node", "description": "A node used to call APIs and load data into workflows.", "example": null}], "code_block": null}, "keywords": ["n8n", "API", "HTTP Request", "fetch data", "workflow"]}
{"content_type": "How-To Guide", "section_title": "Call an API to fetch data", "user_question": "How can I use n8n to fetch data from an API in my AI workflow?", "concise_answer": "To fetch data from an API using n8n, you can set up a workflow that uses the Chat Trigger for user interaction and the Call n8n Workflow Tool to execute a secondary workflow. This secondary workflow can refine the API request based on user input using AI functionalities.", "structured_data": {"key_parameters": [{"name": "Chat Trigger", "description": "Starts the workflow and responds to user chat interactions with a customizable interface.", "example": null}, {"name": "Agent", "description": "Interacts with workflow components and decides which tools to use.", "example": null}, {"name": "Call n8n Workflow Tool", "description": "Allows n8n workflows to be used as custom tools for AI to access external data.", "example": null}, {"name": "Basic LLM Chain", "description": "Reads user queries and sets parameters for API calls based on input.", "example": null}], "code_block": null}, "keywords": ["n8n", "API", "workflow", "Chat Trigger", "AI"]}
{"content_type": "How-To Guide", "section_title": "Chat with a Google Sheet using AI", "user_question": "How can I use n8n to interact with Google Sheets in my AI workflow?", "concise_answer": "To interact with Google Sheets using n8n, you can create a workflow that uses the Chat Trigger for user interaction and the Call n8n Workflow Tool to execute a secondary workflow that queries Google Sheets.", "structured_data": {"key_parameters": [{"name": "Chat Trigger", "description": "Starts the workflow and responds to user chat interactions with a customizable interface.", "example": null}, {"name": "Agent", "description": "Interacts with workflow components and decides which tools to use.", "example": null}, {"name": "Call n8n Workflow Tool", "description": "Allows n8n workflows to be used as custom tools for AI to access external data.", "example": null}], "code_block": null}, "keywords": ["n8n", "Google Sheets", "workflow", "Chat Trigger", "AI"]}
{"content_type": "How-To Guide", "section_title": "Set a human fallback for AI workflows", "user_question": "How can I set up a human fallback in my AI workflow using n8n?", "concise_answer": "To set up a human fallback in an AI workflow using n8n, create a workflow that uses the Chat Trigger for user interaction and the Call n8n Workflow Tool to handle email address checking and sending messages to Slack when the AI cannot provide an answer.", "structured_data": {"key_parameters": [{"name": "Chat Trigger", "description": "Starts the workflow and responds to user chat interactions with a customizable interface.", "example": null}, {"name": "Agent", "description": "Interacts with workflow components and decides which tools to use.", "example": null}, {"name": "Call n8n Workflow Tool", "description": "Allows n8n workflows to be used as custom tools for AI to access external data.", "example": null}], "code_block": null}, "keywords": ["n8n", "human fallback", "workflow", "Chat Trigger", "AI"]}
{"content_type": "General Concept", "section_title": "Advanced AI examples and concepts", "user_question": "What are some advanced AI concepts and examples in n8n?", "concise_answer": "The section provides explanations of important AI concepts and workflow templates that highlight those concepts. It covers common use cases and features of advanced AI in n8n, including agents, chains, tools, vector databases, and memory.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI concepts", "workflow templates", "n8n", "agents", "chains"]}
{"content_type": "General Concept", "section_title": "What's an agent in AI?", "user_question": "What is an agent in AI and how does it work in n8n?", "concise_answer": "An agent in AI is a decision-maker that uses a language model to determine actions. In n8n, agents can interact with other agents and tools, adapting to specific queries and prompts. n8n provides an Agent node that can act as different types of agents based on settings.", "structured_data": {"key_parameters": [{"name": "Agent node", "description": "A node in n8n that can act as different types of agents depending on the settings.", "example": null}], "code_block": null}, "keywords": ["AI agent", "n8n", "decision-maker", "Agent node", "language model"]}
{"content_type": "General Concept", "section_title": "What's a chain in AI?", "user_question": "What is a chain in AI and how is it different from an agent?", "concise_answer": "A chain in AI follows a predetermined sequence of calls to different AI components, unlike an agent which makes decisions using a language model. Chains are more structured, while agents are adaptable decision-makers.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI chain", "n8n", "sequence", "AI components", "decision-making"]}
{"content_type": "General Concept", "section_title": "What's a chain in AI?", "user_question": "What is a chain in AI and how does it work in n8n?", "concise_answer": "In AI, chains connect different components to form a cohesive system, setting up a sequence of calls between them. In n8n, chains include Basic LLM Chain, Question and Answer Chain, and Summarization Chain. Unlike other tools, n8n chains do not support memory, so they can't remember previous queries.", "structured_data": {"key_parameters": [{"name": "Basic LLM Chain", "description": "Interacts with a Language Model without additional components.", "example": null}, {"name": "Question and Answer Chain", "description": "Connects to a vector store using a retriever or to an n8n workflow using the Workflow Retriever node.", "example": null}, {"name": "Summarization Chain", "description": "Takes an input and returns a summary.", "example": null}], "code_block": null}, "keywords": ["AI chains", "n8n", "Basic LLM Chain", "Question and Answer Chain", "Summarization Chain"]}
{"content_type": "General Concept", "section_title": "What's memory in AI?", "user_question": "What is memory in AI and how is it implemented in n8n?", "concise_answer": "Memory in AI allows chat services to keep a history of previous messages, enabling ongoing conversations. In n8n, memory can be added using Simple Memory or various memory services like Motorhead, Redis Chat Memory, Postgres Chat Memory, Xata, and Zep. For advanced memory management, the Chat Memory Manager node is used.", "structured_data": {"key_parameters": [{"name": "Simple Memory", "description": "Stores a customizable length of chat history for the current session.", "example": null}, {"name": "Chat Memory Manager", "description": "Used for advanced AI memory management in workflows.", "example": null}], "code_block": null}, "keywords": ["AI memory", "n8n", "Simple Memory", "Chat Memory Manager", "memory services"]}
{"content_type": "General Concept", "section_title": "What's a tool in AI?", "user_question": "What are tools in AI and how are they used in n8n?", "concise_answer": "In AI, tools are addons that provide extra context or resources, acting like functions that an AI model can call. In n8n, tool sub-nodes can be connected to AI agents, including popular tools like Wikipedia and SerpAPI, as well as powerful tools like Call n8n Workflow Tool, Custom Code Tool, and HTTP Request Tool.", "structured_data": {"key_parameters": [{"name": "Call n8n Workflow Tool", "description": "Loads any n8n workflow as a tool.", "example": null}, {"name": "Custom Code Tool", "description": "Allows writing code that the agent can run.", "example": null}, {"name": "HTTP Request Tool", "description": "Makes calls to fetch a website or data from an API.", "example": null}], "code_block": null}, "keywords": ["AI tools", "n8n", "Call n8n Workflow Tool", "Custom Code Tool", "HTTP Request Tool"]}
{"content_type": "General Concept", "section_title": "What are vector databases?", "user_question": "What is a vector database and how does it work?", "concise_answer": "A vector database is a type of database that stores data as high-dimensional vectors, which are mathematical representations of features or attributes. This allows for fast and accurate similarity searches based on semantic and contextual meaning, rather than conventional database queries.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["vector database", "similarity search", "high-dimensional vectors"]}
{"content_type": "General Concept", "section_title": "A simplified example", "user_question": "How does a vector database store sentences as vectors?", "concise_answer": "In a vector database, sentences are stored as arrays of dimensions that represent their features. For example, the sentence 'n8n is a source-available automation tool that you can self-host' could be represented by the vector [0.1, 0.2, 0.3], where each number corresponds to a feature like 'automation tool' or 'source available'.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["vector representation", "sentence vectors", "feature representation"]}
{"content_type": "General Concept", "section_title": "Demonstrating the power of similarity search", "user_question": "What is an example of a similarity search using a vector database?", "concise_answer": "Qdrant provides vector search demos, such as the food discovery demo, which shows how a vector store can match pictures based on visual similarities. Users can like or dislike a dish photo, and the app recommends similar meals based on appearance.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["similarity search", "Qdrant demo", "vector store"]}
{"content_type": "General Concept", "section_title": "Embeddings, retrievers, text splitters, and document loaders", "user_question": "What tools are required for vector databases to function?", "concise_answer": "Vector databases require document loaders, text splitters, embeddings, and retrievers. Document loaders prepare data for embedding, text splitters break documents into chunks, embeddings convert data into vectors, and retrievers fetch documents from the database.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["embeddings", "retrievers", "document loaders", "text splitters"]}
{"content_type": "How-To Guide", "section_title": "Let AI specify the tool parameters", "user_question": "How can AI specify tool parameters in n8n?", "concise_answer": "In n8n, AI can specify tool parameters by using the $fromAI() function. This function allows the AI model to dynamically populate parameters based on the task context and information from other connected tools. Users can choose to let the model fill in parameters or use built-in automation.", "structured_data": {"key_parameters": [{"name": "$fromAI()", "description": "Function to dynamically populate parameters for AI app tools.", "example": null}], "code_block": null}, "keywords": ["AI parameters", "$fromAI()", "n8n automation"]}
{"content_type": "General Concept", "section_title": "Let the model fill in the parameter", "user_question": "How does the AI Agent automatically fill in parameter fields in n8n?", "concise_answer": "In n8n, each parameter field in the tool's editing dialog has a button that, when activated, allows the AI Agent to automatically fill in the expression for you. This feature overwrites any manual definitions and fills the field with a message indicating that the parameter has been defined by the model.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["AI Agent", "parameter", "automatic", "n8n", "expression"]}
{"content_type": "How-To Guide", "section_title": "Use the $fromAI() function", "user_question": "How can I use the $fromAI() function in n8n?", "concise_answer": "The $fromAI() function in n8n is used to dynamically fill in parameters for tools connected to the Tools AI agent. It is used in expressions within app nodes like Gmail, Notion, or Slack. The function takes a key parameter and optional arguments to guide the AI model in populating the right data.", "structured_data": {"key_parameters": [{"name": "key", "description": "A string representing the key or name of the argument. Must be 1-64 characters long and can contain letters, numbers, underscores, and hyphens.", "example": "email"}, {"name": "description", "description": "A string describing the argument.", "example": "The commenter's name"}, {"name": "type", "description": "A string specifying the data type. Can be string, number, boolean, or json (defaults to string).", "example": "string"}, {"name": "defaultValue", "description": "The default value to use for the argument.", "example": "Jane Doe"}], "code_block": "javascript $fromAI('email')"}, "keywords": ["$fromAI()", "dynamic parameters", "n8n", "AI", "function"]}
{"content_type": "Code Example", "section_title": "Examples", "user_question": "Can you provide examples of using the $fromAI() function in n8n?", "concise_answer": "Here are examples of using the $fromAI() function: To populate a field with a name, use $fromAI('name', 'The commenter's name', 'string', 'Jane Doe'). To populate the number of items in stock, use $fromAI('numItemsInStock', 'Number of items in stock', 'number', 5).", "structured_data": {"key_parameters": null, "code_block": "javascript $fromAI('name', 'The commenter's name', 'string', 'Jane Doe')"}, "keywords": ["$fromAI()", "examples", "n8n", "dynamic", "code"]}
{"content_type": "How-To Guide", "section_title": "Populate a Pinecone vector database from a website", "user_question": "How can I populate a Pinecone vector database using n8n?", "concise_answer": "To populate a Pinecone vector database using n8n, you can create a workflow that scrapes a website, extracts the main content, transforms it into vectors, and stores it in Pinecone. This involves using the HTTP node to fetch website data, the HTML node to extract content, and the Pinecone Vector Store node to store the vectors.", "structured_data": {"key_parameters": [{"name": "HTTP node", "description": "Fetches website data.", "example": null}, {"name": "HTML node", "description": "Extracts the main content from the page.", "example": null}, {"name": "Pinecone Vector Store node", "description": "Transforms the data into vectors and stores it in Pinecone.", "example": null}], "code_block": null}, "keywords": ["n8n", "Pinecone", "vector database", "HTTP node", "HTML node"]}
{"content_type": "General Concept", "section_title": "LangChain learning resources", "user_question": "What resources are available to learn about LangChain?", "concise_answer": "There are several resources available to learn about LangChain, including the LangChain documentation for introductions and code examples, a YouTube series by Greg Kamradt, and a Discord community for discussions. These resources cover key concepts, use cases, and provide code templates.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["LangChain", "learning resources", "documentation", "YouTube series", "Discord"]}
{"content_type": "General Concept", "section_title": "LangChain concepts in n8n", "user_question": "How do LangChain concepts map to n8n?", "concise_answer": "LangChain concepts map to n8n through specific nodes that allow integration with LangChain's features. These include Cluster nodes for LangChain features and various nodes for chains, agents, and vector stores. n8n implements LangChain's JavaScript framework.", "structured_data": {"key_parameters": [{"name": "Cluster nodes", "description": "Used for LangChain features in n8n.", "example": null}, {"name": "Basic LLM Chain", "description": "A series of LLMs linked together for enhanced functionality.", "example": null}, {"name": "Agent", "description": "Has access to multiple tools and determines which to use based on input.", "example": null}, {"name": "Pinecone Vector Store", "description": "Stores embedded data and performs vector searches.", "example": null}], "code_block": null}, "keywords": ["LangChain", "n8n", "Cluster nodes", "LLM Chain", "Agents"]}
{"content_type": "General Concept", "section_title": "Vector stores", "user_question": "What are vector stores and what types are available in n8n?", "concise_answer": "Vector stores are used to store embedded data and perform vector searches on it. In n8n, several types of vector stores are available, including Simple Vector Store, PGVector Vector Store, Pinecone Vector Store, Qdrant Vector Store, Supabase Vector Store, and Zep Vector Store.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["vector stores", "embedded data", "n8n"]}
{"content_type": "General Concept", "section_title": "Document loaders", "user_question": "What are document loaders in n8n and what types are available?", "concise_answer": "Document loaders in n8n add data to your chain as documents, which can come from a file or web service. Available document loaders include the Default Document Loader and GitHub Document Loader.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["document loaders", "n8n", "data sources"]}
{"content_type": "General Concept", "section_title": "Language models", "user_question": "What language models are available in n8n?", "concise_answer": "n8n supports several language models, which are programs that analyze datasets and are key to working with AI. Available models include Anthropic Chat Model, AWS Bedrock Chat Model, Cohere Model, Hugging Face Inference Model, Mistral Cloud Chat Model, Ollama Chat Model, Ollama Model, and OpenAI Chat Model.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["language models", "n8n", "AI"]}
{"content_type": "General Concept", "section_title": "Memory", "user_question": "What is memory in n8n and what nodes are available?", "concise_answer": "Memory in n8n retains information about previous queries in a series of queries, which is useful for applications that need to remember full conversations. Available memory nodes include Motorhead, Redis Chat Memory, Postgres Chat Memory, Simple Memory, Xata, and Zep.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["memory", "n8n", "chat memory"]}
{"content_type": "General Concept", "section_title": "Output parsers", "user_question": "What are output parsers in n8n and what types are available?", "concise_answer": "Output parsers in n8n take the text generated by a large language model (LLM) and format it to match the required structure. Available output parsers include Auto-fixing Output Parser, Item List Output Parser, and Structured Output Parser.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["output parsers", "n8n", "LLM"]}
{"content_type": "General Concept", "section_title": "Text splitters", "user_question": "What are text splitters in n8n and what types are available?", "concise_answer": "Text splitters in n8n break down data (documents) to make it easier for the LLM to process and return accurate results. Available text splitters include Character Text Splitter, Recursive Character Text Splitter, and Token Splitter.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["text splitters", "n8n", "data processing"]}
{"content_type": "General Concept", "section_title": "Embeddings", "user_question": "What are embeddings in n8n and what nodes are available?", "concise_answer": "Embeddings in n8n capture the 'relatedness' of text, images, video, or other types of information. Available embedding nodes include Embeddings AWS Bedrock, Embeddings Cohere, Embeddings Google PaLM, Embeddings Hugging Face Inference, Embeddings Mistral Cloud, Embeddings Ollama, and Embeddings OpenAI.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["embeddings", "n8n", "relatedness"]}
{"content_type": "How-To Guide", "section_title": "Use LangSmith with n8n", "user_question": "How can I connect my n8n instance to LangSmith?", "concise_answer": "To connect your n8n instance to LangSmith, log in to LangSmith and obtain your API key. Then, set the LangSmith environment variables: LANGCHAIN_ENDPOINT to 'https://api.smith.langchain.com', LANGCHAIN_TRACING_V2 to true, and LANGCHAIN_API_KEY to your API key.", "structured_data": {"key_parameters": [{"name": "LANGCHAIN_ENDPOINT", "description": "The endpoint URL for LangSmith API.", "example": "https://api.smith.langchain.com"}, {"name": "LANGCHAIN_TRACING_V2", "description": "Enables version 2 of LangChain tracing.", "example": "true"}, {"name": "LANGCHAIN_API_KEY", "description": "Your API key for LangSmith.", "example": "your_api_key"}], "code_block": null}, "keywords": ["LangSmith", "n8n", "API key"]}
{"content_type": "Configuration", "section_title": "Set the LangSmith environment variables", "user_question": "How do I set LangSmith environment variables for n8n?", "concise_answer": "To set LangSmith environment variables for n8n, define them globally in the environment where your n8n instance is hosted. These variables are not n8n-specific, so do not use the n8n configuration file. After setting the variables, restart n8n.", "structured_data": {"key_parameters": [{"name": "LANGCHAIN_ENDPOINT", "description": "The endpoint URL for LangChain API.", "example": "https://api.smith.langchain.com"}, {"name": "LANGCHAIN_TRACING_V2", "description": "Enables version 2 of LangChain tracing.", "example": "true"}, {"name": "LANGCHAIN_API_KEY", "description": "Your API key for LangChain.", "example": "Set this to your API key"}], "code_block": null}, "keywords": ["LangSmith", "environment variables", "n8n", "configuration", "API key"]}
{"content_type": "General Concept", "section_title": "LangChain in n8n", "user_question": "What is LangChain in n8n and how does it work?", "concise_answer": "LangChain in n8n is a collection of nodes that implement LangChain's AI functionality. These nodes are configurable, allowing you to select your preferred agent, LLM, memory, etc. You can integrate LangChain nodes with other n8n nodes to connect with various data sources and services.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["LangChain", "n8n", "AI functionality", "nodes", "integration"]}
{"content_type": "How-To Guide", "section_title": "API authentication", "user_question": "How do I authenticate API calls in n8n?", "concise_answer": "To authenticate API calls in n8n, use API keys. For enterprise instances, you can limit access with scopes. Non-enterprise keys have full access. Send the API key in your call as a header named X-N8N-API-KEY.", "structured_data": {"key_parameters": [{"name": "X-N8N-API-KEY", "description": "Header name for sending the API key in requests.", "example": null}], "code_block": null}, "keywords": ["API authentication", "n8n", "API key", "scopes", "header"]}
{"content_type": "How-To Guide", "section_title": "Create an API key", "user_question": "How can I create an API key in n8n?", "concise_answer": "To create an API key in n8n, log in, go to Settings > n8n API, and select 'Create an API key'. Choose a label, set an expiration time, and if on an enterprise plan, select the scopes. Copy the key for use in API calls.", "structured_data": {"key_parameters": [{"name": "Label", "description": "A name for the API key.", "example": null}, {"name": "Expiration time", "description": "The time after which the API key will expire.", "example": null}, {"name": "Scopes", "description": "The level of access the API key has, applicable for enterprise plans.", "example": null}], "code_block": null}, "keywords": ["API key", "n8n", "create", "settings", "enterprise"]}
{"content_type": "How-To Guide", "section_title": "Delete an API key", "user_question": "How do I delete an API key in n8n?", "concise_answer": "To delete an API key in n8n, log in, go to Settings > n8n API, select 'Delete' next to the key, and confirm by selecting 'Delete Forever'.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["API key", "delete", "n8n", "settings", "confirmation"]}
{"content_type": "Overview", "section_title": "n8n public REST API", "user_question": "What can I do with n8n's public REST API?", "concise_answer": "n8n's public REST API allows you to programmatically perform tasks similar to those in the GUI. It includes features like authentication, paginating results, and using the API playground for self-hosted instances.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "REST API", "programmatic access", "authentication", "API playground"]}
{"content_type": "General Concept", "section_title": "Learn about REST APIs", "user_question": "What resources can help me understand REST APIs?", "concise_answer": "If you're new to REST APIs, several resources can help you get started. KnowledgeOwl offers a basic introduction with examples, IBM Cloud Learn Hub provides a technical overview of APIs and REST APIs, and MDN web docs explain how REST APIs work over HTTP.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["REST API", "API introduction", "HTTP methods"]}
{"content_type": "How-To Guide", "section_title": "API pagination", "user_question": "How does pagination work in n8n's public REST API?", "concise_answer": "In n8n's public REST API, the default page size is 100 results, but you can change it up to a maximum of 250. When a response has more than one page, it includes a cursor to request subsequent pages.", "structured_data": {"key_parameters": [{"name": "default page size", "description": "The number of results per page by default.", "example": "100"}, {"name": "maximum page size", "description": "The maximum number of results per page.", "example": "250"}, {"name": "nextCursor", "description": "A value in the response to request the next page.", "example": "MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA"}], "code_block": "js { \"data\": [ // The response contains an object for each workflow { // Workflow data } ], \"nextCursor\": \"MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA\" }"}, "keywords": ["pagination", "REST API", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Using the API playground", "user_question": "How can I use the API playground in n8n?", "concise_answer": "The API playground in n8n is available for self-hosted versions and provides an interactive Swagger UI to try out requests. The path to access it is constructed from environment variables, and the API version number is 1.", "structured_data": {"key_parameters": [{"name": "API playground availability", "description": "Available for self-hosted versions only.", "example": null}, {"name": "API version number", "description": "The current version number of the API.", "example": "1"}], "code_block": "shell N8N_HOST:N8N_PORT/N8N_PATH/api/v<api-version-number>/docs"}, "keywords": ["API playground", "Swagger UI", "n8n"]}
{"content_type": "Configuration", "section_title": "Use AI in the Code node", "user_question": "What are the limitations of using AI in the Code node in n8n?", "concise_answer": "The AI coding feature using GPT in n8n is not available on self-hosted versions, and Python is not supported. During the trial phase, there are no usage limits, but this may change if the feature becomes permanent.", "structured_data": {"key_parameters": [{"name": "availability", "description": "Not available on self-hosted versions.", "example": null}, {"name": "language support", "description": "Python is not supported.", "example": null}, {"name": "usage limits", "description": "No usage limits during the trial phase.", "example": null}], "code_block": null}, "keywords": ["AI coding", "GPT", "n8n"]}
{"content_type": "General Concept", "section_title": "Feature limits", "user_question": "What are the limitations of using ChatGPT in n8n?", "concise_answer": "The ChatGPT implementation in n8n has several limitations: it can only manipulate data from the n8n workflow and cannot pull data from other sources. It requires nodes before the Code node to execute and deliver data before running an AI query. It struggles with large incoming data schemas and may have issues if there are many nodes before the Code node.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["ChatGPT", "n8n", "limitations", "workflow", "data schema"]}
{"content_type": "How-To Guide", "section_title": "Writing good prompts", "user_question": "How can I write effective prompts for ChatGPT in n8n?", "concise_answer": "To write effective prompts for ChatGPT in n8n, provide examples of expected output, describe processing steps clearly, avoid ambiguities, and specify the desired output format. Additionally, consider the input data and declare interactions between nodes to ensure compatibility with n8n.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["prompts", "ChatGPT", "n8n", "effective", "guidance"]}
{"content_type": "Code Example", "section_title": "Example prompts", "user_question": "Can you provide a code example for finding a piece of data inside a second dataset in n8n?", "concise_answer": "Here is a JavaScript code example for finding a piece of data inside a second dataset in n8n. It identifies the notionId of a Slack user by matching the email property.", "structured_data": {"key_parameters": null, "code_block": "const slackUser = $(\"Mock Slack\").all()[0]; const notionUsers = $input.all(); const slackUserEmail = slackUser.json.email;\n\nconst notionUser = notionUsers.find( (user) => user.json.person && user.json.person.email === slackUserEmail );\n\nreturn notionUser ? [{ json: { notionId: notionUser.json.id } }] : [];"}, "keywords": ["code example", "n8n", "JavaScript", "dataset", "notionId"]}
{"content_type": "Code Example", "section_title": "Example prompts", "user_question": "How can I transform data to list usernames in a single line of text in n8n?", "concise_answer": "To transform data and list usernames in a single line of text in n8n, use the following JavaScript code. It maps each username to a string enclosed in double quotes and joins them with a comma.", "structured_data": {"key_parameters": null, "code_block": "const items = $input.all(); const usernames = items.map((item) => `\"${item.json.username}\"`); const result = usernames.join(\", \"); return [{ json: { usernames: result } }];"}, "keywords": ["data transformation", "n8n", "JavaScript", "usernames", "code example"]}
{"content_type": "How-To Guide", "section_title": "Example 3: Summarize data and create a Slack message", "user_question": "How can I create a Slack message summarizing submissions in n8n?", "concise_answer": "To create a Slack message summarizing submissions, use the Summarize Code node in n8n. You need to count the number of ideas, features, and bugs, and list the top five submissions by votes. The JavaScript code provided will help you construct the message.", "structured_data": {"key_parameters": [{"name": "property_type", "description": "Indicates the type of submission, such as 'Feature', 'Bug', or 'Idea'.", "example": "Feature"}, {"name": "property_votes", "description": "The number of votes a submission has received.", "example": "10"}], "code_block": "const submissions = $input.all();\n\n// Count the number of ideas, features, and bugs\nlet ideaCount = 0;\nlet featureCount = 0;\nlet bugCount = 0;\n\nsubmissions.forEach((submission) => {\n  switch (submission.json.property_type[0]) {\n    case \"Idea\":\n      ideaCount++;\n      break;\n    case \"Feature\":\n      featureCount++;\n      break;\n    case \"Bug\":\n      bugCount++;\n      break;\n  }\n});\n\n// Sort submissions by votes and take the top 5\nconst topSubmissions = submissions\n  .sort((a, b) => b.json.property_votes - a.json.property_votes)\n  .slice(0, 5);\n\nlet topSubmissionText = \"\";\ntopSubmissions.forEach((submission) => {\n  topSubmissionText += `<${submission.json.url}|${submission.json.name}> with ${submission.json.property_votes} votes\\n`;\n});\n\n// Construct the Slack message\nconst slackMessage = `*Summary of Submissions*\\n Ideas: ${ideaCount}\\n Features: ${featureCount}\\n Bugs: ${bugCount}\\n Top 5 Submissions:\\n ${topSubmissionText}`;\n\nreturn [{ json: { slackMessage } }];"}, "keywords": ["Slack message", "n8n", "submissions", "JavaScript", "workflow"]}
{"content_type": "Code Example", "section_title": "Reference incoming node data explicitly", "user_question": "How do I reference nested fields in n8n using JavaScript?", "concise_answer": "In n8n, you can reference nested fields using dot notation. This helps in accessing specific data within a JSON structure, making it easier to manipulate and use in your workflows.", "structured_data": {"key_parameters": null, "code_block": "const items = $input.all();\nconst newItems = items.map((item) => {\n  const firstName = item.json.personal_info.first_name;\n  const jobTitle = item.json.work_info.job_title;\n  return {\n    json: {\n      firstName,\n      jobTitle,\n    },\n  };\n});\nreturn newItems;"}, "keywords": ["dot notation", "nested fields", "JavaScript", "n8n", "data reference"]}
{"content_type": "General Concept", "section_title": "Expressions", "user_question": "What are expressions in n8n and how are they used?", "concise_answer": "Expressions in n8n are a powerful feature that allows you to set node parameters dynamically based on data from previous node executions, the workflow, or the n8n environment. They enable you to execute JavaScript within an expression, making it easy to manipulate data without extensive coding.", "structured_data": {"key_parameters": [{"name": "Previous node executions", "description": "Data from nodes that have already been executed in the workflow.", "example": null}, {"name": "Workflow", "description": "The current workflow context in which the node is running.", "example": null}, {"name": "n8n environment", "description": "The environment settings and variables available in n8n.", "example": null}], "code_block": null}, "keywords": ["expressions", "n8n", "dynamic parameters", "JavaScript", "workflow"]}
{"content_type": "General Concept", "section_title": "n8n Libraries", "user_question": "What libraries does n8n support for working with dates and querying JSON?", "concise_answer": "n8n supports the Luxon library for working with dates and time, and the JMESPath library for querying JSON data.", "structured_data": {"key_parameters": [{"name": "Luxon", "description": "A library for working with dates and time.", "example": null}, {"name": "JMESPath", "description": "A library for querying JSON data.", "example": null}], "code_block": null}, "keywords": ["Luxon", "JMESPath", "libraries", "dates", "JSON"]}
{"content_type": "How-To Guide", "section_title": "Writing expressions", "user_question": "How do I use an expression to set a parameter value in n8n?", "concise_answer": "To use an expression to set a parameter value in n8n, hover over the parameter, select 'Expressions' in the Fixed/Expression toggle, and write your expression. You can also use the expressions editor to browse available data.", "structured_data": {"key_parameters": [{"name": "Expression format", "description": "All expressions have the format {{ your expression here }}.", "example": "{{ $json.body.city }}"}], "code_block": null}, "keywords": ["expressions", "parameter", "n8n", "expression editor", "workflow"]}
{"content_type": "Code Example", "section_title": "Example: Get data from webhook body", "user_question": "How can I extract the 'city' value from a webhook body in n8n?", "concise_answer": "To extract the 'city' value from a webhook body in n8n, use the expression {{$json.body.city}}. This accesses the incoming JSON data using n8n's custom $json variable.", "structured_data": {"key_parameters": [{"name": "Expression", "description": "Accesses the incoming JSON-formatted data to find the value of 'city'.", "example": "{{$json.body.city}}"}], "code_block": "json [ { \"headers\": { \"host\": \"n8n.instance.address\", ... }, \"params\": {}, \"query\": {}, \"body\": { \"name\": \"Jim\", \"age\": 30, \"city\": \"New York\" } } ]"}, "keywords": ["webhook", "JSON", "city", "expression", "n8n"]}
{"content_type": "Code Example", "section_title": "Example: Writing longer JavaScript", "user_question": "What is a valid n8n expression for calculating the difference in months between two dates using Luxon?", "concise_answer": "A valid n8n expression for calculating the difference in months between two dates using Luxon is: {{DateTime.fromISO('2017-03-13').diff(DateTime.fromISO('2017-02-13'), 'months').toObject()}}.", "structured_data": {"key_parameters": [{"name": "Luxon expression", "description": "Calculates the difference in months between two dates.", "example": "{{DateTime.fromISO('2017-03-13').diff(DateTime.fromISO('2017-02-13'), 'months').toObject()}}"}], "code_block": "js {{DateTime.fromISO('2017-03-13').diff(DateTime.fromISO('2017-02-13'), 'months').toObject()}}"}, "keywords": ["Luxon", "JavaScript", "expression", "n8n", "date difference"]}
{"content_type": "General Concept", "section_title": "Code in n8n", "user_question": "Where can I use code in n8n workflows?", "concise_answer": "In n8n workflows, you can use code in two places: within expressions to transform data in nodes, and in the Code node to add JavaScript or Python.", "structured_data": {"key_parameters": [{"name": "Expressions", "description": "Used to transform data in nodes using JavaScript and n8n's built-in methods.", "example": null}, {"name": "Code node", "description": "Allows adding JavaScript or Python to your workflow.", "example": null}], "code_block": null}, "keywords": ["code", "expressions", "Code node", "n8n", "workflows"]}
{"content_type": "General Concept", "section_title": "Technical nodes", "user_question": "What are the core nodes provided by n8n and their functionalities?", "concise_answer": "n8n provides core nodes that simplify adding key functionalities such as API requests, webhooks, scheduling, and file handling. These include nodes like HTTP Request, Webhook, and Code nodes for making API calls, responding to webhooks, and writing JavaScript in workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "core nodes", "API requests", "webhooks", "file handling"]}
{"content_type": "Node Reference", "section_title": "Other developer resources", "user_question": "How can I programmatically perform tasks in n8n?", "concise_answer": "n8n provides an API that allows you to programmatically perform many of the same tasks as in the GUI. You can use the n8n API node to access the API within your workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "API", "programmatic tasks", "API node"]}
{"content_type": "How-To Guide", "section_title": "Custom variables", "user_question": "How do I create and use custom variables in n8n?", "concise_answer": "To create a custom variable in n8n, go to the Variables page, select 'Add Variable', enter a Key and Value, and select 'Save'. These variables are read-only and can be accessed in the Code node and expressions. They are available to all users on the n8n instance.", "structured_data": {"key_parameters": [{"name": "Key", "description": "The identifier for the variable, limited to 50 characters.", "example": "my_variable"}, {"name": "Value", "description": "The value assigned to the variable, limited to 220 characters.", "example": "12345"}], "code_block": "javascript\n// Access a variable\n$vars.<variable-name>"}, "keywords": ["n8n", "custom variables", "workflow", "expressions", "Code node"]}
{"content_type": "General Concept", "section_title": "Convenience methods", "user_question": "What convenience methods does n8n provide for expressions?", "concise_answer": "n8n provides convenience methods to simplify performing common tasks in expressions. These methods are designed to make it easier to work with data within workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "convenience methods", "expressions", "workflow"]}
{"content_type": "General Concept", "section_title": "n8n Methods for Expressions", "user_question": "What methods does n8n provide for performing tasks in expressions?", "concise_answer": "n8n provides several methods to facilitate common tasks in expressions, such as evaluating expressions, handling empty values, and comparing numbers. These methods are available in both JavaScript and Python contexts, with some limitations in the Code node.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "methods", "expressions", "JavaScript", "Python"]}
{"content_type": "Node Reference", "section_title": "JavaScript Methods", "user_question": "What JavaScript methods are available in the n8n Code node?", "concise_answer": "In the n8n Code node, JavaScript methods such as $evaluateExpression and $ifEmpty are available. These methods help evaluate expressions and handle empty values, respectively.", "structured_data": {"key_parameters": [{"name": "$evaluateExpression(expression: string, itemIndex?: number)", "description": "Evaluates a string as an expression. If itemIndex is not provided, it uses data from item 0 in the Code node.", "example": null}, {"name": "$ifEmpty(value, defaultValue)", "description": "Tests if the first parameter is empty and returns it if not, otherwise returns the second parameter.", "example": null}], "code_block": null}, "keywords": ["n8n", "JavaScript", "Code node", "methods", "expressions"]}
{"content_type": "Node Reference", "section_title": "Python Methods", "user_question": "Can I use Python methods in the n8n Code node?", "concise_answer": "Yes, Python methods such as _evaluateExpression and _ifEmpty can be used in the n8n Code node. These methods allow for expression evaluation and handling empty values.", "structured_data": {"key_parameters": [{"name": "_evaluateExpression(expression: string, itemIndex?: number)", "description": "Evaluates a string as an expression. If itemIndex is not provided, it uses data from item 0 in the Code node.", "example": null}, {"name": "_ifEmpty(value, defaultValue)", "description": "Tests if the first parameter is empty and returns it if not, otherwise returns the second parameter.", "example": null}], "code_block": null}, "keywords": ["n8n", "Python", "Code node", "methods", "expressions"]}
{"content_type": "Node Reference", "section_title": "Current node input", "user_question": "What methods are available for working with the input of the current node in n8n?", "concise_answer": "n8n provides several methods for working with the input of the current node. These include $input.item, $input.all(), $input.first(), $input.last(), $input.params, $json, and $input.context.noItemsLeft for JavaScript, and their equivalents in Python. These methods allow you to access and manipulate incoming data within a node.", "structured_data": {"key_parameters": [{"name": "$input.item", "description": "The input item of the current node that's being processed.", "example": null}, {"name": "$input.all()", "description": "All input items in the current node.", "example": null}, {"name": "$input.first()", "description": "First input item in the current node.", "example": null}, {"name": "$input.last()", "description": "Last input item in the current node.", "example": null}, {"name": "$input.params", "description": "Object containing the query settings of the previous node.", "example": null}, {"name": "$json", "description": "Shorthand for $input.item.json. Incoming JSON data from a node.", "example": null}, {"name": "$input.context.noItemsLeft", "description": "Boolean indicating if there are no items left to process in a Loop Over Items node.", "example": null}], "code_block": null}, "keywords": ["n8n", "node input", "methods", "JavaScript", "Python"]}
{"content_type": "Node Reference", "section_title": "Built-in date and time methods", "user_question": "What built-in methods does n8n provide for working with date and time?", "concise_answer": "n8n offers built-in methods for handling date and time, such as $now and $today in JavaScript, and their equivalents in Python. These methods return Luxon objects representing the current timestamp and the current date rounded down to the day, respectively.", "structured_data": {"key_parameters": [{"name": "$now", "description": "A Luxon object containing the current timestamp.", "example": "DateTime.now()"}, {"name": "$today", "description": "A Luxon object containing the current date, rounded down to the day.", "example": "DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 })"}], "code_block": null}, "keywords": ["n8n", "date", "time", "Luxon", "JavaScript"]}
{"content_type": "Node Reference", "section_title": "HTTP node variables", "user_question": "What variables can I use for pagination in the HTTP node in n8n?", "concise_answer": "In n8n, specific variables are available for use in expressions within the HTTP node to handle pagination. These variables are designed to work exclusively with the HTTP node and cannot be used in other nodes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["HTTP node", "pagination", "variables", "expressions", "n8n"]}
{"content_type": "Node Reference", "section_title": "JMESPath method", "user_question": "How can I use JMESPath in n8n?", "concise_answer": "n8n provides a method to perform searches on JSON objects using JMESPath. This method is available in the Code node for both JavaScript and Python, allowing you to efficiently query JSON data.", "structured_data": {"key_parameters": [{"name": "$jmespath()", "description": "Perform a search on a JSON object using JMESPath in JavaScript.", "example": null}, {"name": "_jmespath()", "description": "Perform a search on a JSON object using JMESPath in Python.", "example": null}], "code_block": null}, "keywords": ["JMESPath", "JSON", "Code node", "JavaScript", "Python"]}
{"content_type": "Node Reference", "section_title": "LangChain Code node methods", "user_question": "What methods are available for the LangChain Code node in n8n?", "concise_answer": "n8n provides specific methods to facilitate common tasks within the LangChain Code node. These methods are exclusive to the LangChain Code node and cannot be used in other nodes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["LangChain", "Code node", "methods", "n8n", "expressions"]}
{"content_type": "Node Reference", "section_title": "n8n metadata", "user_question": "How can I access metadata in n8n?", "concise_answer": "n8n offers methods to access various metadata, including environment variables for self-hosted instances, workflow details, execution data, node information, instance variables, and external secrets.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["metadata", "environment variables", "workflows", "executions", "n8n"]}
{"content_type": "General Concept", "section_title": "Python support", "user_question": "Can I use Python in n8n's Code node?", "concise_answer": "Yes, you can use Python in the Code node in n8n. However, it is not available for use in expressions.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Python", "Code node", "n8n", "expressions", "support"]}
{"content_type": "Node Reference", "section_title": "JavaScript", "user_question": "What are the available methods in n8n's JavaScript Code node?", "concise_answer": "In n8n's JavaScript Code node, you can use methods like $env, $execution.customData, $execution.id, $execution.mode, $execution.resumeUrl, $getWorkflowStaticData(type), $<node-name>.isExecuted, $nodeVersion, $prevNode.name, $prevNode.outputIndex, $prevNode.runIndex, $runIndex, $secrets, $vars, $workflow.active, $workflow.id, and $workflow.name.", "structured_data": {"key_parameters": [{"name": "$env", "description": "Contains n8n instance configuration environment variables.", "example": null}, {"name": "$execution.customData", "description": "Set and get custom execution data.", "example": null}, {"name": "$execution.id", "description": "The unique ID of the current workflow execution.", "example": null}, {"name": "$execution.mode", "description": "Whether the execution was triggered automatically, or by manually running the workflow.", "example": "test"}, {"name": "$execution.resumeUrl", "description": "The webhook URL to call to resume a workflow waiting at a Wait node.", "example": null}, {"name": "$getWorkflowStaticData(type)", "description": "Access to the static workflow data.", "example": null}, {"name": "$<node-name>.isExecuted", "description": "Check whether a node has already executed.", "example": null}, {"name": "$nodeVersion", "description": "Get the version of the current node.", "example": null}, {"name": "$prevNode.name", "description": "The name of the node that the current input came from.", "example": null}, {"name": "$prevNode.outputIndex", "description": "The index of the output connector that the current input came from.", "example": null}, {"name": "$prevNode.runIndex", "description": "The run of the previous node that generated the current input.", "example": null}, {"name": "$runIndex", "description": "How many times n8n has executed the current node.", "example": "0"}, {"name": "$secrets", "description": "Contains information about your External secrets setup.", "example": null}, {"name": "$vars", "description": "Contains the Variables available in the active environment.", "example": null}, {"name": "$workflow.active", "description": "Whether the workflow is active (true) or not (false).", "example": "true"}, {"name": "$workflow.id", "description": "The workflow ID.", "example": null}, {"name": "$workflow.name", "description": "The workflow name.", "example": null}], "code_block": null}, "keywords": ["JavaScript", "Code node", "methods", "n8n", "workflow"]}
{"content_type": "Node Reference", "section_title": "Python", "user_question": "What are the available methods in n8n's Python Code node?", "concise_answer": "In n8n's Python Code node, you can use methods like _env, _execution.customData, _execution.id, _execution.mode, _execution.resumeUrl, _getWorkflowStaticData(type), _<node-name>.isExecuted, _nodeVersion, _prevNode.name, _prevNode.outputIndex, and _prevNode.runIndex.", "structured_data": {"key_parameters": [{"name": "_env", "description": "Contains n8n instance configuration environment variables.", "example": null}, {"name": "_execution.customData", "description": "Set and get custom execution data.", "example": null}, {"name": "_execution.id", "description": "The unique ID of the current workflow execution.", "example": null}, {"name": "_execution.mode", "description": "Whether the execution was triggered automatically, or by manually running the workflow.", "example": "test"}, {"name": "_execution.resumeUrl", "description": "The webhook URL to call to resume a workflow waiting at a Wait node.", "example": null}, {"name": "_getWorkflowStaticData(type)", "description": "Access to the static workflow data.", "example": null}, {"name": "_<node-name>.isExecuted", "description": "Check whether a node has already executed.", "example": null}, {"name": "_nodeVersion", "description": "Get the version of the current node.", "example": null}, {"name": "_prevNode.name", "description": "The name of the node that the current input came from.", "example": null}, {"name": "_prevNode.outputIndex", "description": "The index of the output connector that the current input came from.", "example": null}, {"name": "_prevNode.runIndex", "description": "The run of the previous node that generated the current input.", "example": null}], "code_block": null}, "keywords": ["Python", "Code node", "methods", "n8n", "workflow"]}
{"content_type": "General Concept", "section_title": "Node Execution Context", "user_question": "What does _prevNode refer to in n8n?", "concise_answer": "In n8n, _prevNode refers to the previous node in the workflow. It is particularly important when dealing with nodes that have multiple outputs, like the If or Switch nodes. The _prevNode always uses the first input connector when using the Merge node.", "structured_data": {"key_parameters": [{"name": "_prevNode", "description": "Refers to the previous node in the workflow, especially relevant for nodes with multiple outputs.", "example": null}], "code_block": null}, "keywords": ["_prevNode", "n8n", "workflow", "Merge node", "multiple outputs"]}
{"content_type": "General Concept", "section_title": "Node Execution Context", "user_question": "What is _prevNode.runIndex in n8n?", "concise_answer": "The _prevNode.runIndex in n8n indicates the run of the previous node that generated the current input. It is used to track which execution of the previous node is being referenced.", "structured_data": {"key_parameters": [{"name": "_prevNode.runIndex", "description": "Indicates the run of the previous node that generated the current input.", "example": null}], "code_block": null}, "keywords": ["_prevNode.runIndex", "n8n", "workflow", "node execution", "input tracking"]}
{"content_type": "General Concept", "section_title": "Node Execution Context", "user_question": "How does n8n track the number of times a node has been executed?", "concise_answer": "n8n uses the _runIndex to track how many times the current node has been executed. It is zero-based, meaning the first run is indexed as 0, the second as 1, and so on.", "structured_data": {"key_parameters": [{"name": "_runIndex", "description": "Tracks how many times the current node has been executed, starting from zero.", "example": null}], "code_block": null}, "keywords": ["_runIndex", "n8n", "node execution", "execution count", "workflow"]}
{"content_type": "General Concept", "section_title": "Node Execution Context", "user_question": "What information does _secrets contain in n8n?", "concise_answer": "In n8n, _secrets contains information about your External secrets setup. It is used to manage sensitive data securely within workflows.", "structured_data": {"key_parameters": [{"name": "_secrets", "description": "Contains information about your External secrets setup.", "example": null}], "code_block": null}, "keywords": ["_secrets", "n8n", "external secrets", "sensitive data", "workflow security"]}
{"content_type": "General Concept", "section_title": "Node Execution Context", "user_question": "What does _vars represent in n8n?", "concise_answer": "In n8n, _vars contains the variables available in the active environment. These variables can be used within the workflow to store and retrieve data dynamically.", "structured_data": {"key_parameters": [{"name": "_vars", "description": "Contains the variables available in the active environment.", "example": null}], "code_block": null}, "keywords": ["_vars", "n8n", "variables", "environment", "workflow"]}
{"content_type": "General Concept", "section_title": "Node Execution Context", "user_question": "How can I check if a workflow is active in n8n?", "concise_answer": "In n8n, you can check if a workflow is active by using _workflow.active. It returns true if the workflow is active and false if it is not.", "structured_data": {"key_parameters": [{"name": "_workflow.active", "description": "Indicates whether the workflow is active (true) or not (false).", "example": null}], "code_block": null}, "keywords": ["_workflow.active", "n8n", "workflow status", "active workflow", "workflow management"]}
{"content_type": "General Concept", "section_title": "Node Execution Context", "user_question": "What is the purpose of _workflow.id in n8n?", "concise_answer": "In n8n, _workflow.id is used to identify the workflow. It provides a unique identifier for each workflow, which can be useful for tracking and managing workflows.", "structured_data": {"key_parameters": [{"name": "_workflow.id", "description": "The unique identifier for the workflow.", "example": null}], "code_block": null}, "keywords": ["_workflow.id", "n8n", "workflow identifier", "workflow management", "unique ID"]}
{"content_type": "General Concept", "section_title": "Node Execution Context", "user_question": "How can I find the name of a workflow in n8n?", "concise_answer": "In n8n, the name of a workflow can be found using _workflow.name. This provides the name assigned to the workflow, which can be used for identification and organization.", "structured_data": {"key_parameters": [{"name": "_workflow.name", "description": "The name assigned to the workflow.", "example": null}], "code_block": null}, "keywords": ["_workflow.name", "n8n", "workflow name", "workflow identification", "workflow organization"]}
{"content_type": "Node Reference", "section_title": "Output of other nodes", "user_question": "What methods are available for working with the output of other nodes in n8n?", "concise_answer": "n8n provides several methods to work with the output of other nodes. These methods include retrieving all items, the first item, the last item, and linked items from a node. Some methods are available in the Code node, while others are not.", "structured_data": {"key_parameters": [{"name": "$(\"<node-name>\").all(branchIndex?, runIndex?)", "description": "Returns all items from a given node. Defaults to the output connecting the node-name with the current node if branchIndex is not provided.", "example": null}, {"name": "$(\"<node-name>\").first(branchIndex?, runIndex?)", "description": "Returns the first item output by the given node. Defaults to the output connecting the node-name with the current node if branchIndex is not provided.", "example": null}, {"name": "$(\"<node-name>\").last(branchIndex?, runIndex?)", "description": "Returns the last item output by the given node. Defaults to the output connecting the node-name with the current node if branchIndex is not provided.", "example": null}, {"name": "$(\"<node-name>\").item", "description": "The linked item in the specified node used to produce the current item. Not available in the Code node.", "example": null}, {"name": "$(\"<node-name>\").params", "description": "Object containing the query settings of the given node, including operation details and result limits.", "example": null}, {"name": "$(\"<node-name>\").context", "description": "Boolean indicating the processing status of the Loop Over Items node. Available in the Code node.", "example": null}, {"name": "$(\"<node-name>\").itemMatching(currentNodeInputIndex)", "description": "Used in the Code node to trace back from an input item instead of using .item.", "example": null}], "code_block": null}, "keywords": ["n8n", "node output", "methods", "Code node", "item linking"]}
{"content_type": "Node Reference", "section_title": "Output of other nodes", "user_question": "Can I use Python to work with node outputs in n8n?", "concise_answer": "Yes, you can use Python in the Code node to work with node outputs in n8n. The methods available in JavaScript are also available in Python, with similar functionality.", "structured_data": {"key_parameters": [{"name": "_(\"<node-name>\").all(branchIndex?, runIndex?)", "description": "Returns all items from a given node. Defaults to the output connecting the node-name with the current node if branchIndex is not provided.", "example": null}, {"name": "_(\"<node-name>\").first(branchIndex?, runIndex?)", "description": "Returns the first item output by the given node. Defaults to the output connecting the node-name with the current node if branchIndex is not provided.", "example": null}, {"name": "_(\"<node-name>\").last(branchIndex?, runIndex?)", "description": "Returns the last item output by the given node. Defaults to the output connecting the node-name with the current node if branchIndex is not provided.", "example": null}, {"name": "_(\"<node-name>\").item", "description": "The linked item in the specified node used to produce the current item. Not available in the Code node.", "example": null}, {"name": "_(\"<node-name>\").params", "description": "Object containing the query settings of the given node, including operation details and result limits.", "example": null}, {"name": "_(\"<node-name>\").context", "description": "Boolean indicating the processing status of the Loop Over Items node. Available in the Code node.", "example": null}, {"name": "_(\"<node-name>\").itemMatching(currentNodeInputIndex)", "description": "Used in the Code node to trace back from an input item instead of using .item.", "example": null}], "code_block": null}, "keywords": ["n8n", "Python", "node output", "methods", "Code node"]}
{"content_type": "Code Example", "section_title": "Data transformation functions for strings", "user_question": "How can I check if a string is an email in n8n?", "concise_answer": "In n8n, you can check if a string is an email by using the isEmail() function. This function returns true if the string is a valid email format.", "structured_data": {"key_parameters": null, "code_block": "\"example@example.com\".isEmail() // Returns true"}, "keywords": ["email validation", "string functions", "n8n", "isEmail", "JavaScript"]}
{"content_type": "Node Reference", "section_title": "Data transformation functions for numbers", "user_question": "What functions are available for transforming numbers in n8n?", "concise_answer": "n8n provides built-in convenience functions for transforming numbers in expressions. You can use any JavaScript in expressions to manipulate number data.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["number functions", "data transformation", "n8n", "JavaScript", "expressions"]}
{"content_type": "Node Reference", "section_title": "Data transformation functions for objects", "user_question": "How can I transform objects in n8n?", "concise_answer": "n8n offers built-in convenience functions for transforming objects in expressions. You can utilize JavaScript to manipulate object data within n8n.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["object functions", "data transformation", "n8n", "JavaScript", "expressions"]}
{"content_type": "Node Reference", "section_title": "Data transformation functions for strings", "user_question": "What string transformation functions are available in n8n?", "concise_answer": "n8n provides built-in convenience functions for transforming strings in expressions. You can use JavaScript to perform various string manipulations.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["string functions", "data transformation", "n8n", "JavaScript", "expressions"]}
{"content_type": "How-To Guide", "section_title": "Query JSON with JMESPath", "user_question": "How can I query JSON data in n8n using JMESPath?", "concise_answer": "In n8n, you can query JSON data using the JMESPath query language with the jmespath() method. This method allows you to search and transform JSON objects using JMESPath expressions.", "structured_data": {"key_parameters": [{"name": "object", "description": "A JSON object, such as the output of a previous node.", "example": "null"}, {"name": "searchString", "description": "An expression written in the JMESPath query language.", "example": "null"}], "code_block": "var jmespath = require('jmespath'); jmespath.search(object, searchString);"}, "keywords": ["JMESPath", "JSON query", "n8n", "data transformation", "jmespath()"]}
{"content_type": "General Concept", "section_title": "Search parameter order", "user_question": "How does the parameter order differ in the JMESPath JavaScript library used by n8n?", "concise_answer": "In the JMESPath JavaScript library used by n8n, the search function parameters are ordered as search(object, searchString), which is the reverse of the order used in the JMESPath Specification examples.", "structured_data": {"key_parameters": [{"name": "search", "description": "Function to perform a search using JMESPath expressions.", "example": "search(object, searchString)"}], "code_block": null}, "keywords": ["JMESPath", "search function", "parameter order", "JavaScript library", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Common tasks", "user_question": "How do I apply a JMESPath expression to a collection of elements in n8n?", "concise_answer": "To apply a JMESPath expression to a collection of elements in n8n, you can use projections. JMESPath supports list, slice, object, flatten, and filter projections to manipulate collections.", "structured_data": {"key_parameters": [{"name": "Projections", "description": "Key feature of JMESPath to apply expressions to collections.", "example": "List Projections, Slice Projections, Object Projections"}], "code_block": null}, "keywords": ["JMESPath", "projections", "n8n", "collections", "expressions"]}
{"content_type": "Code Example", "section_title": "Retrieve a list of all the people's first names", "user_question": "How can I retrieve all first names from a JSON object using JMESPath in n8n?", "concise_answer": "You can retrieve all first names from a JSON object using the JMESPath expression '[*].first'. This can be implemented in JavaScript or Python within n8n.", "structured_data": {"key_parameters": null, "code_block": "{{$jmespath($json.body.people, \"[*].first\")}} // Returns [\"James\", \"Jacob\", \"Jayden\"]"}, "keywords": ["JMESPath", "first names", "JSON", "n8n", "JavaScript"]}
{"content_type": "Code Example", "section_title": "Get a slice of the first names", "user_question": "How do I get a slice of the first names from a JSON object using JMESPath in n8n?", "concise_answer": "To get a slice of the first names, use the JMESPath expression '[:2].first'. This will return the first two names from the list.", "structured_data": {"key_parameters": null, "code_block": "{{$jmespath($json.body.people, \"[:2].first\")}} // Returns [\"James\", \"Jacob\"]"}, "keywords": ["JMESPath", "slice", "first names", "JSON", "n8n"]}
{"content_type": "Code Example", "section_title": "Get a list of the dogs' ages using object projections", "user_question": "How can I retrieve the ages of dogs from a JSON object using JMESPath in n8n?", "concise_answer": "You can retrieve the ages of dogs using the JMESPath expression '*.age'. This expression will return a list of ages from the JSON object.", "structured_data": {"key_parameters": null, "code_block": "{{$jmespath($json.body.dogs, \"*.age\")}} // Returns [7, 5]"}, "keywords": ["JMESPath", "dogs' ages", "object projections", "JSON", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Use Multiselect", "user_question": "How can I use multiselect to extract first and last names from a JSON object in n8n?", "concise_answer": "You can use the multiselect feature in n8n to extract specific elements from a JSON object. For example, to get the first and last names from a list of people, you can use the JMESPath expression '[].[first, last]' to create a new list containing both names.", "structured_data": {"key_parameters": [{"name": "JMESPath Expression", "description": "A query language for JSON used to extract specific elements.", "example": "[].[first, last]"}], "code_block": "{{$jmespath($json.body.people, \"[].[first, last]\")}}"}, "keywords": ["multiselect", "JSON", "n8n", "JMESPath", "extract names"]}
{"content_type": "Code Example", "section_title": "Expressions (JavaScript)", "user_question": "What is an example of using JMESPath in JavaScript to extract data in n8n?", "concise_answer": "In n8n, you can use JMESPath within JavaScript expressions to extract data from JSON. For instance, to extract first and last names from a list of people, you can use the expression '[].[first, last]'.", "structured_data": {"key_parameters": null, "code_block": "{{$jmespath($json.body.people, \"[].[first, last]\")}}"}, "keywords": ["JMESPath", "JavaScript", "n8n", "data extraction", "JSON"]}
{"content_type": "General Concept", "section_title": "Date and time with Luxon", "user_question": "How does n8n handle date and time using Luxon?", "concise_answer": "n8n uses the Luxon library to handle date and time operations. It provides two custom variables: 'now', which contains the current timestamp, and 'today', which is the current timestamp rounded down to the day. These variables can be used in JavaScript expressions within n8n.", "structured_data": {"key_parameters": [{"name": "now", "description": "A Luxon object containing the current timestamp.", "example": "DateTime.now()"}, {"name": "today", "description": "A Luxon object containing the current timestamp, rounded down to the day.", "example": "DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 })"}], "code_block": null}, "keywords": ["Luxon", "date and time", "n8n", "JavaScript", "timestamp"]}
{"content_type": "Code Example", "section_title": "Expressions (JavaScript)", "user_question": "Can you provide a JavaScript example of using Luxon in n8n?", "concise_answer": "In n8n, you can use Luxon to display the current date and time in ISO format or as a Unix timestamp. For example, using the variable '$now' will display the current timestamp in ISO format.", "structured_data": {"key_parameters": null, "code_block": "{{$now}}\n// n8n displays the ISO formatted timestamp\n// For example 2022-03-09T14:02:37.065+00:00\n{{\"Today's date is \" + $now}}\n// n8n displays \"Today's date is <unix timestamp>\"\n// For example \"Today's date is 1646834498755\""}, "keywords": ["Luxon", "JavaScript", "n8n", "ISO format", "timestamp"]}
{"content_type": "Code Example", "section_title": "Code node (JavaScript)", "user_question": "How can I get the current date and time in n8n using JavaScript?", "concise_answer": "In n8n, you can use the built-in variable `$now` to get the current date and time in ISO format. You can also concatenate it with strings for custom messages.", "structured_data": {"key_parameters": null, "code_block": "$now\n// n8n displays <ISO formatted timestamp>\n// For example 2022-03-09T14:00:25.058+00:00\nlet rightNow = \"Today's date is \" + $now\n// n8n displays \"Today's date is <unix timestamp>\"\n// For example \"Today's date is 1646834498755\""}, "keywords": ["JavaScript", "current date", "n8n", "ISO timestamp", "code example"]}
{"content_type": "General Concept", "section_title": "Date and time behavior in n8n", "user_question": "How does n8n handle date and time conversions between nodes?", "concise_answer": "n8n converts dates and times to strings between nodes. When performing arithmetic on dates and times, be aware of this conversion. Use JavaScript's `new Date()` or Luxon's `DateTime.fromISO()` for conversions.", "structured_data": {"key_parameters": [{"name": "Date Conversion", "description": "Converts dates and times to strings between nodes.", "example": null}], "code_block": null}, "keywords": ["date conversion", "n8n", "JavaScript", "Luxon", "time handling"]}
{"content_type": "Configuration", "section_title": "Setting the timezone in n8n", "user_question": "How can I set the timezone in n8n?", "concise_answer": "In n8n, the timezone can be set to the default 'America/New York', a custom timezone for the instance using the `GENERIC_TIMEZONE` environment variable, or a custom timezone for an individual workflow in its settings.", "structured_data": {"key_parameters": [{"name": "Default Timezone", "description": "The default timezone is 'America/New York'.", "example": "America/New York"}, {"name": "Custom Timezone (Instance)", "description": "Set using the `GENERIC_TIMEZONE` environment variable.", "example": "Europe/London"}, {"name": "Custom Timezone (Workflow)", "description": "Configured in workflow settings.", "example": null}], "code_block": null}, "keywords": ["timezone", "n8n", "configuration", "environment variable", "workflow settings"]}
{"content_type": "How-To Guide", "section_title": "Convert date string to Luxon", "user_question": "How do I convert a date string to a Luxon DateTime object in n8n?", "concise_answer": "To convert a date string to a Luxon DateTime object, use `DateTime.fromISO()` for ISO 8601 strings or `DateTime.fromFormat()` for custom formats. Provide the string and format tokens for ad-hoc parsing.", "structured_data": {"key_parameters": [{"name": "fromISO()", "description": "Creates a Luxon DateTime from an ISO 8601 string.", "example": "DateTime.fromISO('2019-06-23T00:00:00.00')"}, {"name": "fromFormat()", "description": "Converts a string to a Luxon DateTime using specified format tokens.", "example": "DateTime.fromFormat('23-06-2019', 'dd-MM-yyyy')"}], "code_block": "let luxonDateTime = DateTime.fromISO('2019-06-23T00:00:00.00')\nlet newFormat = DateTime.fromFormat('23-06-2019', 'dd-MM-yyyy')"}, "keywords": ["Luxon", "DateTime", "n8n", "date conversion", "ISO format"]}
{"content_type": "Code Example", "section_title": "Get n days from today", "user_question": "How can I calculate a date that is a certain number of days from today in n8n?", "concise_answer": "In n8n, you can use the expression `{{$today.minus({days: 7})}}` to calculate a date that is seven days before the current date.", "structured_data": {"key_parameters": null, "code_block": "{{$today.minus({days: 7})}}"}, "keywords": ["date calculation", "n8n", "JavaScript", "days from today", "code example"]}
{"content_type": "Code Example", "section_title": "Expressions (JavaScript)", "user_question": "How can I get the date seven days before today using n8n expressions?", "concise_answer": "You can use n8n's custom variable `$today` to get the date seven days before today by using the expression `{{$today.minus({days: 7})}}`. This will return the date in the format `yyyy-mm-dd-T00:00:00.000+00:00`.", "structured_data": {"key_parameters": [{"name": "$today", "description": "A custom variable in n8n representing the current date.", "example": null}, {"name": "minus", "description": "A method to subtract a specified amount of time from a date.", "example": "{days: 7}"}], "code_block": "{{$today.minus({days: 7})}}"}, "keywords": ["n8n", "date manipulation", "expressions", "JavaScript", "minus"]}
{"content_type": "Code Example", "section_title": "Code node (JavaScript)", "user_question": "How can I store the date seven days before today in a variable using n8n's Code node?", "concise_answer": "In n8n's Code node, you can store the date seven days before today in a variable by using the code `let sevenDaysAgo = $today.minus({days: 7})`. This will store the date in the format `yyyy-mm-dd-T00:00:00.000+00:00`.", "structured_data": {"key_parameters": [{"name": "sevenDaysAgo", "description": "A variable to store the date seven days before today.", "example": null}], "code_block": "let sevenDaysAgo = $today.minus({days: 7})"}, "keywords": ["n8n", "JavaScript", "Code node", "date manipulation", "minus"]}
{"content_type": "Code Example", "section_title": "Expressions (JavaScript)", "user_question": "How can I format a date to DD/MM/YYYY using n8n expressions?", "concise_answer": "To format a date to DD/MM/YYYY using n8n expressions, you can use the expression `{{$today.minus({days: 7}).toLocaleString()}}`. This will convert the date to a human-readable format.", "structured_data": {"key_parameters": [{"name": "toLocaleString", "description": "A method to convert a date to a human-readable string format.", "example": null}], "code_block": "{{$today.minus({days: 7}).toLocaleString()}}"}, "keywords": ["n8n", "date formatting", "expressions", "JavaScript", "toLocaleString"]}
{"content_type": "Code Example", "section_title": "Code node (JavaScript)", "user_question": "How can I format a date to a long format using n8n's Code node?", "concise_answer": "In n8n's Code node, you can format a date to a long format using the code `let readableSevenDaysAgo = $today.minus({days: 7}).toLocaleString({month: 'long', day: 'numeric', year: 'numeric'})`. This will return the date in a format like '16 June 2019'.", "structured_data": {"key_parameters": [{"name": "toLocaleString", "description": "A method to convert a date to a human-readable string format with specified options.", "example": "{month: 'long', day: 'numeric', year: 'numeric'}"}], "code_block": "let readableSevenDaysAgo = $today.minus({days: 7}).toLocaleString({month: 'long', day: 'numeric', year: 'numeric'})"}, "keywords": ["n8n", "date formatting", "Code node", "JavaScript", "toLocaleString"]}
{"content_type": "Code Example", "section_title": "Expressions (JavaScript)", "user_question": "How can I calculate the number of months between two dates using n8n expressions?", "concise_answer": "To calculate the number of months between two dates using n8n expressions, you can use the expression `{{DateTime.fromISO('2019-06-23').diff(DateTime.fromISO('2019-05-23'), 'months').toObject()}}`. This will return an object with the number of months.", "structured_data": {"key_parameters": [{"name": "diff", "description": "A method to calculate the difference between two dates.", "example": "('2019-06-23', '2019-05-23', 'months')"}], "code_block": "{{DateTime.fromISO('2019-06-23').diff(DateTime.fromISO('2019-05-23'), 'months').toObject()}}"}, "keywords": ["n8n", "date difference", "expressions", "JavaScript", "diff"]}
{"content_type": "Code Example", "section_title": "Expressions (JavaScript)", "user_question": "How can I create a countdown to Christmas using n8n expressions?", "concise_answer": "To create a countdown to Christmas using n8n expressions, you can use the expression `{{\"There are \" + $today.diff(DateTime.fromISO($today.year + '-12-25'), 'days').toObject().days.toString().substring(1) + \" days to Christmas!\"}}`. This will output the number of days remaining to Christmas.", "structured_data": {"key_parameters": [{"name": "diff", "description": "A method to calculate the difference between two dates.", "example": "($today, DateTime.fromISO($today.year + '-12-25'), 'days')"}], "code_block": "{{\"There are \" + $today.diff(DateTime.fromISO($today.year + '-12-25'), 'days').toObject().days.toString().substring(1) + \" days to Christmas!\"}}"}, "keywords": ["n8n", "countdown", "expressions", "JavaScript", "Christmas"]}
{"content_type": "Code Example", "section_title": "Code node (JavaScript)", "user_question": "How can I calculate the number of days until Christmas using JavaScript in n8n?", "concise_answer": "You can calculate the number of days until Christmas by using n8n's custom `$today` variable and Luxon's DateTime functions. The code constructs a string that outputs the number of days until Christmas.", "structured_data": {"key_parameters": [{"name": "$today.diff()", "description": "Calculates the difference in days between today and Christmas.", "example": null}, {"name": "DateTime.fromISO()", "description": "Converts a date string to a Luxon DateTime object.", "example": "$today.year + '-12-25'"}, {"name": "toObject().days", "description": "Extracts the number of days from the DateTime difference object.", "example": null}], "code_block": "let daysToChristmas = \"There are \" + $today.diff(DateTime.fromISO($today.year + '-12-25'), 'days').toObject().days.toString().substring(1) + \" days to Christmas!\";"}, "keywords": ["JavaScript", "n8n", "days to Christmas", "Luxon", "DateTime"]}
{"content_type": "Node Reference", "section_title": "Getting items", "user_question": "How can I access all items from a node in n8n using JavaScript?", "concise_answer": "In n8n, you can access all items from a node using the `.all()` method. This method can be called on a node to retrieve all items from the current or specified run.", "structured_data": {"key_parameters": [{"name": ".all()", "description": "Retrieves all items from the specified node and run.", "example": "$(\"IF\").all()"}, {"name": "branchIndex", "description": "Optional parameter to specify the branch index.", "example": "0"}, {"name": "runIndex", "description": "Optional parameter to specify the run index.", "example": "$runIndex"}], "code_block": "// Returns all the items of the given node and current run\nlet allItems = $(\"IF\").all();\n\n// Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of its most recent run)\nlet allItems = $(\"IF\").all();\n\n// Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of the same run as current node)\nlet allItems = $(\"IF\").all(0, $runIndex);\n\n// Returns all items the node \"IF\" outputs (index: 1 which is Output \"false\" of run 0 which is the first run)\nlet allItems = $(\"IF\").all(1, 0);"}, "keywords": ["n8n", "JavaScript", "node items", "all method", "data retrieval"]}
{"content_type": "Code Example", "section_title": "Accessing item data", "user_question": "How can I access and log all items output by a previous node in n8n using Python?", "concise_answer": "To access and log all items output by a previous node in n8n using Python, you can use the following code snippet. It retrieves all items from a specified node and logs their data.", "structured_data": {"key_parameters": null, "code_block": "previousNodeData = _(\"<node-name>\").all();\nfor item in previousNodeData:\n    itemDict = item.json.to_py()\n    print(itemDict)"}, "keywords": ["n8n", "Python", "access items", "log data", "previous node"]}
{"content_type": "Node Reference", "section_title": "execution", "user_question": "What is the unique ID of the current workflow execution in n8n?", "concise_answer": "The unique ID of the current workflow execution in n8n can be accessed using the 'execution.id' property.", "structured_data": {"key_parameters": [{"name": "execution.id", "description": "Contains the unique ID of the current workflow execution.", "example": null}], "code_block": "let executionId = $execution.id;\nexecutionId = _execution.id"}, "keywords": ["n8n", "execution ID", "workflow", "unique ID", "current execution"]}
{"content_type": "Node Reference", "section_title": "execution", "user_question": "How can I set and access custom execution data in n8n?", "concise_answer": "In n8n, you can set and access custom execution data using the 'execution.customData' object. This allows you to store and retrieve key-value pairs during the execution of a workflow.", "structured_data": {"key_parameters": [{"name": "execution.customData", "description": "Allows setting and accessing custom execution data as key-value pairs.", "example": null}], "code_block": "// JavaScript\n$execution.customData.set(\"key\", \"value\");\n$execution.customData.setAll({\"key1\": \"value1\", \"key2\": \"value2\"});\nvar customData = $execution.customData.getAll();\nvar customData = $execution.customData.get(\"key\");\n\n// Python\n_execution.customData.set(\"key\", \"value\");\n_execution.customData.setAll({\"key1\": \"value1\", \"key2\": \"value2\"});\ncustomData = _execution.customData.getAll();\ncustomData = _execution.customData.get(\"key\");"}, "keywords": ["n8n", "custom data", "execution data", "set data", "access data"]}
{"content_type": "General Concept", "section_title": "getWorkflowStaticData(type)", "user_question": "What is static workflow data in n8n and how can it be used?", "concise_answer": "Static workflow data in n8n allows you to save small pieces of data directly in the workflow, which can be accessed globally or by specific nodes. This data persists across workflow executions and can be used to store information like timestamps.", "structured_data": {"key_parameters": [{"name": "getWorkflowStaticData(type)", "description": "Gives access to the static workflow data, which can be global or node-specific.", "example": null}], "code_block": "// JavaScript\nconst workflowStaticData = $getWorkflowStaticData('global');\nconst lastExecution = workflowStaticData.lastExecution;\nworkflowStaticData.lastExecution = new Date().getTime();\ndelete workflowStaticData.lastExecution;\n\n// Python\nworkflowStaticData = _getWorkflowStaticData('global')"}, "keywords": ["n8n", "static data", "workflow data", "global data", "node data"]}
{"content_type": "Code Example", "section_title": "Delete data", "user_question": "How can I delete the last execution data in n8n using Python?", "concise_answer": "To delete the last execution data in n8n using Python, you can access the global workflow static data and use the 'delete' operation on the 'lastExecution' field.", "structured_data": {"key_parameters": [{"name": "workflowStaticData", "description": "The global workflow static data object.", "example": "workflowStaticData = _getWorkflowStaticData('global')"}, {"name": "lastExecution", "description": "The field representing the last execution time.", "example": "workflowStaticData.lastExecution"}], "code_block": "# Get the global workflow static data\nworkflowStaticData = _getWorkflowStaticData('global')\n\n# Access its data\nlastExecution = workflowStaticData.lastExecution\n\n# Update its data\nworkflowStaticData.lastExecution = new Date().getTime()\n\n# Delete data\ndelete workflowStaticData.lastExecution"}, "keywords": ["n8n", "Python", "delete data", "workflowStaticData", "lastExecution"]}
{"content_type": "Code Example", "section_title": "Example with node data", "user_question": "How can I manage node static data in n8n using JavaScript?", "concise_answer": "To manage node static data in n8n using JavaScript, you can retrieve, update, and delete the 'lastExecution' field using the node's static data object.", "structured_data": {"key_parameters": [{"name": "nodeStaticData", "description": "The static data object for a specific node.", "example": "const nodeStaticData = $getWorkflowStaticData('node');"}, {"name": "lastExecution", "description": "The field representing the last execution time.", "example": "nodeStaticData.lastExecution"}], "code_block": "// Get the static data of the node\nconst nodeStaticData = $getWorkflowStaticData('node');\n\n// Access its data\nconst lastExecution = nodeStaticData.lastExecution;\n\n// Update its data\nnodeStaticData.lastExecution = new Date().getTime();\n\n// Delete data\ndelete nodeStaticData.lastExecution;"}, "keywords": ["n8n", "JavaScript", "nodeStaticData", "lastExecution", "manage data"]}
{"content_type": "How-To Guide", "section_title": "Retrieve linked items from earlier in the workflow", "user_question": "How can I retrieve linked items from earlier nodes in an n8n workflow?", "concise_answer": "To retrieve linked items from earlier nodes in an n8n workflow, use the 'itemMatching' method with the current node input index. This allows you to access data from previous nodes.", "structured_data": {"key_parameters": [{"name": "itemMatching", "description": "Method to retrieve linked items from earlier nodes.", "example": "('<node-name>').itemMatching(currentNodeinputIndex)"}], "code_block": "for(let i=0; i<$input.all().length; i++) {\n  $input.all()[i].json.restoreEmail = $('Customer Datastore (n8n training)').itemMatching(i).json.email;\n}\nreturn $input.all();"}, "keywords": ["n8n", "itemMatching", "linked items", "workflow", "retrieve data"]}
{"content_type": "Node Reference", "section_title": "vars", "user_question": "What are 'vars' in n8n and how can I use them?", "concise_answer": "'vars' in n8n are read-only variables for the active environment, available on Self-hosted Enterprise and Pro and Enterprise Cloud plans. You can access them using 'vars', but they must be set through the UI.", "structured_data": {"key_parameters": [{"name": "vars", "description": "Contains all variables for the active environment, read-only.", "example": "vars"}], "code_block": null}, "keywords": ["n8n", "vars", "environment variables", "read-only", "enterprise"]}
{"content_type": "General Concept", "section_title": "Variables in n8n", "user_question": "How can I access variables in n8n?", "concise_answer": "In n8n, you can access variables using the 'vars' object for user-created variables and 'env' for environment configuration variables. These are part of the Environments feature. Note that 'vars' is read-only and must be set using the UI.", "structured_data": {"key_parameters": [{"name": "vars", "description": "Access user-created variables.", "example": "$vars.<variable-name>"}, {"name": "env", "description": "Access configuration environment variables.", "example": null}], "code_block": null}, "keywords": ["variables", "n8n", "environment", "vars", "env"]}
{"content_type": "How-To Guide", "section_title": "Using console.log() or print() in the Code node", "user_question": "How can I use console.log() or print() in the n8n Code node?", "concise_answer": "You can use console.log() in JavaScript or print() in Python within the Code node to output information to the browser console, which is useful for debugging. Ensure your Code node is set to the correct language.", "structured_data": {"key_parameters": null, "code_block": "js\nlet a = \"apple\";\nconsole.log(a);\n\npython\na = \"apple\"\nprint(a)"}, "keywords": ["console.log", "print", "Code node", "debugging", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Handling an output of [object Object]", "user_question": "What should I do if the console displays [object Object] in n8n?", "concise_answer": "If you see [object Object] in the console, check the data type and convert it if necessary. For JsProxy objects, use the to_py() method to convert them to native Python objects.", "structured_data": {"key_parameters": [{"name": "JsProxy", "description": "A class type that needs conversion to native Python objects.", "example": "<class 'pyodide.ffi.JsProxy'>"}], "code_block": "python\npreviousNodeData = _(\"<node-name>\").all();\nfor item in previousNodeData:\n    itemDict = item.json.to_py()\n    print(itemDict)"}, "keywords": ["[object Object]", "JsProxy", "conversion", "n8n", "Python"]}
{"content_type": "How-To Guide", "section_title": "Get the binary data buffer", "user_question": "How do I access the binary data buffer in n8n?", "concise_answer": "Use the getBinaryDataBuffer() function to access the binary data buffer in n8n. This function is not available in Python. Avoid using older methods like directly accessing the buffer with expressions.", "structured_data": {"key_parameters": [{"name": "itemIndex", "description": "The index of the item in the input data.", "example": "0"}, {"name": "binaryPropertyName", "description": "The name of the binary property, default is 'data'.", "example": "'data'"}], "code_block": "js\nlet binaryDataBufferItem = await this.helpers.getBinaryDataBuffer(0, 'data');"}, "keywords": ["binary data", "getBinaryDataBuffer", "n8n", "buffer", "JavaScript"]}
{"content_type": "How-To Guide", "section_title": "Get number of items returned by the previous node", "user_question": "How can I get the number of items returned by the previous node in n8n?", "concise_answer": "To get the number of items returned by the previous node in n8n, you can use a code snippet in the Code node. The JavaScript example checks if the first item is empty and returns the count of items.", "structured_data": {"key_parameters": null, "code_block": "if (Object.keys(items[0].json).length === 0) {\nreturn [\n    {\n        json: {\n            results: 0,\n        }\n    }\n]\n}\nreturn [\n    {\n        json: {\n            results: items.length,\n        }\n    }\n];"}, "keywords": ["n8n", "Code node", "JavaScript", "item count", "workflow"]}
{"content_type": "How-To Guide", "section_title": "Check incoming data", "user_question": "How can I check if a variable from the previous node is empty in n8n?", "concise_answer": "In n8n, you can check if a variable from the previous node is empty using a ternary operator in a JavaScript expression. If the variable is empty, you can return a default string like 'not found'.", "structured_data": {"key_parameters": null, "code_block": "{{$json[\"variable_name\"]? $json[\"variable_name\"] :\"not found\"}}"}, "keywords": ["n8n", "check variable", "ternary operator", "JavaScript", "workflow"]}
{"content_type": "How-To Guide", "section_title": "Expressions common issues", "user_question": "What should I do if I encounter the 'JSON Output' in item 0 contains invalid JSON error in n8n?", "concise_answer": "This error occurs when the JSON mode is used without providing a valid JSON object. To resolve it, ensure your JSON is valid by using a JSON validator and check that your JSON object doesn't reference undefined input data.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "JSON error", "invalid JSON", "workflow", "troubleshooting"]}
{"content_type": "How-To Guide", "section_title": "Expressions common issues", "user_question": "How can I troubleshoot the 'Can't get data for expression' error in n8n?", "concise_answer": "This error occurs when n8n can't retrieve data referenced by an expression, often because the preceding node hasn't been executed. To troubleshoot, ensure the node is executed before using its data, and test the workflow up to the named node.", "structured_data": {"key_parameters": null, "code_block": "javascript $(\"<node-name>\").isExecuted"}, "keywords": ["n8n", "expression error", "data retrieval", "workflow", "troubleshooting"]}
{"content_type": "Code Example", "section_title": "Invalid syntax", "user_question": "What causes an invalid syntax error in n8n expressions?", "concise_answer": "An invalid syntax error occurs when an expression in n8n has a syntax mistake. For example, a trailing period in a JSON expression can cause this error. To resolve it, ensure your expression syntax is correct.", "structured_data": {"key_parameters": null, "code_block": "{ \"my_field_1\": \"value\", \"my_field_2\": {{ $('If').item.json. }} }"}, "keywords": ["invalid syntax", "expression error", "syntax mistake", "n8n", "JSON"]}
{"content_type": "How-To Guide", "section_title": "Pagination in the HTTP Request node", "user_question": "How can I enable pagination in the HTTP Request node in n8n?", "concise_answer": "To enable pagination in the HTTP Request node, select 'Add Option' and then 'Pagination'. Depending on the API, you can use different modes like 'Response Contains Next URL' or 'Update a Parameter in Each Request'. Adjust the settings based on the API's response structure.", "structured_data": {"key_parameters": [{"name": "Pagination Mode", "description": "Determines how pagination is handled, such as using a URL from the response or updating a parameter.", "example": "Response Contains Next URL"}, {"name": "Next URL", "description": "An expression to set the URL for the next page.", "example": "{{ $response.body['next-page'] }}"}, {"name": "Type", "description": "Specifies whether to use Query or Body for pagination parameters.", "example": "Query"}, {"name": "Name", "description": "The name of the query or body parameter used for pagination.", "example": "page"}, {"name": "Value", "description": "An expression to calculate the next page number.", "example": "{{ $pageCount + 1 }}"}], "code_block": null}, "keywords": ["pagination", "HTTP Request node", "n8n", "API", "next page"]}
{"content_type": "Node Reference", "section_title": "Select Send Query Parameters", "user_question": "How do I set query parameters in an n8n node?", "concise_answer": "To set query parameters in an n8n node, go to the main node parameters and select 'Send Query Parameters'. Enter the name of the query parameter, such as 'limit', and specify its value, like the page size.", "structured_data": {"key_parameters": [{"name": "Name", "description": "The name of the query parameter, which depends on your API.", "example": "limit"}, {"name": "Value", "description": "The value for the query parameter, such as the page size.", "example": "10"}], "code_block": null}, "keywords": ["query parameters", "n8n node", "API", "limit", "page size"]}
{"content_type": "General Concept", "section_title": "Text courses", "user_question": "What are n8n text courses and who are they for?", "concise_answer": "n8n text courses are designed for individuals interested in automating tasks without advanced technical knowledge. They offer beginner and intermediate courses to help users build automation workflows using n8n.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "text courses", "automation", "beginner", "intermediate"]}
{"content_type": "How-To Guide", "section_title": "Navigating the Editor UI", "user_question": "How do I navigate the Editor UI in n8n?", "concise_answer": "To navigate the Editor UI in n8n, start by setting up n8n Cloud or self-hosting with Docker. Open the Editor UI in a browser, log in, and use the left-side panel to access core functionalities like workflows, projects, and settings.", "structured_data": {"key_parameters": [{"name": "Left-side panel", "description": "Contains core functionalities and settings for managing workflows.", "example": null}], "code_block": null}, "keywords": ["n8n", "Editor UI", "navigation", "workflows", "settings"]}
{"content_type": "Configuration", "section_title": "Getting started", "user_question": "What are the options for setting up n8n?", "concise_answer": "You can set up n8n using n8n Cloud, which is a hosted solution with a free trial, or self-host with Docker, which is recommended for technical users familiar with hosting services and the command line.", "structured_data": {"key_parameters": [{"name": "n8n Cloud", "description": "A hosted solution that doesn't require installation and includes a free trial.", "example": null}, {"name": "Self-host with Docker", "description": "An advanced option for technical users familiar with hosting services, Docker, and the command line.", "example": null}], "code_block": null}, "keywords": ["n8n", "setup", "n8n Cloud", "Docker", "self-host"]}
{"content_type": "General Concept", "section_title": "Top bar", "user_question": "What features are available in the top bar of the n8n Editor UI?", "concise_answer": "The top bar of the n8n Editor UI includes features such as naming your workflow, adding tags, toggling workflow activation, sharing workflows, saving, and viewing workflow history.", "structured_data": {"key_parameters": [{"name": "Workflow Name", "description": "The default name for a new workflow is 'My workflow', but it can be edited.", "example": "My workflow"}, {"name": "Add Tag", "description": "Tags help organize workflows by category or use case. They are optional.", "example": null}, {"name": "Inactive/active toggle", "description": "Activates or deactivates the current workflow. Workflows are deactivated by default.", "example": null}, {"name": "Share", "description": "Allows sharing and collaboration on workflows in Starter, Pro, and Enterprise plans.", "example": null}, {"name": "Save", "description": "Saves the current workflow.", "example": null}, {"name": "History", "description": "Allows viewing of previous versions of the workflow after saving.", "example": null}], "code_block": null}, "keywords": ["top bar", "workflow", "tags", "share", "save"]}
{"content_type": "General Concept", "section_title": "Canvas", "user_question": "What functionalities are available on the n8n canvas?", "concise_answer": "The n8n canvas provides functionalities such as zooming, executing workflows, adding nodes, and adding sticky notes. It also allows for moving the canvas around using different methods.", "structured_data": {"key_parameters": [{"name": "Zoom", "description": "Buttons to zoom the canvas to fit the screen, zoom in or out, and tidy up nodes.", "example": null}, {"name": "Execute workflow", "description": "Button to execute all nodes on the canvas in sequence after adding the first node.", "example": null}, {"name": "Add nodes", "description": "Button with a + sign to open the nodes panel.", "example": null}, {"name": "Add sticky note", "description": "Button with a note icon to add a sticky note to the canvas.", "example": null}, {"name": "Move canvas", "description": "Move the canvas using ctrl+left-button, middle-button, or two fingers on a touchpad.", "example": null}], "code_block": null}, "keywords": ["canvas", "zoom", "execute", "add nodes", "move"]}
{"content_type": "General Concept", "section_title": "Nodes", "user_question": "What are nodes in n8n and how are they classified?", "concise_answer": "Nodes in n8n are building blocks that perform functions like loading, processing, or sending data. They are classified into App or Action Nodes, Trigger Nodes, Core Nodes, and Cluster Nodes based on their functions.", "structured_data": {"key_parameters": [{"name": "App or Action Nodes", "description": "Nodes that add, remove, edit data, request/send external data, and trigger events.", "example": null}, {"name": "Trigger Nodes", "description": "Nodes that start a workflow and supply initial data.", "example": null}, {"name": "Core Nodes", "description": "Nodes providing functionality like logic, scheduling, or generic API calls.", "example": null}, {"name": "Cluster Nodes", "description": "Node groups that work together for AI workflows.", "example": null}], "code_block": null}, "keywords": ["nodes", "App Nodes", "Trigger Nodes", "Core Nodes", "Cluster Nodes"]}
{"content_type": "How-To Guide", "section_title": "Finding nodes", "user_question": "How can I find and add nodes in the n8n Editor UI?", "concise_answer": "To find and add nodes in the n8n Editor UI, open the nodes panel by clicking the + icon on the canvas or using the tab key. Use the search input to find specific nodes. Add nodes by selecting them in the panel, which will automatically connect them to the selected node on the canvas.", "structured_data": {"key_parameters": [{"name": "Open nodes panel", "description": "Click the + icon on the canvas or use the tab key.", "example": null}, {"name": "Search nodes", "description": "Use the search input at the top of the nodes panel.", "example": null}, {"name": "Add nodes", "description": "Select a node in the panel to automatically connect it to the selected node on the canvas.", "example": null}], "code_block": null}, "keywords": ["find nodes", "add nodes", "nodes panel", "search nodes"]}
{"content_type": "How-To Guide", "section_title": "Adding nodes", "user_question": "How can I add nodes to the canvas in n8n?", "concise_answer": "You can add nodes to the canvas in n8n by selecting the node from the nodes panel, which will automatically connect it to the selected node on the canvas, or by dragging and dropping the node from the nodes panel to the canvas.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["add nodes", "canvas", "n8n"]}
{"content_type": "General Concept", "section_title": "Node buttons", "user_question": "What do the icons on a node in n8n represent?", "concise_answer": "When you hover over a node in n8n, three icons appear: a Play icon to execute the node, a Power icon to deactivate/activate the node, and a Trash icon to delete the node. An ellipsis icon also appears, which opens a context menu with additional node options.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["node icons", "execute", "deactivate", "delete"]}
{"content_type": "How-To Guide", "section_title": "Building a Mini-workflow", "user_question": "How do I build a mini-workflow in n8n to get articles from Hacker News?", "concise_answer": "To build a mini-workflow in n8n to get articles from Hacker News, follow these steps: Add a Manual Trigger node, add the Hacker News node, configure the Hacker News node, execute the node, and save the workflow.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["mini-workflow", "Hacker News", "n8n"]}
{"content_type": "Node Reference", "section_title": "Configure the Hacker News node", "user_question": "How do I configure the Hacker News node in n8n?", "concise_answer": "To configure the Hacker News node in n8n, set the parameters as follows: Resource to 'All', Operation to 'Get Many', Limit to '10', and add an Additional Field with the Keyword 'automation'. These settings will fetch up to 10 articles related to automation.", "structured_data": {"key_parameters": [{"name": "Resource", "description": "Selects all data records (articles).", "example": "All"}, {"name": "Operation", "description": "Fetches all the selected articles.", "example": "Get Many"}, {"name": "Limit", "description": "Sets a limit to the number of results returned.", "example": "10"}, {"name": "Additional Fields > Keyword", "description": "Filters results to include only articles with the specified keyword.", "example": "automation"}], "code_block": null}, "keywords": ["Hacker News node", "configure", "parameters", "n8n"]}
{"content_type": "Node Reference", "section_title": "Hacker News Node Settings", "user_question": "How can I configure the display note for a node in n8n?", "concise_answer": "To display a note under a node in the n8n canvas, toggle the 'Display note in flow?' option to true in the node's settings.", "structured_data": {"key_parameters": [{"name": "Display note in flow?", "description": "This option will display the Note under the node in the canvas.", "example": "true"}], "code_block": null}, "keywords": ["n8n", "node settings", "display note", "canvas", "workflow"]}
{"content_type": "How-To Guide", "section_title": "Renaming a Node", "user_question": "What are the ways to rename a node in n8n?", "concise_answer": "You can rename a node in n8n by pressing F2 while selecting the node, double-clicking the node and renaming it in the node window, or right-clicking the node and selecting the Rename option.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "rename node", "workflow", "node window", "F2 key"]}
{"content_type": "General Concept", "section_title": "Node Executions", "user_question": "What does a node execution represent in n8n?", "concise_answer": "A node execution in n8n represents a run of that node to retrieve or process the specified data. Successful executions are marked with a green checkmark.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "node execution", "workflow", "data processing", "green checkmark"]}
{"content_type": "General Concept", "section_title": "Table vs JSON Views", "user_question": "What is the default view for node execution results in n8n?", "concise_answer": "The default view for node execution results in n8n is the Table view, which displays the requested data in a table format with rows as records and columns as attributes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "default view", "table view", "node execution", "data display"]}
{"content_type": "General Concept", "section_title": "Error in Nodes", "user_question": "What does a red warning icon on a node indicate in n8n?", "concise_answer": "A red warning icon on a node in n8n indicates that the node has errors, which might be due to missing or incorrect credentials or improperly configured parameters.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "node error", "red warning icon", "credentials", "parameters"]}
{"content_type": "How-To Guide", "section_title": "Saving the Workflow", "user_question": "How can I save a workflow in n8n?", "concise_answer": "To save a workflow in n8n, you can either press Ctrl + S (Cmd + S on Mac) or click the Save button in the top right corner of the Editor UI.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "save workflow", "Ctrl + S", "Cmd + S", "Editor UI"]}
{"content_type": "How-To Guide", "section_title": "Summary", "user_question": "How do I save my workflow in the n8n Editor UI?", "concise_answer": "To save your workflow in the n8n Editor UI, click the Save button located in the top right corner. If you see a grey 'Saved' text instead, it means your workflow was automatically saved.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "save workflow", "Editor UI", "automatic save", "workflow management"]}
{"content_type": "General Concept", "section_title": "Automating a (Real-world) Use Case", "user_question": "Who is Nathan and what does he need help with in n8n?", "concise_answer": "Nathan is an Analytics Manager at ABCorp who needs help automating his repetitive and error-prone task of weekly sales reporting. He wants to use n8n to automate collecting sales data, calculating totals, and notifying team members.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "automation", "sales reporting", "Nathan", "ABCorp"]}
{"content_type": "How-To Guide", "section_title": "Designing the Workflow", "user_question": "What are the steps to automate Nathan's sales reporting task using n8n?", "concise_answer": "To automate Nathan's sales reporting task using n8n, follow these steps: 1) Get data from the data warehouse, 2) Filter orders by status, 3) Calculate total value of Booked orders, 4) Notify team in Discord, 5) Insert Processing orders into Airtable, 6) Schedule the workflow to run every Monday morning.", "structured_data": {"key_parameters": [{"name": "order id", "description": "Unique identifier for each order.", "example": "12345"}, {"name": "order status", "description": "Current status of the order, either Processing or Booked.", "example": "Booked"}, {"name": "order value", "description": "Monetary value of the order.", "example": "1000"}, {"name": "employee name", "description": "Name of the employee associated with the order.", "example": "John Doe"}], "code_block": null}, "keywords": ["n8n", "workflow automation", "sales reporting", "Discord", "Airtable"]}
{"content_type": "How-To Guide", "section_title": "Building a Workflow", "user_question": "How do I build a workflow in n8n?", "concise_answer": "To build a workflow in n8n, follow these eight steps: get data from the data warehouse, insert data into Airtable, filter orders, set values for processing orders, calculate booked orders, notify the team, schedule the workflow, and activate and examine the workflow. Ensure you have the necessary credentials from the email received upon signing up for the course.", "structured_data": {"key_parameters": [{"name": "Credentials", "description": "Credentials needed to build the workflow, provided in the email upon course signup.", "example": null}], "code_block": null}, "keywords": ["workflow", "n8n", "build", "steps", "credentials"]}
{"content_type": "How-To Guide", "section_title": "Exporting and Importing Workflows", "user_question": "How can I export and import workflows in n8n?", "concise_answer": "You can export and import n8n workflows in three ways: via the Editor UI menu, the Editor UI canvas, or the command line. Use the menu to download or import workflows as JSON files. Use the canvas to copy and paste JSON directly. The command line offers a full list of commands for exporting and importing.", "structured_data": {"key_parameters": [{"name": "Export from Editor UI menu", "description": "Select the three dots in the upper right, then select Download to export the workflow as a JSON file.", "example": null}, {"name": "Import from Editor UI menu", "description": "Select the three dots in the upper right, then select Import from URL or Import from File.", "example": null}, {"name": "Export from Editor UI canvas", "description": "Select all nodes and use ctrl+c to copy the workflow JSON.", "example": null}, {"name": "Import from Editor UI canvas", "description": "Paste a copied workflow JSON directly into the canvas with ctrl+v.", "example": null}], "code_block": null}, "keywords": ["export", "import", "workflows", "n8n", "JSON"]}
{"content_type": "General Concept", "section_title": "Test your knowledge", "user_question": "How can I test my knowledge after completing the n8n Course Level 1?", "concise_answer": "After completing the n8n Course Level 1, you can test your knowledge by taking a quiz. The quiz covers theoretical concepts and workflows from the course. You need at least 80% correct answers to pass, and you can retake it as many times as needed without a time limit.", "structured_data": {"key_parameters": [{"name": "Passing Score", "description": "You need at least 80% correct answers to pass the quiz.", "example": "80%"}, {"name": "Retake Policy", "description": "You can take the quiz as many times as you want.", "example": null}, {"name": "Time Limit", "description": "There is no time limit on answering the quiz questions.", "example": null}], "code_block": null}, "keywords": ["quiz", "test", "knowledge", "n8n", "course"]}
{"content_type": "General Concept", "section_title": "Level one: Introduction", "user_question": "What is covered in the n8n Course Level 1?", "concise_answer": "The n8n Course Level 1 introduces fundamental concepts of n8n and low-code automation. It is designed for beginners and covers setting up n8n, navigating the Editor UI, structuring data, and configuring node parameters. The course emphasizes learning by doing, with practical workflow building exercises.", "structured_data": {"key_parameters": [{"name": "Target Audience", "description": "Beginners starting to use n8n or looking for help creating their first workflow.", "example": null}, {"name": "Learning Approach", "description": "Focus on practical exercises and step-by-step workflow building.", "example": null}], "code_block": null}, "keywords": ["n8n", "course", "introduction", "workflow", "automation"]}
{"content_type": "General Concept", "section_title": "Course Overview", "user_question": "What will I learn by the end of the n8n course?", "concise_answer": "By the end of the course, you will know how to set up n8n, navigate the Editor UI, structure data, configure node parameters, use conditional logic, schedule workflows, and share them. You will also build two workflows: one to get articles from Hacker News and another to process data from a data warehouse.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n course", "workflow building", "data processing"]}
{"content_type": "General Concept", "section_title": "Getting Started", "user_question": "What do I need to get started with the n8n course?", "concise_answer": "To start the n8n course, you need to set up n8n (either Cloud or self-hosted), obtain a course user ID, and optionally have basic JavaScript and API knowledge. Joining the n8n community forum is also recommended for additional benefits.", "structured_data": {"key_parameters": [{"name": "n8n set up", "description": "Choose between n8n Cloud or self-hosted version.", "example": "n8n Cloud"}, {"name": "Course user ID", "description": "Unique ID required for course participation.", "example": null}, {"name": "JavaScript and APIs knowledge", "description": "Helpful but not necessary for the course.", "example": null}, {"name": "n8n community forum account", "description": "Optional for receiving a profile badge and avatar.", "example": null}], "code_block": null}, "keywords": ["n8n setup", "course prerequisites", "community forum"]}
{"content_type": "General Concept", "section_title": "Course Duration", "user_question": "How long does it take to complete the n8n course?", "concise_answer": "The n8n course takes approximately two hours to complete. You can take breaks and resume at your convenience.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["course duration", "n8n course time", "learning pace"]}
{"content_type": "How-To Guide", "section_title": "Creating a New Workflow", "user_question": "How do I create a new workflow in n8n?", "concise_answer": "To create a new workflow in n8n, open the Editor UI and use the keyboard shortcut ++ctrl+alt+n++ or ++cmd+option+n++. Alternatively, navigate to Workflows in the left menu and select Add workflow. Name the workflow 'Nathan's workflow.'", "structured_data": {"key_parameters": [{"name": "Keyboard shortcut", "description": "Shortcut to create a new workflow.", "example": "++ctrl+alt+n++ or ++cmd+option+n++"}, {"name": "Workflow name", "description": "Name the new workflow.", "example": "Nathan's workflow"}], "code_block": null}, "keywords": ["create workflow", "n8n Editor UI", "workflow naming"]}
{"content_type": "Node Reference", "section_title": "HTTP Request Node", "user_question": "How do I use the HTTP Request node in n8n?", "concise_answer": "The HTTP Request node in n8n allows you to make HTTP requests to access data from apps and services without dedicated nodes. You need to configure the node with the appropriate parameters and credentials.", "structured_data": {"key_parameters": [{"name": "Node type", "description": "Type of node used to make HTTP requests.", "example": "HTTP Request node"}, {"name": "Credentials", "description": "Unique information required to access services.", "example": "ABCorp data warehouse API credentials"}], "code_block": null}, "keywords": ["HTTP Request node", "n8n nodes", "data access"]}
{"content_type": "Node Reference", "section_title": "Parameters of the HTTP Request node", "user_question": "How do I configure the HTTP Request node in n8n to retrieve data using GET method?", "concise_answer": "To configure the HTTP Request node, set the method to GET and provide the Dataset URL. Enable 'Send Headers' and specify 'unique_id' as the header name with the value you received via email. Use 'Generic Credential Type' for authentication and select 'Header Auth'. Create new credentials with the name and value provided in your email.", "structured_data": {"key_parameters": [{"name": "Method", "description": "The HTTP method to use for the request.", "example": "GET"}, {"name": "URL", "description": "The URL to send the request to.", "example": "Dataset URL from email"}, {"name": "Send Headers", "description": "Toggle to send headers with the request.", "example": "true"}, {"name": "Header Parameters > Name", "description": "The name of the header parameter.", "example": "unique_id"}, {"name": "Header Parameters > Value", "description": "The value of the header parameter.", "example": "Unique ID from email"}, {"name": "Authentication", "description": "The type of authentication to use.", "example": "Generic Credential Type"}, {"name": "Generic Auth Type", "description": "The specific authentication method to use.", "example": "Header Auth"}], "code_block": null}, "keywords": ["HTTP Request node", "GET method", "n8n", "authentication", "header parameters"]}
{"content_type": "How-To Guide", "section_title": "Inserting data into Airtable", "user_question": "How can I insert data from n8n into Airtable?", "concise_answer": "To insert data into Airtable, first create an Airtable account and set up a new base. Rename the default table to 'orders' and ensure the field names match the data from n8n. Adjust the field types accordingly, such as setting 'orderID' to a Number field type.", "structured_data": {"key_parameters": [{"name": "Airtable Base Name", "description": "The name of the new base in Airtable.", "example": "beginner course"}, {"name": "Table Name", "description": "The name of the table in Airtable.", "example": "orders"}, {"name": "Primary Field", "description": "The primary field in the Airtable table.", "example": "orderID"}, {"name": "Field Type", "description": "The type of the primary field.", "example": "Number"}], "code_block": null}, "keywords": ["Airtable", "n8n", "data insertion", "workflow", "table configuration"]}
{"content_type": "Configuration", "section_title": "Airtable Node Configuration", "user_question": "How do I configure an Airtable node in n8n to create records?", "concise_answer": "To configure an Airtable node in n8n for creating records, add the node to your workflow, select 'Create a record' from the Record Actions, and configure the necessary parameters such as credentials, resource, operation, base, and table. Ensure the mapping column mode is set to 'Map automatically'.", "structured_data": {"key_parameters": [{"name": "Credential to connect with", "description": "Select 'Create new credential' and use an access token to connect.", "example": "Access Token"}, {"name": "Resource", "description": "The type of resource to interact with in Airtable.", "example": "Record"}, {"name": "Operation", "description": "The action to perform on the resource.", "example": "Create"}, {"name": "Base", "description": "The Airtable base to interact with.", "example": "beginner course"}, {"name": "Table", "description": "The table within the base to create records in.", "example": "orders"}, {"name": "Mapping Column Mode", "description": "Determines how incoming data fields are mapped to Airtable columns.", "example": "Map automatically"}], "code_block": null}, "keywords": ["Airtable", "n8n", "node configuration", "create records", "workflow"]}
{"content_type": "How-To Guide", "section_title": "Filtering Orders", "user_question": "How can I filter orders in n8n based on their status before inserting them into Airtable?", "concise_answer": "To filter orders in n8n based on their status, use the If node. This node allows you to apply conditional logic to your workflow. For example, you can configure it to insert only 'processing' orders into Airtable and calculate the sum of 'booked' orders.", "structured_data": {"key_parameters": [{"name": "If node", "description": "A node used to apply conditional logic in workflows.", "example": null}, {"name": "orderStatus", "description": "The field used to determine the condition for filtering orders.", "example": "processing"}], "code_block": null}, "keywords": ["n8n", "filter orders", "If node", "conditional logic", "Airtable"]}
{"content_type": "Node Reference", "section_title": "Using the If Node", "user_question": "How do I configure the If node to filter orders based on their status?", "concise_answer": "To configure the If node to filter orders based on their status, use an expression to set the value1 placeholder to {{ $json.orderStatus }}. Then, select the operation 'String > is equal to' and set the value2 placeholder to 'processing'. This will filter orders with a 'processing' status to the True Branch output.", "structured_data": {"key_parameters": [{"name": "value1", "description": "Placeholder for the first value in the comparison, set using an expression.", "example": "{{ $json.orderStatus }}"}, {"name": "Operation", "description": "The operation to perform for comparison.", "example": "String > is equal to"}, {"name": "value2", "description": "Placeholder for the second value in the comparison.", "example": "processing"}], "code_block": null}, "keywords": ["If node", "expression", "filter orders", "order status", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Inserting Data into Airtable", "user_question": "How do I insert only processing orders into Airtable using n8n?", "concise_answer": "To insert only processing orders into Airtable, connect the Airtable node to the If node's true connector. Before executing, ensure your Airtable table is empty by deleting existing rows. Then, execute the Airtable node to insert the filtered data.", "structured_data": {"key_parameters": [{"name": "Airtable node connection", "description": "Connect the Airtable node to the If node's true connector to filter and insert only processing orders.", "example": null}], "code_block": null}, "keywords": ["Airtable", "insert data", "processing orders", "n8n", "workflow"]}
{"content_type": "General Concept", "section_title": "Expressions in n8n", "user_question": "What are expressions in n8n and how are they used?", "concise_answer": "Expressions in n8n are strings of characters and symbols that can be evaluated to get a value. They are used in nodes to refer to input data from other nodes, allowing dynamic data manipulation within workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["expressions", "n8n", "dynamic data", "workflows", "data manipulation"]}
{"content_type": "How-To Guide", "section_title": "Setting Values for Processing Orders", "user_question": "How can I select specific fields from processing orders before transferring them to Airtable?", "concise_answer": "Use the Edit Fields (Set) node to select and set specific fields, such as employeeName and orderID, from processing orders before transferring them to Airtable. This helps optimize data transfer and storage.", "structured_data": {"key_parameters": [{"name": "Edit Fields (Set) node", "description": "Node used to select and set specific data fields for transfer.", "example": null}], "code_block": null}, "keywords": ["Edit Fields node", "select fields", "Airtable", "processing orders", "n8n"]}
{"content_type": "Node Reference", "section_title": "Edit Fields (Set) Node", "user_question": "What is the purpose of the Edit Fields (Set) node in n8n?", "concise_answer": "The Edit Fields (Set) node in n8n is used to select and set data to be transferred from one node to another. It can set new data or overwrite existing data, which is crucial for workflows that require data manipulation before inserting values into spreadsheets or databases.", "structured_data": {"key_parameters": [{"name": "Mode", "description": "Determines how fields are mapped. Should be set to Manual Mapping for custom field selection.", "example": "Manual Mapping"}, {"name": "Include Other Input Fields", "description": "Specifies whether to include fields from the input that are not explicitly mapped.", "example": "false"}], "code_block": null}, "keywords": ["Edit Fields node", "data transfer", "n8n", "workflow", "data manipulation"]}
{"content_type": "How-To Guide", "section_title": "Add data to Airtable", "user_question": "How do I insert data into a new Airtable table using n8n?", "concise_answer": "To insert data into a new Airtable table using n8n, first create a new table in Airtable called 'processingOrders' with columns 'orderID' and 'employeeName'. Then, connect the Edit Fields node to the Airtable node and update the Airtable node configuration to point to the new table. Test the Airtable node to ensure it inserts records correctly.", "structured_data": {"key_parameters": [{"name": "Table Name", "description": "The name of the new table in Airtable where data will be inserted.", "example": "processingOrders"}, {"name": "Primary Field", "description": "The primary field in the new Airtable table, which should be a number.", "example": "orderID"}, {"name": "Secondary Field", "description": "A secondary field in the new Airtable table, which should be a single line text.", "example": "employeeName"}], "code_block": null}, "keywords": ["Airtable", "n8n", "data insertion", "workflow", "table configuration"]}
{"content_type": "How-To Guide", "section_title": "Calculating Booked Orders", "user_question": "How can I calculate the total number and value of booked orders in n8n?", "concise_answer": "To calculate the total number and value of booked orders in n8n, use the Code node to write custom JavaScript code. The Code node allows you to process data either once for all items or once for each item, enabling you to perform calculations and add functionality to your workflows.", "structured_data": {"key_parameters": [{"name": "Code Node Mode", "description": "Determines how the code is executed: either once for all items or once for each item.", "example": "Run Once for All Items"}], "code_block": null}, "keywords": ["Code node", "n8n", "booked orders", "JavaScript", "workflow calculation"]}
{"content_type": "General Concept", "section_title": "n8n Data Structure", "user_question": "How does n8n store data within its nodes?", "concise_answer": "n8n stores data within a nested JSON key. This property is required and can be set to anything from an empty object to arrays and deeply nested data. The Code node automatically wraps the data in a JSON object and parent array if it's missing.", "structured_data": {"key_parameters": [{"name": "nested json key", "description": "The key where n8n stores the actual data.", "example": "{}"}], "code_block": null}, "keywords": ["n8n", "data storage", "JSON", "nested data", "Code node"]}
{"content_type": "How-To Guide", "section_title": "Configure the Code node", "user_question": "How do I configure a Code node in n8n to calculate order totals?", "concise_answer": "To configure a Code node in n8n, connect it to the false branch of an If node. Set the mode to 'Run Once for All Items' and the language to 'JavaScript'. Use the provided JavaScript code to calculate the total number of booked orders and their sum.", "structured_data": {"key_parameters": [{"name": "Mode", "description": "Determines how the code is executed.", "example": "Run Once for All Items"}, {"name": "Language", "description": "The programming language used in the Code node.", "example": "JavaScript"}], "code_block": "let items = $input.all(); let totalBooked = items.length; let bookedSum = 0;\n\nfor (let i=0; i < items.length; i++) { bookedSum = bookedSum + items[i].json.orderPrice; }\n\nreturn [{ json: {totalBooked, bookedSum} }];"}, "keywords": ["n8n", "Code node", "JavaScript", "workflow", "order calculation"]}
{"content_type": "How-To Guide", "section_title": "Notifying the Team", "user_question": "How can I send a message to a Discord channel using n8n?", "concise_answer": "To send a message to a Discord channel using n8n, add a Discord node connected to the Code node. Configure the node by selecting 'Webhook' as the connection type, creating new credentials, and pasting the Webhook URL. Set the operation to 'Send a Message' and use the Expression Editor to format your message.", "structured_data": {"key_parameters": [{"name": "Connection Type", "description": "The method used to connect to Discord.", "example": "Webhook"}, {"name": "Operation", "description": "The action performed by the Discord node.", "example": "Send a Message"}], "code_block": "This week we've {{$json[\"totalBooked\"]}} booked orders with a total value of {{$json[\"bookedSum\"]}}. My Unique ID: {{ $('HTTP Request').params[\"headerParameters\"][\"parameters\"][0][\"value\"] }}"}, "keywords": ["n8n", "Discord", "message", "webhook", "notification"]}
{"content_type": "How-To Guide", "section_title": "Scheduling the Workflow", "user_question": "How can I schedule my n8n workflow to run automatically every Monday at 9 AM?", "concise_answer": "To schedule your n8n workflow to run automatically every Monday at 9 AM, use the Schedule Trigger node. Remove the Manual Trigger node and add a Schedule Trigger node. Configure it to trigger every week on Monday at 9 AM. Ensure the correct timezone is set for accurate scheduling.", "structured_data": {"key_parameters": [{"name": "Trigger Interval", "description": "Defines the frequency of the trigger.", "example": "Weeks"}, {"name": "Weeks Between Triggers", "description": "Specifies the number of weeks between each trigger.", "example": "1"}, {"name": "Trigger on weekdays", "description": "Selects the specific weekdays to trigger the workflow.", "example": "Monday"}, {"name": "Trigger at Hour", "description": "Sets the hour of the day when the trigger should activate.", "example": "9am"}, {"name": "Trigger at Minute", "description": "Sets the minute of the hour when the trigger should activate.", "example": "0"}], "code_block": null}, "keywords": ["n8n", "Schedule Trigger", "workflow automation", "automatic execution", "time scheduling"]}
{"content_type": "How-To Guide", "section_title": "Activating and Examining the Workflow", "user_question": "How do I activate my n8n workflow to ensure it runs automatically?", "concise_answer": "To activate your n8n workflow, toggle the Inactive switch to Activated in the top navigation of the Editor UI. This will ensure that the workflow runs automatically whenever a trigger node receives input or meets a condition.", "structured_data": {"key_parameters": [{"name": "Activation Toggle", "description": "Switches the workflow from inactive to active, allowing it to run automatically.", "example": "Activated"}], "code_block": null}, "keywords": ["n8n", "workflow activation", "automatic execution", "trigger node", "workflow settings"]}
{"content_type": "General Concept", "section_title": "Workflow Executions", "user_question": "What is a workflow execution in n8n and how can I view it?", "concise_answer": "A workflow execution in n8n represents a completed run of a workflow from start to finish. You can view executions for a specific workflow by switching to the Executions tab when the workflow is open on the canvas. To see the execution log for the entire n8n instance, select Overview and then the Executions tab in the main panel.", "structured_data": {"key_parameters": [{"name": "Name", "description": "The name of the workflow", "example": null}, {"name": "Started At", "description": "The date and time when the workflow started", "example": null}, {"name": "Status", "description": "The status of the workflow and the time it took to execute", "example": null}, {"name": "Execution ID", "description": "The ID of this workflow execution", "example": null}], "code_block": null}, "keywords": ["workflow execution", "execution log", "n8n", "workflow status", "execution ID"]}
{"content_type": "Configuration", "section_title": "Workflow Settings", "user_question": "How can I customize workflow settings in n8n?", "concise_answer": "You can customize your workflows and executions in n8n by accessing Workflow Settings. This is done by selecting the three dots in the upper right corner of the Editor UI when the workflow is open, then selecting Settings. Here, you can configure settings like Execution Order, Error Workflow, Timezone, and options for saving execution data.", "structured_data": {"key_parameters": [{"name": "Execution Order", "description": "Choose the execution logic for multi-branch workflows.", "example": "v1"}, {"name": "Error Workflow", "description": "A workflow to run if the current workflow fails.", "example": null}, {"name": "Timezone", "description": "The timezone to use in the current workflow.", "example": null}, {"name": "Save failed production executions", "description": "If n8n should save the Execution data of the workflow when it fails.", "example": "Default is to save"}, {"name": "Save successful production executions", "description": "If n8n should save the Execution data of the workflow when it succeeds.", "example": "Default is to save"}, {"name": "Save manual executions", "description": "If n8n should save executions started from the Editor UI.", "example": "Default is to save"}, {"name": "Save execution progress", "description": "If n8n should save the execution data of each node.", "example": "Default is to not save"}, {"name": "Timeout Workflow", "description": "Whether to cancel a workflow execution after a specific period of time.", "example": "Default is to not timeout"}], "code_block": null}, "keywords": ["workflow settings", "customize workflows", "n8n", "execution order", "error workflow"]}
{"content_type": "General Concept", "section_title": "Understanding the data structure", "user_question": "What is the data structure of n8n and how does it function?", "concise_answer": "In n8n, nodes function as an Extract, Transform, Load (ETL) tool. They allow you to access data from multiple sources, modify it, and pass it along to where it needs to be. This process is essential for transforming data and simulating node outputs.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["data structure", "n8n", "ETL", "nodes", "transform data"]}
{"content_type": "General Concept", "section_title": "Data Structure in n8n", "user_question": "What data structure does n8n use to transfer data between nodes?", "concise_answer": "In n8n, data is transferred between nodes as an array of JSON objects. Each node processes each item in this array individually.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "data structure", "array of objects", "JSON", "workflow"]}
{"content_type": "General Concept", "section_title": "Understanding Arrays and Objects", "user_question": "How are arrays and objects structured in n8n?", "concise_answer": "Arrays in n8n are lists of values, starting at index 0. Objects store key-value pairs, and an array of objects contains one or more objects. You can access object properties using dot notation.", "structured_data": {"key_parameters": null, "code_block": "var turtles = [ { name: 'Michelangelo', color: 'orange', }, { name: 'Donatello', color: 'purple', }, { name: 'Raphael', color: 'red', }, { name: 'Leonardo', color: 'blue', } ];"}, "keywords": ["arrays", "objects", "n8n", "dot notation", "key-value pairs"]}
{"content_type": "How-To Guide", "section_title": "Creating Data Sets with the Code Node", "user_question": "How can I create a data set in n8n using the Code node?", "concise_answer": "To create a data set in n8n, use the Code node to write JavaScript code that defines an array of objects. Each object should be wrapped in another object with the key 'json'.", "structured_data": {"key_parameters": [{"name": "json", "description": "Wraps each object in the array to conform to n8n's expected structure.", "example": "{ json: { apple: 'beets' } }"}], "code_block": "return [ { json: { apple: 'beets', } } ];"}, "keywords": ["Code node", "data set", "JavaScript", "n8n", "array of objects"]}
{"content_type": "Code Example", "section_title": "Exercise: Creating myContacts Array", "user_question": "Can you provide an example of creating a contacts array in n8n?", "concise_answer": "In the Code node, you can create an array of objects named 'myContacts' with properties 'name' and 'email'. The 'email' property can be further split into 'personal' and 'work'.", "structured_data": {"key_parameters": [{"name": "name", "description": "The name of the contact.", "example": "Alice"}, {"name": "email", "description": "The email addresses of the contact, split into personal and work.", "example": "{ personal: 'alice@home.com', work: 'alice@wonderland.org' }"}], "code_block": "var myContacts = [ { json: { name: 'Alice', email: { personal: 'alice@home.com', work: 'alice@wonderland.org' } } }, { json: { name: 'Bob', email: { personal: 'bob@mail.com', work: 'contact@thebuilder.com' } } } ]; return myContacts;"}, "keywords": ["Code node", "contacts array", "JavaScript", "n8n", "email properties"]}
{"content_type": "How-To Guide", "section_title": "Exercise", "user_question": "How do I add a new column to a dataset using the Code node in n8n?", "concise_answer": "To add a new column to a dataset using the Code node in n8n, connect a second Code node to the first one. In the new node, write JavaScript code to create a new column. For example, to add a 'workEmail' column, use the code: `let items = $input.all(); items[0].json.workEmail = items[0].json.email['work']; return items;`.", "structured_data": {"key_parameters": [{"name": "JavaScript Code", "description": "Code to add a new column to the dataset.", "example": "let items = $input.all(); items[0].json.workEmail = items[0].json.email['work']; return items;"}], "code_block": "let items = $input.all();\nitems[0].json.workEmail = items[0].json.email['work'];\nreturn items;"}, "keywords": ["Code node", "JavaScript", "n8n", "dataset", "workEmail"]}
{"content_type": "General Concept", "section_title": "Transforming data", "user_question": "What are common operations for data transformation in n8n?", "concise_answer": "In n8n, the two most common operations for data transformation are creating multiple items from one item and creating a single item from multiple items. This can be done using data transformation nodes like Split Out and Aggregate, or by writing JavaScript code in the Code node.", "structured_data": {"key_parameters": [{"name": "Split Out node", "description": "Separates a single data item containing a list into multiple items.", "example": null}, {"name": "Aggregate node", "description": "Groups separate items or portions of them into individual items.", "example": null}], "code_block": null}, "keywords": ["data transformation", "n8n", "Split Out node", "Aggregate node", "JavaScript"]}
{"content_type": "How-To Guide", "section_title": "Exercise", "user_question": "How do I use the HTTP Request node to get data from the PokéAPI in n8n?", "concise_answer": "To get data from the PokéAPI using the HTTP Request node in n8n, set the request method to GET and the URL to 'https://pokeapi.co/api/v2/pokemon'. No authentication is required.", "structured_data": {"key_parameters": [{"name": "Request Method", "description": "The HTTP method to use for the request.", "example": "GET"}, {"name": "URL", "description": "The endpoint to send the request to.", "example": "https://pokeapi.co/api/v2/pokemon"}, {"name": "Authentication", "description": "The authentication method required for the request.", "example": "None"}], "code_block": null}, "keywords": ["HTTP Request node", "PokéAPI", "GET request", "n8n", "API"]}
{"content_type": "How-To Guide", "section_title": "Exercise", "user_question": "How can I transform data from the PokéAPI using the Split Out node in n8n?", "concise_answer": "To transform data from the PokéAPI using the Split Out node in n8n, connect the Split Out node to the HTTP Request node and set the 'Field To Split Out' parameter to 'results'. This will separate the data in the 'results' field into multiple items.", "structured_data": {"key_parameters": [{"name": "Field To Split Out", "description": "The field in the data to split into multiple items.", "example": "results"}, {"name": "Include", "description": "Whether to include other fields in the output.", "example": "No Other Fields"}], "code_block": null}, "keywords": ["Split Out node", "data transformation", "n8n", "PokéAPI", "results field"]}
{"content_type": "How-To Guide", "section_title": "Exercise", "user_question": "How do I transform data from the PokéAPI using the Code node in n8n?", "concise_answer": "To transform data from the PokéAPI using the Code node in n8n, connect the Code node to the HTTP Request node and write JavaScript code to map the 'results' field into individual items. Use the code: `let items = $input.all(); return items[0].json.results.map(item => { return { json: item } });`.", "structured_data": {"key_parameters": [{"name": "JavaScript Code", "description": "Code to map the 'results' field into individual items.", "example": "let items = $input.all(); return items[0].json.results.map(item => { return { json: item } });"}], "code_block": "let items = $input.all();\nreturn items[0].json.results.map(item => {\n    return {\n        json: item\n    }\n});"}, "keywords": ["Code node", "JavaScript", "n8n", "PokéAPI", "data transformation"]}
{"content_type": "How-To Guide", "section_title": "HTML and XML data", "user_question": "How can I extract the title of the latest n8n blog post using n8n?", "concise_answer": "To extract the title of the latest n8n blog post, use the HTTP Request node to make a GET request to the URL https://blog.n8n.io/. Then, connect an HTML node and configure it to extract the title using the CSS selector '.post .item-title a'.", "structured_data": {"key_parameters": [{"name": "Authentication", "description": "The type of authentication to use for the HTTP request.", "example": "None"}, {"name": "Request Method", "description": "The HTTP method to use for the request.", "example": "GET"}, {"name": "URL", "description": "The URL to send the HTTP request to.", "example": "https://blog.n8n.io/"}, {"name": "Operation", "description": "The operation to perform with the HTML node.", "example": "Extract HTML Content"}, {"name": "Source Data", "description": "The format of the source data.", "example": "JSON"}, {"name": "JSON Property", "description": "The JSON property to extract data from.", "example": "data"}, {"name": "Key", "description": "The key to assign to the extracted value.", "example": "title"}, {"name": "CSS Selector", "description": "The CSS selector to use for extracting data.", "example": ".post .item-title a"}, {"name": "Return Value", "description": "The format of the returned value.", "example": "HTML"}], "code_block": null}, "keywords": ["HTML node", "web scraping", "CSS selector", "n8n blog", "HTTP Request node"]}
{"content_type": "How-To Guide", "section_title": "XML Exercise", "user_question": "How do I convert JSON data to XML using n8n?", "concise_answer": "To convert JSON data to XML in n8n, use an HTTP Request node to fetch the JSON data, then connect an XML node and set its mode to 'JSON to XML'. Specify the property name that contains the JSON data.", "structured_data": {"key_parameters": [{"name": "Authentication", "description": "The type of authentication to use for the HTTP request.", "example": "None"}, {"name": "Request Method", "description": "The HTTP method to use for the request.", "example": "GET"}, {"name": "URL", "description": "The URL to send the HTTP request to.", "example": "https://pokeapi.co/api/v2/pokemon"}, {"name": "Mode", "description": "The conversion mode for the XML node.", "example": "JSON to XML"}, {"name": "Property name", "description": "The name of the property containing the JSON data to convert.", "example": "data"}], "code_block": null}, "keywords": ["XML node", "JSON to XML", "n8n", "HTTP Request node", "data conversion"]}
{"content_type": "General Concept", "section_title": "Date, time, and interval data", "user_question": "What are the different date and time formats supported by n8n?", "concise_answer": "n8n supports various date and time formats including DATE (e.g., March 29 2022, 29-03-2022), TIME (e.g., 08:30:00, 8:30), DATETIME (e.g., 2022/03/29 08:30:00), TIMESTAMP (e.g., 1616108400), and YEAR (e.g., 2022).", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["date formats", "time formats", "n8n", "timestamp", "datetime"]}
{"content_type": "Node Reference", "section_title": "Date & Time Node", "user_question": "How can I convert date and time data to different formats in n8n?", "concise_answer": "In n8n, you can use the Date & Time node to convert date and time data to different formats and perform date calculations.", "structured_data": {"key_parameters": [{"name": "Mode", "description": "Select the operation to perform on the date, such as rounding.", "example": "Round Up"}, {"name": "To", "description": "Specify the target format or boundary for the operation.", "example": "End of Month"}, {"name": "Output Field Name", "description": "The name of the field where the result will be stored.", "example": "new-date"}], "code_block": null}, "keywords": ["Date & Time node", "convert date", "n8n", "date formats", "date calculations"]}
{"content_type": "Node Reference", "section_title": "Schedule Trigger Node", "user_question": "How do I schedule workflows to run at specific intervals in n8n?", "concise_answer": "Use the Schedule Trigger node in n8n to schedule workflows to run at specific times, intervals, or durations.", "structured_data": {"key_parameters": [{"name": "Trigger Interval", "description": "Defines the unit of time for the trigger interval.", "example": "Minutes"}, {"name": "Minutes Between Triggers", "description": "Specifies the number of minutes between each trigger.", "example": "30"}], "code_block": null}, "keywords": ["Schedule Trigger node", "workflow scheduling", "n8n", "interval", "trigger"]}
{"content_type": "Node Reference", "section_title": "Wait Node", "user_question": "How can I pause a workflow execution in n8n?", "concise_answer": "In n8n, use the Wait node to pause workflow execution. It can resume at a specific time, after a specified interval, or on a webhook call.", "structured_data": {"key_parameters": [{"name": "Resume", "description": "Defines the condition for resuming the workflow.", "example": "After Time interval"}, {"name": "Wait Amount", "description": "Specifies the amount of time to wait.", "example": "1.00"}, {"name": "Wait Unit", "description": "Defines the unit of time for the wait period.", "example": "Minutes"}], "code_block": null}, "keywords": ["Wait node", "pause workflow", "n8n", "workflow execution", "delay"]}
{"content_type": "How-To Guide", "section_title": "Date Exercise", "user_question": "How do I build a workflow in n8n to add days to a date and conditionally wait?", "concise_answer": "To build a workflow in n8n that adds five days to a date and waits if the result is after 1959, use the Customer Datastore node to get data, the Date & Time node to manipulate dates, the If node to check conditions, and the Wait node to pause execution.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["workflow", "n8n", "date manipulation", "conditional wait", "Customer Datastore"]}
{"content_type": "How-To Guide", "section_title": "Node Configuration", "user_question": "How can I check the configuration of each node in n8n?", "concise_answer": "To check the configuration of each node, you can copy the JSON code of the workflow and either paste it into the Editor UI or save it as a file to import into a new workflow.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["node configuration", "workflow JSON", "import workflow", "export workflow", "n8n"]}
{"content_type": "Node Reference", "section_title": "When clicking \"Execute workflow\"", "user_question": "What is the purpose of the 'When clicking \"Execute workflow\"' node in n8n?", "concise_answer": "The 'When clicking \"Execute workflow\"' node in n8n is a manual trigger node that initiates the execution of a workflow when the user manually clicks the execute button.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["manual trigger", "execute workflow", "n8n node"]}
{"content_type": "Node Reference", "section_title": "Customer Datastore (n8n training)", "user_question": "How does the 'Customer Datastore (n8n training)' node function in n8n?", "concise_answer": "The 'Customer Datastore (n8n training)' node retrieves all people from a datastore, configured to return all entries.", "structured_data": {"key_parameters": [{"name": "operation", "description": "The operation to perform on the datastore.", "example": "getAllPeople"}, {"name": "returnAll", "description": "Whether to return all entries from the datastore.", "example": "true"}], "code_block": null}, "keywords": ["customer datastore", "n8n training", "getAllPeople"]}
{"content_type": "Node Reference", "section_title": "Date & Time", "user_question": "What operations can the 'Date & Time' node perform in n8n?", "concise_answer": "The 'Date & Time' node can perform operations like rounding dates. In this instance, it rounds up the 'created' date and outputs it to a new field.", "structured_data": {"key_parameters": [{"name": "operation", "description": "The operation to perform on the date.", "example": "roundDate"}, {"name": "date", "description": "The date to be processed.", "example": "={{ $json.created }}"}, {"name": "mode", "description": "The mode of rounding the date.", "example": "roundUp"}, {"name": "outputFieldName", "description": "The name of the field to output the result.", "example": "new-date"}, {"name": "includeInputFields", "description": "Whether to include input fields in the output.", "example": "true"}], "code_block": null}, "keywords": ["date & time", "roundDate", "n8n node"]}
{"content_type": "Node Reference", "section_title": "If", "user_question": "How does the 'If' node work in n8n?", "concise_answer": "The 'If' node evaluates conditions to determine the flow of execution. It checks if the 'new-date' is after a specified date using strict type validation.", "structured_data": {"key_parameters": [{"name": "conditions", "description": "The conditions to evaluate.", "example": "leftValue: '={{ $json['new-date'] }}', rightValue: '1960-01-01T00:00:00'"}, {"name": "operator", "description": "The operator used for comparison.", "example": "dateTime, operation: after"}, {"name": "typeValidation", "description": "The type of validation to apply.", "example": "strict"}], "code_block": null}, "keywords": ["if node", "conditions", "n8n"]}
{"content_type": "Node Reference", "section_title": "Wait", "user_question": "What is the function of the 'Wait' node in n8n?", "concise_answer": "The 'Wait' node pauses the workflow for a specified duration, in this case, 1 minute.", "structured_data": {"key_parameters": [{"name": "amount", "description": "The amount of time to wait.", "example": "1"}, {"name": "unit", "description": "The unit of time for the wait duration.", "example": "minutes"}], "code_block": null}, "keywords": ["wait node", "pause workflow", "n8n"]}
{"content_type": "Node Reference", "section_title": "Edit Fields", "user_question": "How does the 'Edit Fields' node modify data in n8n?", "concise_answer": "The 'Edit Fields' node assigns new values to fields, such as setting 'outputValue' to the 'new-date', and can include other fields in the output.", "structured_data": {"key_parameters": [{"name": "assignments", "description": "The assignments to apply to fields.", "example": "outputValue: '={{ $json['new-date'] }}'"}, {"name": "includeOtherFields", "description": "Whether to include other fields in the output.", "example": "true"}], "code_block": null}, "keywords": ["edit fields", "assignments", "n8n"]}
{"content_type": "Node Reference", "section_title": "Schedule Trigger", "user_question": "What does the 'Schedule Trigger' node do in n8n?", "concise_answer": "The 'Schedule Trigger' node initiates workflows based on a defined schedule, such as every 30 minutes.", "structured_data": {"key_parameters": [{"name": "interval", "description": "The schedule interval for triggering the workflow.", "example": "minutesInterval: 30"}], "code_block": null}, "keywords": ["schedule trigger", "workflow schedule", "n8n"]}
{"content_type": "Node Reference", "section_title": "Wait Node", "user_question": "What is the purpose of the Wait node in n8n?", "concise_answer": "The Wait node in n8n is used to pause the execution of a workflow until a specified condition is met or a certain amount of time has passed.", "structured_data": {"key_parameters": [{"name": "node", "description": "The name of the node.", "example": "Wait"}, {"name": "type", "description": "The type of node, indicating its role in the workflow.", "example": "main"}, {"name": "index", "description": "The position of the node in the workflow sequence.", "example": "0"}], "code_block": null}, "keywords": ["Wait node", "n8n", "workflow", "pause", "condition"]}
{"content_type": "Node Reference", "section_title": "Schedule Trigger Node", "user_question": "What is the Schedule Trigger node used for in n8n?", "concise_answer": "The Schedule Trigger node in n8n is used to start a workflow at specific times or intervals, based on a defined schedule.", "structured_data": {"key_parameters": [{"name": "node", "description": "The name of the node.", "example": "Schedule Trigger"}, {"name": "type", "description": "The type of node, indicating its role in the workflow.", "example": "main"}, {"name": "index", "description": "The position of the node in the workflow sequence.", "example": "0"}], "code_block": null}, "keywords": ["Schedule Trigger", "n8n", "workflow", "schedule", "trigger"]}
{"content_type": "General Concept", "section_title": "Binary data", "user_question": "How can I process binary data in n8n?", "concise_answer": "In n8n, you can process binary data using specific nodes designed for handling files. These include the HTTP Request node for sending and receiving files, the Read/Write Files from Disk node for local file operations, the Convert to File node for converting input data to a file, and the Extract From File node for converting binary data to JSON.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["binary data", "n8n", "file processing", "HTTP Request", "Extract From File"]}
{"content_type": "Node Reference", "section_title": "Binary data", "user_question": "What nodes can I use in n8n to handle binary files?", "concise_answer": "To handle binary files in n8n, you can use the following nodes: HTTP Request, Read/Write Files from Disk, Convert to File, and Extract From File. Each node serves a specific purpose, such as requesting files from web resources or converting binary data to JSON.", "structured_data": {"key_parameters": [{"name": "HTTP Request", "description": "Request and send files from/to web resources and APIs.", "example": null}, {"name": "Read/Write Files from Disk", "description": "Read and write files from/to the machine where n8n is running.", "example": null}, {"name": "Convert to File", "description": "Take input data and output it as a file.", "example": null}, {"name": "Extract From File", "description": "Get data from a binary format and convert it to JSON.", "example": null}], "code_block": null}, "keywords": ["binary files", "n8n nodes", "file handling", "HTTP Request", "Extract From File"]}
{"content_type": "Configuration", "section_title": "Binary data", "user_question": "How do I configure the file path for reading or writing binary files in n8n?", "concise_answer": "To read or write a binary file in n8n, specify the file path in the node's parameters. For reading, use the File(s) Selector parameter, and for writing, use the File Path and Name parameter. The file path format varies depending on how n8n is run: use '~/my_file.json' for npm and '/tmp/my_file.json' for n8n cloud or Docker.", "structured_data": {"key_parameters": [{"name": "File(s) Selector", "description": "Parameter for specifying the file path for reading operations.", "example": null}, {"name": "File Path and Name", "description": "Parameter for specifying the file path for writing operations.", "example": null}], "code_block": null}, "keywords": ["file path", "binary files", "n8n configuration", "read files", "write files"]}
{"content_type": "How-To Guide", "section_title": "Binary Exercise 1", "user_question": "How can I convert a PDF file to JSON in n8n?", "concise_answer": "To convert a PDF file to JSON in n8n, first make an HTTP request to obtain the PDF file. Then, use the Extract From File node to convert the file from binary format to JSON. This process allows you to handle and manipulate the data within n8n workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["PDF to JSON", "n8n", "binary conversion", "HTTP Request", "Extract From File"]}
{"content_type": "Configuration", "section_title": "Binary to JSON", "user_question": "How can I configure a workflow to convert binary data to JSON in n8n?", "concise_answer": "To configure a workflow for converting binary data to JSON in n8n, you can use the provided JSON workflow code. This code includes nodes for triggering the workflow, making an HTTP request, and extracting data from a file.", "structured_data": {"key_parameters": [{"name": "url", "description": "The URL from which to fetch the PDF file.", "example": "https://media.kaspersky.com/pdf/Kaspersky_Lab_Whitepaper_Anti_blocker.pdf"}, {"name": "operation", "description": "The operation to perform on the file.", "example": "pdf"}], "code_block": "{\n    \"name\": \"Binary to JSON\",\n    \"nodes\": [\n        {\n        \"parameters\": {},\n        \"id\": \"78639a25-b69a-4b9c-84e0-69e045bed1a3\",\n        \"name\": \"When clicking \\\"Execute Workflow\\\"\",\n        \"type\": \"n8n-nodes-base.manualTrigger\",\n        \"typeVersion\": 1,\n        \"position\": [\n            480,\n            520\n        ]\n        },\n        {\n        \"parameters\": {\n            \"url\": \"https://media.kaspersky.com/pdf/Kaspersky_Lab_Whitepaper_Anti_blocker.pdf\",\n            \"options\": {}\n        },\n        \"id\": \"a11310df-1287-4e9a-b993-baa6bd4265a6\",\n        \"name\": \"HTTP Request\",\n        \"type\": \"n8n-nodes-base.httpRequest\",\n        \"typeVersion\": 4.1,\n        \"position\": [\n            700,\n            520\n        ]\n        },\n        {\n        \"parameters\": {\n            \"operation\": \"pdf\",\n            \"options\": {}\n        },\n        \"id\": \"88697b6b-fb02-4c3d-a715-750d60413e9f\",\n        \"name\": \"Extract From File\",\n        \"type\": \"n8n-nodes-base.extractFromFile\",\n        \"typeVersion\": 1,\n        \"position\": [\n            920,\n            520\n        ]\n        }\n    ],\n    \"pinData\": {},\n    \"connections\": {\n        \"When clicking \\\"Execute Workflow\\\"\": {\n        \"main\": [\n            [\n            {\n                \"node\": \"HTTP Request\",\n                \"type\": \"main\",\n                \"index\": 0\n            }\n            ]\n        ]\n        },\n        \"HTTP Request\": {\n        \"main\": [\n            [\n            {\n                \"node\": \"Extract From File\",\n                \"type\": \"main\",\n                \"index\": 0\n            }\n            ]\n        ]\n        }\n    }\n}"}, "keywords": ["n8n", "workflow", "binary to JSON", "HTTP request", "file extraction"]}
{"content_type": "How-To Guide", "section_title": "Binary Exercise 2", "user_question": "How do I convert JSON data to binary and save it to disk in n8n?", "concise_answer": "To convert JSON data to binary and save it to disk in n8n, make an HTTP request to the Poetry DB API, convert the JSON to binary using the Convert to File node, and then write the binary data to disk using the Read/Write Files From Disk node.", "structured_data": {"key_parameters": [{"name": "API URL", "description": "The URL to make the HTTP request to.", "example": "https://poetrydb.org/random/1"}], "code_block": null}, "keywords": ["n8n", "JSON to binary", "HTTP request", "file conversion", "disk write"]}
{"content_type": "Code Example", "section_title": "JSON to file and Read-Write", "user_question": "How can I configure a workflow in n8n to perform HTTP requests and handle files?", "concise_answer": "To configure a workflow in n8n that performs HTTP requests and handles files, you can use a series of nodes including 'HTTP Request', 'Convert to File', and 'Read/Write Files from Disk'. The workflow can be set up by copying the provided JSON code into your Editor UI.", "structured_data": {"key_parameters": [{"name": "url", "description": "The URL to send the HTTP request to.", "example": "https://poetrydb.org/random/1"}, {"name": "operation", "description": "The operation to perform on the file, such as converting to JSON or writing to disk.", "example": "toJson"}, {"name": "fileName", "description": "The name of the file to write to or read from.", "example": "/tmp/poetrydb.json"}], "code_block": "{\n    \"name\": \"JSON to file and Read-Write\",\n    \"nodes\": [\n        {\n        \"parameters\": {},\n        \"id\": \"78639a25-b69a-4b9c-84e0-69e045bed1a3\",\n        \"name\": \"When clicking \\\"Execute Workflow\\\"\",\n        \"type\": \"n8n-nodes-base.manualTrigger\",\n        \"typeVersion\": 1,\n        \"position\": [\n            480,\n            520\n        ]\n        },\n        {\n        \"parameters\": {\n            \"url\": \"https://poetrydb.org/random/1\",\n            \"options\": {}\n        },\n        \"id\": \"a11310df-1287-4e9a-b993-baa6bd4265a6\",\n        \"name\": \"HTTP Request\",\n        \"type\": \"n8n-nodes-base.httpRequest\",\n        \"typeVersion\": 4.1,\n        \"position\": [\n            680,\n            520\n        ]\n        },\n        {\n        \"parameters\": {\n            \"operation\": \"toJson\",\n            \"options\": {}\n        },\n        \"id\": \"06be18f6-f193-48e2-a8d9-35f4779d8324\",\n        \"name\": \"Convert to File\",\n        \"type\": \"n8n-nodes-base.convertToFile\",\n        \"typeVersion\": 1,\n        \"position\": [\n            880,\n            520\n        ]\n        },\n        {\n        \"parameters\": {\n            \"operation\": \"write\",\n            \"fileName\": \"/tmp/poetrydb.json\",\n            \"options\": {}\n        },\n        \"id\": \"f2048e5d-fa8f-4708-b15a-d07de359f2e5\",\n        \"name\": \"Read/Write Files from Disk\",\n        \"type\": \"n8n-nodes-base.readWriteFile\",\n        \"typeVersion\": 1,\n        \"position\": [\n            1080,\n            520\n        ]\n        },\n        {\n        \"parameters\": {\n            \"fileSelector\": \"={{ $json.fileName }}\",\n            \"options\": {}\n        },\n        \"id\": \"d630906c-09d4-49f4-ba14-416c0f4de1c8\",\n        \"name\": \"Read/Write Files from Disk1\",\n        \"type\": \"n8n-nodes-base.readWriteFile\",\n        \"typeVersion\": 1,\n        \"position\": [\n            1280,\n            520\n        ]\n        }\n    ],\n    \"pinData\": {},\n    \"connections\": {\n        \"When clicking \\\"Execute Workflow\\\"\": {\n        \"main\": [\n            [\n            {\n                \"node\": \"HTTP Request\",\n                \"type\": \"main\",\n                \"index\": 0\n            }\n            ]\n        ]\n        },\n        \"HTTP Request\": {\n        \"main\": [\n            [\n            {\n                \"node\": \"Convert to File\",\n                \"type\": \"main\",\n                \"index\": 0\n            }\n            ]\n        ]\n        },\n        \"Convert to File\": {\n        \"main\": [\n            [\n            {\n                \"node\": \"Read/Write Files from Disk\",\n                \"type\": \"main\",\n                \"index\": 0\n            }\n            ]\n        ]\n        },\n        \"Read/Write Files from Disk\": {\n        \"main\": [\n            [\n            {\n                \"node\": \"Read/Write Files from Disk1\",\n                \"type\": \"main\",\n                \"index\": 0\n            }\n            ]\n        ]\n        }\n    }\n}"}, "keywords": ["n8n", "workflow", "HTTP request", "file handling", "JSON"]}
{"content_type": "How-To Guide", "section_title": "Merging and splitting data", "user_question": "How can I merge data from different sources in n8n?", "concise_answer": "In n8n, you can merge data from different sources by creating one data set from multiple sources or synchronizing data between systems. This process can involve removing duplicates or updating data across systems.", "structured_data": {"key_parameters": [{"name": "merge", "description": "Combining data from multiple sources into one dataset.", "example": null}, {"name": "synchronize", "description": "Keeping data consistent across multiple systems, potentially involving duplicate removal or updates.", "example": null}], "code_block": null}, "keywords": ["n8n", "data merge", "data synchronization", "data processing", "systems integration"]}
{"content_type": "General Concept", "section_title": "Two-Way Sync", "user_question": "What is a two-way sync in data synchronization?", "concise_answer": "A two-way sync ensures that data is synchronized in both directions between two systems. When information changes in one system, it automatically updates in the other system as well.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["two-way sync", "data synchronization", "automatic update"]}
{"content_type": "Node Reference", "section_title": "Merge Node", "user_question": "How can I merge data from two different nodes in n8n?", "concise_answer": "In n8n, you can use the Merge node to combine data from two different nodes. It offers several merging options such as Append, Combine, Merge by Fields, Merge by Position, Combine all possible combinations, and Choose Branch.", "structured_data": {"key_parameters": [{"name": "Merge by Fields", "description": "Requires input fields to match on, ensuring identical values between data sources for proper data matching.", "example": null}, {"name": "Input 1 Field and Input 2 Field", "description": "Fields in the Merge node that need to match for merging data.", "example": null}], "code_block": null}, "keywords": ["Merge node", "data merging", "n8n"]}
{"content_type": "Configuration", "section_title": "Property Input in Dot Notation", "user_question": "How do I reference nested values in the Merge node parameters?", "concise_answer": "To reference nested values in the Merge node parameters Input 1 Field and Input 2 Field, you need to enter the property key in dot-notation format as text.", "structured_data": {"key_parameters": [{"name": "Dot-notation format", "description": "A method to reference nested values in parameters by using a dot-separated string.", "example": "parent.child"}], "code_block": null}, "keywords": ["dot notation", "nested values", "Merge node"]}
{"content_type": "How-To Guide", "section_title": "Merge Exercise", "user_question": "How can I build a workflow to merge data from a Customer Datastore node and a Code node in n8n?", "concise_answer": "To build a workflow that merges data from a Customer Datastore node and a Code node, add a Merge node that takes Input 1 from the Customer Datastore node and Input 2 from the Code node. In the Customer Datastore node, run the operation Get All People. In the Code node, create an array of objects with properties like name, language, and country. Use different merge options in the Merge node to see the results.", "structured_data": {"key_parameters": [{"name": "Customer Datastore node", "description": "Node to retrieve data from the customer database.", "example": "Get All People"}, {"name": "Code node", "description": "Node to create an array of objects with specific properties.", "example": "name, language, country"}], "code_block": null}, "keywords": ["workflow", "merge exercise", "n8n"]}
{"content_type": "Configuration", "section_title": "Node Configuration Example", "user_question": "How can I configure nodes in an n8n workflow using JSON?", "concise_answer": "To configure nodes in an n8n workflow, you can use JSON to define the parameters, node types, and connections. This JSON can be pasted into the Editor UI to set up the workflow.", "structured_data": {"key_parameters": [{"name": "mode", "description": "Specifies the mode of operation for the node.", "example": "combine"}, {"name": "mergeByFields", "description": "Defines the fields by which to merge data.", "example": "{\"values\": [{\"field1\": \"name\", \"field2\": \"name\"}]}"}, {"name": "operation", "description": "Specifies the operation to perform.", "example": "getAllPeople"}, {"name": "jsCode", "description": "JavaScript code to execute within the node.", "example": "return [{ 'name': 'Jay Gatsby', 'language': 'English', 'country': { 'code': 'US', 'name': 'United States' } }];"}], "code_block": "{\n\"meta\": {\n    \"templateCredsSetupCompleted\": true,\n    \"instanceId\": \"cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7\"\n},\n\"nodes\": [\n    {\n    \"parameters\": {\n        \"mode\": \"combine\",\n        \"mergeByFields\": {\n        \"values\": [\n            {\n            \"field1\": \"name\",\n            \"field2\": \"name\"\n            }\n        ]\n        },\n        \"options\": {}\n    },\n    \"id\": \"578365f3-26dd-4fa6-9858-f0a5fdfc413b\",\n    \"name\": \"Merge\",\n    \"type\": \"n8n-nodes-base.merge\",\n    \"typeVersion\": 2.1,\n    \"position\": [\n        720,\n        580\n    ]\n    },\n    {\n    \"parameters\": {},\n    \"id\": \"71aa5aad-afdf-4f8a-bca0-34450eee8acc\",\n    \"name\": \"When clicking \\\"Execute workflow\\\"\",\n    \"type\": \"n8n-nodes-base.manualTrigger\",\n    \"typeVersion\": 1,\n    \"position\": [\n        260,\n        560\n    ]\n    },\n    {\n    \"parameters\": {\n        \"operation\": \"getAllPeople\"\n    },\n    \"id\": \"497174fe-3cab-4160-8103-78b44efd038d\",\n    \"name\": \"Customer Datastore (n8n training)\",\n    \"type\": \"n8n-nodes-base.n8nTrainingCustomerDatastore\",\n    \"typeVersion\": 1,\n    \"position\": [\n        500,\n        460\n    ]\n    },\n    {\n    \"parameters\": {\n        \"jsCode\": \"return [\\n  {\\n    'name': 'Jay Gatsby',\\n    'language': 'English',\\n    'country': {\\n      'code': 'US',\\n      'name': 'United States'\\n    }\\n    \\n  }\\n  \\n];\"\n    },\n    \"id\": \"387e8a1e-e796-4f05-8e75-7ce25c786c5f\",\n    \"name\": \"Code\",\n    \"type\": \"n8n-nodes-base.code\",\n    \"typeVersion\": 2,\n    \"position\": [\n        500,\n        720\n    ]\n    }\n],\n\"connections\": {\n    \"When clicking \\\"Execute workflow\\\"\": {\n    \"main\": [\n        [\n        {\n            \"node\": \"Customer Datastore (n8n training)\",\n            \"type\": \"main\",\n            \"index\": 0\n        },\n        {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n        }\n        ]\n    ]\n    },\n    \"Customer Datastore (n8n training)\": {\n    \"main\": [\n        [\n        {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 0\n        }\n        ]\n    ]\n    },\n    \"Code\": {\n    \"main\": [\n        [\n        {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 1\n        }\n        ]\n    ]\n    }\n},\n\"pinData\": {}\n}"}, "keywords": ["n8n", "workflow", "JSON", "node configuration", "example"]}
{"content_type": "How-To Guide", "section_title": "Looping", "user_question": "How do I create loops in an n8n workflow?", "concise_answer": "To create loops in an n8n workflow, connect the output of one node to the input of a previous node and use an If node to determine when to stop the loop. This is necessary for nodes and operations that require explicit looping.", "structured_data": {"key_parameters": [{"name": "If node", "description": "Used to check conditions and determine when to stop the loop.", "example": null}], "code_block": null}, "keywords": ["n8n", "loop", "workflow", "If node", "iteration"]}
{"content_type": "How-To Guide", "section_title": "Splitting data in batches", "user_question": "How can I split data into batches in n8n?", "concise_answer": "To split data into batches in n8n, use the Loop Over Items node. This node divides input data into specified batch sizes and processes each batch in iterations, which is useful for handling large data volumes or avoiding API rate limits.", "structured_data": {"key_parameters": [{"name": "Loop Over Items node", "description": "Splits input data into batches of a specified size for processing.", "example": null}], "code_block": null}, "keywords": ["n8n", "batch processing", "Loop Over Items", "data splitting", "workflow"]}
{"content_type": "How-To Guide", "section_title": "Loop/Batch Exercise", "user_question": "How can I build a workflow to read RSS feeds from Medium and dev.to using n8n?", "concise_answer": "To build a workflow that reads RSS feeds from Medium and dev.to, you need to create a workflow with three nodes: a Code node to return the RSS feed URLs, a Loop Over Items node to iterate over the URLs, and an RSS Read node to process each URL. The Code node should be set to 'Run Once for All Items' and use JavaScript to define the URLs. The Loop Over Items node should have a Batch Size of 1, and the RSS Read node should use the URL from the Code node.", "structured_data": {"key_parameters": [{"name": "Mode", "description": "Defines how the code is executed in the Code node.", "example": "Run Once for All Items"}, {"name": "Language", "description": "Specifies the programming language used in the Code node.", "example": "JavaScript"}, {"name": "Batch Size", "description": "Determines the number of items processed at a time in the Loop Over Items node.", "example": "1"}, {"name": "URL", "description": "The URL to be processed by the RSS Read node, taken from the Code node.", "example": "{{ $json.url }}"}], "code_block": "let urls = [\n    {\n        json: {\n        url: 'https://medium.com/feed/n8n-io'\n        }\n    },\n    {\n    json: {\n        url: 'https://dev.to/feed/n8n'\n        } \n    }\n]\nreturn urls;"}, "keywords": ["n8n", "RSS feed", "workflow", "Code node", "Loop Over Items"]}
{"content_type": "Configuration", "section_title": "To check the configuration of the nodes", "user_question": "How can I check the configuration of nodes in an n8n workflow?", "concise_answer": "To check the configuration of nodes in an n8n workflow, you can copy the JSON workflow code and paste it into your Editor UI. This allows you to view and edit the node configurations directly.", "structured_data": {"key_parameters": null, "code_block": "{\n\"meta\": {\n    \"templateCredsSetupCompleted\": true,\n    \"instanceId\": \"cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7\"\n},\n\"nodes\": [\n    {\n    \"parameters\": {},\n    \"id\": \"ed8dc090-ae8c-4db6-a93b-0fa873015c25\",\n    \"name\": \"When clicking \\\"Execute workflow\\\"\",\n    \"type\": \"n8n-nodes-base.manualTrigger\",\n    \"typeVersion\": 1,\n    \"position\": [\n        460,\n        460\n    ]\n    },\n    {\n    \"parameters\": {\n        \"jsCode\": \"let urls = [\\n  {\\n    json: {\\n      url: 'https://medium.com/feed/n8n-io'\\n    }\\n  },\\n  {\\n   json: {\\n     url: 'https://dev.to/feed/n8n'\\n   } \\n  }\\n]\\n\\nreturn urls;\"\n    },\n    \"id\": \"1df2a9bf-f970-4e04-b906-92dbbc9e8d3a\",\n    \"name\": \"Code\",\n    \"type\": \"n8n-nodes-base.code\",\n    \"typeVersion\": 2,\n    \"position\": [\n        680,\n        460\n    ]\n    },\n    {\n    \"parameters\": {\n        \"options\": {}\n    },\n    \"id\": \"3cce249a-0eab-42e2-90e3-dbdf3684e012\",\n    \"name\": \"Loop Over Items\",\n    \"type\": \"n8n-nodes-base.splitInBatches\",\n    \"typeVersion\": 3,\n    \"position\": [\n        900,\n        460\n    ]\n    },\n    {\n    \"parameters\": {\n        \"url\": \"={{ $json.url }}\",\n        \"options\": {}\n    },\n    \"id\": \"50e1c1dc-9a5d-42d3-b7c0-accc31636aa6\",\n    \"name\": \"RSS Read\",\n    \"type\": \"n8n-nodes-base.rssFeedRead\",\n    \"typeVersion\": 1,\n    \"position\": [\n        1120,\n        460\n    ]\n    }\n],\n\"connections\": {\n    \"When clicking \\\"Execute workflow\\\"\": {\n    \"main\": [\n        [\n        {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n        }\n        ]\n    ]\n    },\n    \"Code\": {\n    \"main\": [\n        [\n        {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n        }\n        ]\n    ]\n    },\n    \"Loop Over Items\": {\n    \"main\": [\n        null,\n        [\n        {\n            \"node\": \"RSS Read\",\n            \"type\": \"main\",\n            \"index\": 0\n        }\n        ]\n    ]\n    },\n    \"RSS Read\": {\n    \"main\": [\n        [\n        {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n        }\n        ]\n    ]\n    }\n},\n\"pinData\": {}\n}"}, "keywords": ["n8n", "workflow", "configuration", "nodes", "JSON"]}
{"content_type": "How-To Guide", "section_title": "Dealing with errors in workflows", "user_question": "How can I troubleshoot errors in n8n workflows?", "concise_answer": "To troubleshoot errors in n8n workflows, check the Executions log to see what went wrong. This log provides details like execution time, status, and running time. You can view the workflow in read-only mode to identify where the error occurred. Additionally, create an Error Workflow with an Error Trigger node to handle failed executions and send notifications.", "structured_data": {"key_parameters": [{"name": "Executions log", "description": "A log that shows the latest execution time, status, mode, and running time of workflows.", "example": null}, {"name": "Error Workflow", "description": "A separate workflow that executes if the main workflow fails, using the Error Trigger node.", "example": null}], "code_block": null}, "keywords": ["n8n", "workflow", "errors", "troubleshooting", "Executions log"]}
{"content_type": "How-To Guide", "section_title": "Creating an Error Workflow", "user_question": "How do I create an Error Workflow in n8n?", "concise_answer": "To create an Error Workflow in n8n, start by creating a new workflow and add an Error Trigger node. Connect this node to a communication platform node like Slack or Email. In the workflow you want to monitor, set this new workflow as the Error Workflow in the Workflow Settings. Ensure the workflow runs automatically to trigger the error workflow.", "structured_data": {"key_parameters": [{"name": "Error Trigger node", "description": "A node that triggers the workflow when an error occurs in another workflow.", "example": null}, {"name": "Communication platform node", "description": "A node to send notifications, such as Slack, Discord, or Email.", "example": "Slack"}], "code_block": null}, "keywords": ["Error Workflow", "Error Trigger", "n8n", "Slack", "Notification"]}
{"content_type": "General Concept", "section_title": "Error Workflows", "user_question": "What is an Error Workflow in n8n?", "concise_answer": "An Error Workflow in n8n is a special type of workflow that is triggered when another workflow encounters an error. It uses an Error Trigger node and can be set to notify users via various communication platforms. It does not need to be activated manually and runs automatically when an error occurs.", "structured_data": {"key_parameters": [{"name": "Error Trigger node", "description": "Triggers the workflow when an error occurs in another workflow.", "example": null}], "code_block": null}, "keywords": ["Error Workflow", "Error Trigger", "n8n", "Automatic", "Notification"]}
{"content_type": "Code Example", "section_title": "Exercise", "user_question": "Can you provide an example of an Error Workflow configuration in n8n?", "concise_answer": "Here is a JSON configuration example of an Error Workflow in n8n, which includes an Error Trigger node connected to a Slack node for notifications.", "structured_data": {"key_parameters": null, "code_block": "{\n    \"nodes\": [\n        {\n            \"parameters\": {},\n            \"name\": \"Error Trigger\",\n            \"type\": \"n8n-nodes-base.errorTrigger\",\n            \"typeVersion\": 1,\n            \"position\": [\n                720,\n                -380\n            ]\n        },\n        {\n            \"parameters\": {\n                \"channel\": \"channelname\",\n                \"text\": \"=This workflow {{$node[\\\"Error Trigger\\\"].json[\\\"workflow\\\"][\\\"name\\\"]}}failed.\\nHave a look at it here: {{$node[\\\"Error Trigger\\\"].json[\\\"execution\\\"][\\\"url\\\"]}}\",\n                \"attachments\": [],\n                \"otherOptions\": {}\n            },\n            \"name\": \"Slack\",\n            \"type\": \"n8n-nodes-base.slack\",\n            \"position\": [\n                900,\n                -380\n            ],\n            \"typeVersion\": 1,\n            \"credentials\": {\n                \"slackApi\": {\n                    \"id\": \"17\",\n                    \"name\": \"slack_credentials\"\n                }\n            }\n        }\n    ],\n    \"connections\": {\n        \"Error Trigger\": {\n            \"main\": [\n                [\n                    {\n                        \"node\": \"Slack\",\n                        \"type\": \"main\",\n                        \"index\": 0\n                    }\n                ]\n            ]\n        }\n    }\n}"}, "keywords": ["Error Workflow", "n8n", "JSON", "Configuration", "Slack"]}
{"content_type": "General Concept", "section_title": "Throwing exceptions in workflows", "user_question": "How can I throw exceptions in n8n workflows?", "concise_answer": "In n8n, you can throw exceptions by using the Stop and Error node. This node allows you to specify an error type, such as a custom error message or an error object. It is useful for verifying data and returning custom error messages, especially when dealing with third-party services.", "structured_data": {"key_parameters": [{"name": "Stop and Error node", "description": "A node that throws an error, allowing you to specify a custom error message or error object.", "example": null}], "code_block": null}, "keywords": ["Stop and Error node", "Exception", "n8n", "Error Handling", "Custom Error"]}
{"content_type": "General Concept", "section_title": "Data Issues with Third-Party Services", "user_question": "What are common data issues when working with third-party services in n8n?", "concise_answer": "When working with data from third-party services in n8n, you may encounter issues such as wrongly formatted JSON output, data with incorrect types, missing values, and errors from remote servers. These issues might not cause immediate workflow failures but can lead to problems later, making it difficult to trace the source of the error. It's advisable to handle these errors as soon as they are detected.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["third-party services", "data issues", "JSON", "error handling", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Test your knowledge", "user_question": "How can I test my knowledge after completing the n8n Course Level 2?", "concise_answer": "After completing the n8n Course Level 2, you can test your knowledge by taking a quiz that covers theoretical concepts and workflows from the course. You need at least 80% correct answers to pass, and you can retake the quiz as many times as needed without a time limit.", "structured_data": {"key_parameters": [{"name": "Passing Score", "description": "The minimum percentage of correct answers required to pass the quiz.", "example": "80%"}, {"name": "Retake Limit", "description": "The number of times you can retake the quiz.", "example": "Unlimited"}, {"name": "Time Limit", "description": "The time limit for completing the quiz.", "example": "None"}], "code_block": null}, "keywords": ["n8n course", "quiz", "knowledge test", "workflow automation", "course completion"]}
{"content_type": "General Concept", "section_title": "Level two: Introduction", "user_question": "What will I learn in the n8n Course Level 2?", "concise_answer": "In the n8n Course Level 2, you will learn to work with data structures, process various data types, merge data from different sources, use functions and JavaScript in the Code node, and handle error workflows. The course includes practical exercises and building a business workflow.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n course", "data processing", "JavaScript", "workflow automation", "error handling"]}
{"content_type": "General Concept", "section_title": "Level two: Introduction", "user_question": "What are the prerequisites for starting the n8n Course Level 2?", "concise_answer": "To start the n8n Course Level 2, you need to have n8n set up (either self-hosted or n8n Cloud), a user ID, basic n8n skills (preferably after completing Level 1), and a basic understanding of JavaScript.", "structured_data": {"key_parameters": [{"name": "n8n Setup", "description": "The environment required to follow the course.", "example": "Self-hosted or n8n Cloud"}, {"name": "User ID", "description": "A unique identifier required for course participation.", "example": "Sign up to get your ID"}, {"name": "Basic Skills", "description": "The foundational skills needed before taking the course.", "example": "Basic n8n and JavaScript skills"}], "code_block": null}, "keywords": ["n8n course", "prerequisites", "JavaScript", "setup", "user ID"]}
{"content_type": "How-To Guide", "section_title": "Automating a business workflow", "user_question": "How can I automate a business workflow to generate sales and order reports?", "concise_answer": "To automate the generation of sales and order reports, you need to design workflows that gather and combine data from various sources, sort and format the data, write binary files, and send notifications via email and Discord. This involves creating three separate workflows: one for merging company data with external information, one for generating the reports, and one for monitoring errors.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["workflow automation", "sales reports", "order reports", "data integration", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Workflow prerequisites", "user_question": "What are the prerequisites for building workflows in n8n?", "concise_answer": "To build workflows in n8n, you need accounts and credentials for Airtable, Google (for Gmail access), and Discord (including a webhook URL). These are necessary to access and integrate data from these platforms into your workflows.", "structured_data": {"key_parameters": [{"name": "Airtable account", "description": "Account and credentials to access Airtable.", "example": null}, {"name": "Google account", "description": "Account and credentials to access Gmail.", "example": null}, {"name": "Discord account", "description": "Account and webhook URL for Discord notifications.", "example": null}], "code_block": null}, "keywords": ["workflow prerequisites", "Airtable", "Google", "Discord", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Workflow 1: Merging data", "user_question": "How do I merge customer data from Airtable with country data using n8n?", "concise_answer": "To merge customer data from Airtable with country data, use the Airtable node to list customer data, the HTTP Request node to fetch country data from the REST Countries API, and the Merge node to combine them by country name. Finally, update the Airtable table with the region and subregion data from the API.", "structured_data": {"key_parameters": [{"name": "Airtable node", "description": "Lists data from the Airtable table named customers.", "example": null}, {"name": "HTTP Request node", "description": "Fetches data from the REST Countries API.", "example": "https://restcountries.com/v3.1/all"}, {"name": "Merge node", "description": "Merges data from Airtable and the Countries API by country name.", "example": null}, {"name": "Airtable update", "description": "Updates the fields region and subregion in Airtable.", "example": null}], "code_block": null}, "keywords": ["data merging", "Airtable", "REST Countries API", "n8n", "customer data"]}
{"content_type": "How-To Guide", "section_title": "Workflow 2: Generating reports", "user_question": "How can I generate reports by merging data from different sources in n8n?", "concise_answer": "To generate reports by merging data from different sources, use the HTTP Request node to fetch company data, transform binary data, generate files, and send notifications. The workflow is divided into parts, starting with configuring the HTTP Request node to get data from a specified API endpoint.", "structured_data": {"key_parameters": [{"name": "HTTP Request node", "description": "Fetches data from the API endpoint storing company data.", "example": null}, {"name": "Method", "description": "HTTP method to use for the request.", "example": "Get"}, {"name": "URL", "description": "The Dataset URL received via email.", "example": null}, {"name": "Authentication", "description": "Type of authentication used for the request.", "example": "Generic Credential Type"}, {"name": "Generic Auth Type", "description": "Specific type of generic authentication.", "example": "Header Auth"}], "code_block": null}, "keywords": ["report generation", "data merging", "HTTP Request node", "n8n", "API integration"]}
{"content_type": "How-To Guide", "section_title": "Method: Get", "user_question": "How do I configure a GET request with header authentication in n8n?", "concise_answer": "To configure a GET request with header authentication in n8n, use the URL provided in your course email. Set the authentication type to 'Header Auth' and input the credentials you received. Ensure 'Send Headers' is toggled to true and specify headers using the fields below, such as 'unique_id' with the value from your email.", "structured_data": {"key_parameters": [{"name": "URL", "description": "The Dataset URL received in the course email.", "example": null}, {"name": "Authentication", "description": "Type of authentication to use.", "example": "Header Auth"}, {"name": "Send Headers", "description": "Toggle to send headers with the request.", "example": "true"}, {"name": "Name", "description": "Name of the header field.", "example": "unique_id"}, {"name": "Value", "description": "Value of the header field.", "example": "The unique ID from the course email."}], "code_block": null}, "keywords": ["GET request", "header authentication", "n8n", "API call", "configuration"]}
{"content_type": "How-To Guide", "section_title": "Part 2: Generating file for regional sales", "user_question": "How can I filter and convert data to files for regional sales in n8n?", "concise_answer": "To filter and convert data for regional sales in n8n, use the If node to display orders from the Americas region. Convert the data to binary format using the Convert to File node, creating separate files for each item. Send these files via email using the Gmail node and notify via Discord with the Discord node.", "structured_data": {"key_parameters": [{"name": "Region Filter", "description": "Filter to display orders from a specific region.", "example": "Americas"}, {"name": "Convert to File", "description": "Node to transform JSON data to binary format.", "example": null}, {"name": "Email Node", "description": "Node to send files via email.", "example": "Gmail node"}, {"name": "Discord Notification", "description": "Send a message in Discord with file details.", "example": "Discord node"}], "code_block": null}, "keywords": ["regional sales", "data conversion", "n8n", "email", "Discord"]}
{"content_type": "How-To Guide", "section_title": "Part 3: Generating files for total sales", "user_question": "How do I generate and send CSV files for total sales in n8n?", "concise_answer": "To generate and send CSV files for total sales in n8n, use the Loop Over Items node to batch data, set values with the Set node, and format dates with the Date & Time node. Convert the data to a CSV file using the Convert to File node, and send a notification via Discord with the file name.", "structured_data": {"key_parameters": [{"name": "Batch Size", "description": "Number of items per batch.", "example": "5"}, {"name": "Date Format", "description": "Format for the customerSince field.", "example": "MM/DD/YYYY"}, {"name": "CSV File Name", "description": "Expression to set the CSV file name.", "example": "{{$runIndex > 0 ? 'file_low_orders':'file_high_orders'}}"}, {"name": "Discord Notification", "description": "Send a message in Discord with the CSV file name.", "example": "Discord node"}], "code_block": null}, "keywords": ["total sales", "CSV file", "n8n", "batch processing", "Discord"]}
{"content_type": "Node Reference", "section_title": "Gmail Node", "user_question": "How do I configure the Gmail node in n8n?", "concise_answer": "To configure the Gmail node in n8n, you need to set parameters such as 'sendTo', 'subject', 'emailType', and 'message'. You also need to provide OAuth2 credentials for authentication.", "structured_data": {"key_parameters": [{"name": "sendTo", "description": "The email address to send the email to.", "example": "bart@n8n.io"}, {"name": "subject", "description": "The subject of the email.", "example": "Your TPS Reports"}, {"name": "emailType", "description": "The format of the email, either 'text' or 'html'.", "example": "text"}, {"name": "message", "description": "The body of the email.", "example": "Please find your TPS report attached."}], "code_block": null}, "keywords": ["Gmail", "email", "n8n", "node", "configuration"]}
{"content_type": "Node Reference", "section_title": "HTTP Request Node", "user_question": "What are the key parameters for configuring an HTTP Request node in n8n?", "concise_answer": "The HTTP Request node requires parameters such as 'url', 'authentication', and 'headerParameters'. You can also specify options like 'sendHeaders'.", "structured_data": {"key_parameters": [{"name": "url", "description": "The URL to send the HTTP request to.", "example": "https://internal.users.n8n.cloud/webhook/level2-erp"}, {"name": "authentication", "description": "The type of authentication to use.", "example": "genericCredentialType"}, {"name": "headerParameters", "description": "Headers to include in the request.", "example": "[{\"name\": \"unique_id\", \"value\": \"recFIcD6UlSyxaVMQ\"}]"}], "code_block": null}, "keywords": ["HTTP Request", "n8n", "node", "configuration", "authentication"]}
{"content_type": "Node Reference", "section_title": "Airtable Node", "user_question": "How do I set up the Airtable node in n8n?", "concise_answer": "To set up the Airtable node, you need to specify the 'operation', 'base', and 'table'. You also need to provide Airtable API credentials.", "structured_data": {"key_parameters": [{"name": "operation", "description": "The operation to perform, such as 'search'.", "example": "search"}, {"name": "base", "description": "The Airtable base to interact with.", "example": "apprtKkVasbQDbFa1"}, {"name": "table", "description": "The table within the base to interact with.", "example": "tblInZ7jeNdlUOvxZ"}], "code_block": null}, "keywords": ["Airtable", "n8n", "node", "configuration", "API"]}
{"content_type": "Node Reference", "section_title": "Merge Node", "user_question": "What is the purpose of the Merge node in n8n?", "concise_answer": "The Merge node in n8n is used to combine data from two different sources based on specified fields. You can configure it to merge by fields such as 'customerID'.", "structured_data": {"key_parameters": [{"name": "mode", "description": "The mode of merging, such as 'combine'.", "example": "combine"}, {"name": "mergeByFields", "description": "Fields to merge by, such as 'customerID'.", "example": "[{\"field1\": \"customerID\", \"field2\": \"customerID\"}]"}], "code_block": null}, "keywords": ["Merge", "n8n", "node", "data", "combine"]}
{"content_type": "Node Reference", "section_title": "Sort Node", "user_question": "How do I configure the Sort node in n8n?", "concise_answer": "The Sort node in n8n allows you to sort data based on specified fields. You can set parameters like 'sortFieldsUi' to define the field and order of sorting.", "structured_data": {"key_parameters": [{"name": "sortFieldsUi", "description": "Defines the fields and order for sorting.", "example": "[{\"fieldName\": \"orderPrice\", \"order\": \"descending\"}]"}], "code_block": null}, "keywords": ["Sort", "n8n", "node", "data", "order"]}
{"content_type": "Node Reference", "section_title": "If Node", "user_question": "How does the 'If' node work in n8n?", "concise_answer": "The 'If' node in n8n is used to evaluate conditions and determine the flow of execution based on whether the conditions are met. It uses operators to compare values and can combine multiple conditions using logical operators like 'and'.", "structured_data": {"key_parameters": [{"name": "leftValue", "description": "The value on the left side of the comparison.", "example": "={{ $json.region }}"}, {"name": "rightValue", "description": "The value on the right side of the comparison.", "example": "Americas"}, {"name": "operator", "description": "The operation used to compare the left and right values.", "example": "equals"}, {"name": "combinator", "description": "Logical operator to combine multiple conditions.", "example": "and"}], "code_block": null}, "keywords": ["If node", "condition", "comparison", "n8n", "workflow"]}
{"content_type": "Node Reference", "section_title": "Convert to File Node", "user_question": "What does the 'Convert to File' node do in n8n?", "concise_answer": "The 'Convert to File' node in n8n is used to convert data into a file format. It allows specifying the file name dynamically using expressions.", "structured_data": {"key_parameters": [{"name": "operation", "description": "The operation to perform, such as converting data to a file.", "example": "toJson"}, {"name": "mode", "description": "The mode in which the operation is executed.", "example": "each"}, {"name": "fileName", "description": "The name of the file to be created, which can be dynamically set.", "example": "=report_orderID_{{ $('If').item.json.orderID }}.json"}], "code_block": null}, "keywords": ["Convert to File", "file creation", "n8n", "workflow", "dynamic filename"]}
{"content_type": "Node Reference", "section_title": "Discord Node", "user_question": "How can I send messages to Discord using n8n?", "concise_answer": "The 'Discord' node in n8n allows sending messages to a Discord channel using a webhook. You can specify the content of the message and authenticate using a Discord Webhook API credential.", "structured_data": {"key_parameters": [{"name": "authentication", "description": "The method of authentication used to connect to Discord.", "example": "webhook"}, {"name": "content", "description": "The content of the message to be sent to Discord.", "example": "I sent the file using email with the label ID and wrote the binary file {file name}. My ID: 123"}], "code_block": null}, "keywords": ["Discord", "webhook", "n8n", "message", "workflow"]}
{"content_type": "Node Reference", "section_title": "Loop Over Items Node", "user_question": "What is the purpose of the 'Loop Over Items' node in n8n?", "concise_answer": "The 'Loop Over Items' node in n8n is used to process items in batches. It allows you to specify the batch size and iterate over items in a workflow.", "structured_data": {"key_parameters": [{"name": "batchSize", "description": "The number of items to process in each batch.", "example": "5"}], "code_block": null}, "keywords": ["Loop Over Items", "batch processing", "n8n", "workflow", "iteration"]}
{"content_type": "Node Reference", "section_title": "Edit Fields Node", "user_question": "How do I edit fields in n8n using the 'Edit Fields' node?", "concise_answer": "The 'Edit Fields' node in n8n allows you to modify or set new fields in your data. You can specify assignments for each field, including its name, value, and type.", "structured_data": {"key_parameters": [{"name": "assignments", "description": "A list of fields to be assigned or modified.", "example": null}, {"name": "name", "description": "The name of the field to be edited.", "example": "customerEmail"}, {"name": "value", "description": "The value to assign to the field.", "example": "={{ $json.customerEmail }}"}, {"name": "type", "description": "The data type of the field.", "example": "string"}], "code_block": null}, "keywords": ["Edit Fields", "modify data", "n8n", "workflow", "assignments"]}
{"content_type": "Node Reference", "section_title": "Date & Time Node", "user_question": "How can I format dates in n8n?", "concise_answer": "The 'Date & Time' node in n8n is used to format dates. You can specify the date to format and include input fields in the output.", "structured_data": {"key_parameters": [{"name": "operation", "description": "The operation to perform on the date.", "example": "formatDate"}, {"name": "date", "description": "The date to be formatted.", "example": "={{ $json.customerSince }}"}, {"name": "includeInputFields", "description": "Option to include input fields in the output.", "example": "true"}], "code_block": null}, "keywords": ["Date & Time", "format date", "n8n", "workflow", "date formatting"]}
{"content_type": "Node Reference", "section_title": "Discord Node Configuration", "user_question": "How do I configure a Discord node in n8n?", "concise_answer": "To configure a Discord node in n8n, you need to set the node type to 'n8n-nodes-base.discord' and provide the necessary credentials, such as the Discord Webhook API details.", "structured_data": {"key_parameters": [{"name": "type", "description": "Specifies the type of node.", "example": "n8n-nodes-base.discord"}, {"name": "credentials", "description": "Contains the authentication details required for the node to connect to Discord.", "example": "discordWebhookApi"}], "code_block": null}, "keywords": ["Discord", "n8n", "node configuration", "webhook", "credentials"]}
{"content_type": "Configuration", "section_title": "Workflow Connections", "user_question": "How are nodes connected in an n8n workflow?", "concise_answer": "In an n8n workflow, nodes are connected through 'main' connections, which define the sequence and flow of data between nodes. Each node can have multiple connections to other nodes.", "structured_data": {"key_parameters": [{"name": "main", "description": "Defines the primary connection path between nodes in the workflow.", "example": null}], "code_block": null}, "keywords": ["n8n", "workflow", "connections", "nodes", "data flow"]}
{"content_type": "How-To Guide", "section_title": "Workflow 3: Monitoring workflow errors", "user_question": "How can I set up a workflow to monitor errors in n8n?", "concise_answer": "To monitor errors in n8n, create a new workflow with an Error Trigger node. Connect a Discord node to send notifications about errors, using expressions to dynamically insert error details. Set this workflow as the Error Workflow for your main workflow.", "structured_data": {"key_parameters": [{"name": "Webhook URL", "description": "The Discord URL received in the email from n8n.", "example": "https://discord.com/api/webhooks/..."}, {"name": "Text", "description": "Message template to notify about workflow errors.", "example": "\"The workflow {workflow name} failed, with the error message: {execution error message}. Last node executed: {name of the last executed node}. Check this workflow execution here: {execution URL} My Unique ID: {unique ID}\""}], "code_block": null}, "keywords": ["Error Trigger", "Discord node", "workflow errors", "n8n", "monitoring"]}
{"content_type": "How-To Guide", "section_title": "Create and edit credentials", "user_question": "How do I create and edit credentials in n8n?", "concise_answer": "To create credentials in n8n, use the universal create resource icon to select 'Credential'. Choose the app or service to connect to, and enter the required details. Credentials can be created in personal space or specific projects, and n8n tests them upon saving.", "structured_data": {"key_parameters": [{"name": "Universal create resource icon", "description": "Button used to create new resources like credentials.", "example": "Located in the upper-left corner of the side menu."}, {"name": "Credential location", "description": "Determines where the credential is created, either in personal space or a specific project.", "example": "Personal space or specific project"}], "code_block": null}, "keywords": ["credentials", "n8n", "authentication", "create", "edit"]}
{"content_type": "General Concept", "section_title": "Expressions in credentials", "user_question": "Can I use expressions in n8n credentials?", "concise_answer": "Yes, you can use expressions in n8n credentials to set them dynamically as your workflow runs. Ensure the data path containing the credential is available, toggle Expression on, and enter your expression.", "structured_data": {"key_parameters": [{"name": "Toggle Expression", "description": "Option to enable expressions in credential fields.", "example": "Hover over the field and toggle Expression on."}], "code_block": null}, "keywords": ["expressions", "credentials", "dynamic", "n8n", "workflow"]}
{"content_type": "How-To Guide", "section_title": "Credential sharing", "user_question": "How can I share a credential with other users in n8n?", "concise_answer": "To share a credential in n8n, go to the left menu and select either Overview or a project. Then, select Credentials to see your list of credentials. Choose the credential you want to share, click on Sharing, and use the dropdown to select the user or project you want to share it with. Finally, click Save to apply the changes.", "structured_data": {"key_parameters": [{"name": "Share with projects or users", "description": "Dropdown to browse or search for the user or project to share credentials with.", "example": null}], "code_block": null}, "keywords": ["credential sharing", "n8n", "user permissions", "project sharing", "workflow"]}
{"content_type": "How-To Guide", "section_title": "Remove access to a credential", "user_question": "How do I unshare a credential in n8n?", "concise_answer": "To unshare a credential in n8n, navigate to the left menu and select either Overview or a project. Then, select Credentials to view your credentials. Choose the credential you want to unshare, click on Sharing, and use the trash icon next to the user or project you want to remove. Click Save to apply the changes.", "structured_data": {"key_parameters": [{"name": "Trash icon", "description": "Icon to remove a user or project from the list of shared users and projects.", "example": null}], "code_block": null}, "keywords": ["unshare credential", "n8n", "remove access", "user permissions", "project sharing"]}
{"content_type": "Overview", "section_title": "Credentials", "user_question": "What are credentials in n8n and how do I access them?", "concise_answer": "In n8n, credentials are private pieces of information used to authenticate you with apps and services. You can access the credentials UI by selecting Credentials from the left menu. The My credentials tab lists credentials you created, while the All credentials tab shows all credentials available to you, including those shared by others.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["credentials", "authentication", "n8n", "user interface", "access credentials"]}
{"content_type": "Overview", "section_title": "Binary data", "user_question": "How does n8n handle binary data?", "concise_answer": "n8n can process binary data such as image files or documents using dedicated nodes. Key nodes include Read/Write Files from Disk, Convert to File, and Extract From File. There are also nodes for handling XML, HTML, and performing tasks like compression and image editing. You can trigger workflows based on local file changes and use data transformation nodes to split or concatenate binary data.", "structured_data": {"key_parameters": [{"name": "Read/Write Files from Disk", "description": "Node to read and write files from/to the machine where n8n is running.", "example": null}, {"name": "Convert to File", "description": "Node to take input data and output it as a file.", "example": null}, {"name": "Extract From File", "description": "Node to get data from a binary format and convert it to JSON.", "example": null}], "code_block": null}, "keywords": ["binary data", "n8n", "file processing", "data nodes", "workflow"]}
{"content_type": "Node Reference", "section_title": "FTP", "user_question": "How can I trigger a workflow based on changes to a local file in n8n?", "concise_answer": "You can trigger a workflow based on changes to a local file using the Local File trigger node in n8n.", "structured_data": {"key_parameters": [{"name": "Local File trigger", "description": "A node that triggers workflows based on changes to local files.", "example": null}], "code_block": null}, "keywords": ["Local File trigger", "workflow", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Code", "user_question": "How can I manipulate binary data in n8n workflows?", "concise_answer": "You can use the Code node in n8n to manipulate binary data within your workflows. This allows you to access and modify the binary data buffer available in your workflow.", "structured_data": {"key_parameters": [{"name": "Code node", "description": "A node that allows you to write custom code to manipulate data.", "example": null}], "code_block": null}, "keywords": ["Code node", "binary data", "n8n"]}
{"content_type": "Configuration", "section_title": "Configure binary data mode when self-hosting", "user_question": "How can I configure binary data handling in a self-hosted n8n instance?", "concise_answer": "In a self-hosted n8n instance, you can configure binary data handling using Binary data environment variables. This includes setting the storage path and choosing how to store binary data. You can also disable reading and writing binary data using the NODES_EXCLUDE environment variable.", "structured_data": {"key_parameters": [{"name": "Binary data environment variables", "description": "Variables to configure how binary data is handled in n8n.", "example": null}, {"name": "NODES_EXCLUDE", "description": "Environment variable to disable reading and writing binary data.", "example": null}], "code_block": null}, "keywords": ["binary data", "self-hosting", "environment variables", "n8n"]}
{"content_type": "General Concept", "section_title": "Function", "user_question": "What is a function in n8n?", "concise_answer": "In n8n, a function is a block of code designed to perform a specific task. You can write custom JavaScript or Python code snippets to add, remove, and update the data you receive from a node.", "structured_data": {"key_parameters": [{"name": "Function", "description": "A block of code designed to perform a specific task.", "example": null}], "code_block": null}, "keywords": ["function", "code", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Data editing", "user_question": "How can I edit pinned data in n8n?", "concise_answer": "To edit pinned data in n8n, run the node to load data, switch to JSON view in the OUTPUT panel, and select Edit. After making changes, select Save to pin the data.", "structured_data": {"key_parameters": [{"name": "Edit pinned data", "description": "Allows you to modify data in the OUTPUT view during development.", "example": null}], "code_block": null}, "keywords": ["edit data", "pinned data", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Use data from previous executions", "user_question": "How can I use data from previous workflow executions in n8n?", "concise_answer": "To use data from previous executions, open the Executions menu, find the desired execution, and copy the data from the node. You can paste this data into the current workflow node.", "structured_data": {"key_parameters": [{"name": "Previous executions", "description": "Allows you to access and use data from past workflow runs.", "example": null}], "code_block": null}, "keywords": ["previous executions", "copy data", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Data filtering", "user_question": "How can I search and filter data in n8n?", "concise_answer": "In n8n, you can search and filter data in the INPUT and OUTPUT panels of a node. Enter your search term, and n8n will display the objects or rows containing the term.", "structured_data": {"key_parameters": [{"name": "Search and filter", "description": "Feature to search and filter data in node panels.", "example": null}], "code_block": null}, "keywords": ["search", "filter", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Data mocking", "user_question": "How can I mock data in my n8n workflow?", "concise_answer": "Data mocking in n8n allows you to simulate or fake data, which is useful during workflow development. It helps avoid repeated calls to data sources, saves time and costs, and prevents overwriting live data. You can use data pinning to load and edit real data, or generate custom data using the Code or Edit Fields nodes.", "structured_data": {"key_parameters": [{"name": "Data pinning", "description": "Load real data into your workflow and pin it in the output panel of a node.", "example": null}, {"name": "Code node", "description": "Create any data set you want and return it as the node output.", "example": null}, {"name": "Edit Fields node", "description": "Select Add fields to add your custom data.", "example": null}], "code_block": null}, "keywords": ["data mocking", "workflow development", "data pinning", "Code node", "Edit Fields node"]}
{"content_type": "How-To Guide", "section_title": "Data pinning", "user_question": "What is data pinning in n8n and how is it used?", "concise_answer": "Data pinning in n8n is a feature that allows you to save the output data of a node and use it in future workflow executions instead of fetching fresh data. This is useful for testing workflows without repeatedly accessing external systems, saving time and resources. Data pinning is only available during development and not in production.", "structured_data": {"key_parameters": [{"name": "Data pinning", "description": "Save the output data of a node for use in future workflow executions.", "example": null}, {"name": "Unpin data", "description": "Select the Unpin link in the banner to fetch fresh data on the next execution.", "example": null}], "code_block": null}, "keywords": ["data pinning", "workflow testing", "external systems", "development", "unpin data"]}
{"content_type": "General Concept", "section_title": "Data structure", "user_question": "What is the data structure used in n8n?", "concise_answer": "In n8n, all data passed between nodes is structured as an array of objects. This allows for consistent data handling and manipulation across different nodes within a workflow.", "structured_data": {"key_parameters": [{"name": "Data structure", "description": "An array of objects used to pass data between nodes.", "example": null}], "code_block": null}, "keywords": ["data structure", "n8n", "array of objects", "workflow", "nodes"]}
{"content_type": "General Concept", "section_title": "Data structure", "user_question": "What is the data structure used in n8n for passing data between nodes?", "concise_answer": "In n8n, all data passed between nodes is structured as an array of objects. Each item is wrapped in another object with a 'json' key for most data, or a 'binary' key for binary data.", "structured_data": {"key_parameters": [{"name": "json", "description": "Wraps each item in an object for most data types.", "example": "{\"apple\": \"beets\", \"carrot\": { \"dill\": 1 }}"}, {"name": "binary", "description": "Wraps each item in an object for binary data types.", "example": "{\"apple-picture\": { \"data\": \"....\", \"mimeType\": \"image/png\", \"fileExtension\": \"png\", \"fileName\": \"example.png\" }}"}], "code_block": null}, "keywords": ["n8n", "data structure", "json", "binary data", "nodes"]}
{"content_type": "How-To Guide", "section_title": "Schema Preview", "user_question": "How can I use Schema Preview in n8n to construct workflows without credentials?", "concise_answer": "Schema Preview in n8n allows you to view expected schema data from the previous node without needing credentials. This feature helps in constructing workflows by exposing expected fields, which can be dragged and dropped into node parameters.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "Schema Preview", "workflow", "node editor", "credentials"]}
{"content_type": "General Concept", "section_title": "Transforming data", "user_question": "Why is data transformation necessary in n8n?", "concise_answer": "Data transformation in n8n is necessary when incoming data has a different structure than what n8n expects. Transforming data ensures that each item can be processed individually by the nodes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "data transformation", "data structure", "nodes", "processing"]}
{"content_type": "How-To Guide", "section_title": "HTTP Request node output", "user_question": "How can I transform the structure of HTTP Request node output in n8n?", "concise_answer": "To transform the structure of HTTP Request node output in n8n, you can use data transformation nodes such as Aggregate, Limit, Remove Duplicates, Sort, Split Out, and Summarize. These nodes allow you to group, limit, remove duplicates, sort, split, and summarize data items.", "structured_data": {"key_parameters": [{"name": "Aggregate", "description": "Group separate items or portions of them into individual items.", "example": null}, {"name": "Limit", "description": "Remove items beyond a defined maximum number.", "example": null}, {"name": "Remove Duplicates", "description": "Identify and delete items that are identical across all fields or a subset of fields.", "example": null}, {"name": "Sort", "description": "Organize lists in a desired ordering or generate a random selection.", "example": null}, {"name": "Split Out", "description": "Separate a single data item containing a list into multiple items.", "example": null}, {"name": "Summarize", "description": "Aggregate items together, similar to Excel pivot tables.", "example": null}], "code_block": null}, "keywords": ["n8n", "data transformation", "HTTP Request", "nodes", "output"]}
{"content_type": "How-To Guide", "section_title": "Mapping in the expressions editor", "user_question": "How do I access linked items in the expressions editor in n8n?", "concise_answer": "In n8n, you can access linked items in the expressions editor by using expressions that refer to previous nodes' outputs. For example, to access a linked item from a previous node, use {{$('<node-name>').item}}. To access a linked item in the current node's input, use {{$input.item}}.", "structured_data": {"key_parameters": null, "code_block": "js // Returns the linked item {{$('<node-name>').item}}\n\njs // Returns the linked item {{$input.item}}"}, "keywords": ["n8n", "expressions editor", "linked items", "data mapping", "workflow"]}
{"content_type": "How-To Guide", "section_title": "Mapping in the UI", "user_question": "How can I map data using the UI in n8n?", "concise_answer": "In n8n, you can map data using the UI by running your workflow to load data, opening the node where you need to map data, and using drag-and-drop in table, JSON, or schema view. This process generates expressions that reference data from previous nodes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "data mapping", "UI", "drag and drop", "workflow"]}
{"content_type": "General Concept", "section_title": "Understand nested data", "user_question": "How does n8n handle nested data in its interface?", "concise_answer": "n8n displays nested data in a table form within the INPUT panel, where top-level fields containing nested data are indicated in bold.", "structured_data": {"key_parameters": null, "code_block": "js [ { \"name\": \"First item\", \"nested\": { \"example-number-field\": 1, \"example-string-field\": \"apples\" } }, { \"name\": \"Second item\", \"nested\": { \"example-number-field\": 2, \"example-string-field\": \"oranges\" } } ]"}, "keywords": ["nested data", "table display", "INPUT panel", "n8n"]}
{"content_type": "General Concept", "section_title": "Data mapping", "user_question": "What is data mapping in n8n?", "concise_answer": "Data mapping in n8n involves referencing data from previous nodes. It includes mapping data in the UI, using expressions, and handling item linking when using the Code node or building custom nodes.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["data mapping", "node referencing", "expressions", "n8n"]}
{"content_type": "General Concept", "section_title": "Data item linking", "user_question": "What is item linking in n8n?", "concise_answer": "Item linking in n8n refers to the process where each item processed by a node is linked back to its previous items. This is crucial for building programmatic nodes and using the Code node to access data from earlier workflow stages.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["item linking", "data path", "Code node", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Item linking in the Code node", "user_question": "How do I handle item linking in the Code node in n8n?", "concise_answer": "To handle item linking in the Code node, you need to understand how n8n links output items to input items, especially when nodes split or merge data. This involves managing metadata that tracks these links.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["item linking", "Code node", "metadata", "n8n"]}
{"content_type": "General Concept", "section_title": "Item linking concepts", "user_question": "What are the key concepts of item linking in n8n?", "concise_answer": "Item linking in n8n involves creating a chain of items where each output item includes metadata linking it to its input items. This is essential for understanding workflows, especially when nodes split or merge data.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["item linking", "metadata", "workflow", "n8n"]}
{"content_type": "General Concept", "section_title": "n8n's automatic item linking", "user_question": "How does n8n automatically link items between nodes?", "concise_answer": "n8n automatically links items based on the number of inputs and outputs. For single input-output, it links directly. For multiple outputs, all link to the input. If inputs and outputs are equal, they link in order. If not, n8n may display an error.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["automatic linking", "input-output", "n8n", "errors"]}
{"content_type": "General Concept", "section_title": "Item linking example", "user_question": "How does item linking work in n8n workflows?", "concise_answer": "In n8n, item linking allows a node to access data from any previous node in the workflow, not just the immediately preceding one. This is achieved through a thread that tracks the origin of each item. The system uses expressions like $(node_name).item to reference these items, but errors can occur if the thread is broken or ambiguous.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["item linking", "n8n", "workflow", "expressions", "data reference"]}
{"content_type": "How-To Guide", "section_title": "Item linking errors", "user_question": "What should I do if I encounter item linking errors in n8n?", "concise_answer": "If you encounter item linking errors in n8n, such as 'Info for expression missing from previous node' or 'Multiple matching items for expression', you can resolve them by using alternative methods like .first(), .last(), or .all()[index]. These methods require knowledge of the item's position in the node's output. Alternatively, you can fix the root cause by ensuring nodes return correct pairing information.", "structured_data": {"key_parameters": [{"name": ".item", "description": "References a specific item from a previous node.", "example": "$(node_name).item"}, {"name": ".first()", "description": "Selects the first item from a node's output.", "example": null}, {"name": ".last()", "description": "Selects the last item from a node's output.", "example": null}, {"name": ".all()[index]", "description": "Selects an item at a specific index from a node's output.", "example": ".all()[0]"}], "code_block": null}, "keywords": ["item linking errors", "n8n", "expressions", "workflow", "troubleshooting"]}
{"content_type": "How-To Guide", "section_title": "Item linking for node creators", "user_question": "How can node creators ensure proper item linking in n8n?", "concise_answer": "Node creators should ensure that their nodes return information about which input items were used to produce each output item. This is crucial for maintaining correct item linking in workflows. If a node does not return this information, it can cause errors in item linking.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["node creation", "item linking", "n8n", "workflow", "data mapping"]}
{"content_type": "Configuration", "section_title": "n8n Embed Configuration", "user_question": "How do I configure n8n Embed?", "concise_answer": "To configure n8n Embed, you need to follow the specific setup instructions provided in the documentation. This involves setting up the necessary parameters and ensuring that your environment is correctly configured to support the embed functionality.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "embed", "configuration", "setup", "integration"]}
{"content_type": "Configuration", "section_title": "Authentication", "user_question": "How can I secure my n8n instance?", "concise_answer": "You can secure your n8n instance by setting up User management, which is n8n's built-in authentication feature. This allows you to control access and ensure that only authorized users can interact with your workflows.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "security", "authentication", "user management", "access control"]}
{"content_type": "Configuration", "section_title": "Authentication", "user_question": "How can I secure n8n using built-in authentication features?", "concise_answer": "You can secure n8n by setting up User management, which is n8n's built-in authentication feature. n8n supports LDAP and SAML for authentication.", "structured_data": {"key_parameters": [{"name": "User management", "description": "n8n's built-in authentication feature.", "example": null}, {"name": "LDAP", "description": "A supported authentication method.", "example": null}, {"name": "SAML", "description": "A supported authentication method.", "example": null}], "code_block": null}, "keywords": ["authentication", "LDAP", "SAML", "user management", "security"]}
{"content_type": "Configuration", "section_title": "Credential overwrites", "user_question": "How can I overwrite credentials globally in n8n?", "concise_answer": "You can overwrite credentials globally in n8n using environment variables or the REST API. The REST API is the recommended method for security reasons.", "structured_data": {"key_parameters": [{"name": "CREDENTIALS_OVERWRITE_DATA", "description": "Environment variable to set credential overwrites.", "example": "{ CREDENTIAL_NAME: { PARAMETER: VALUE }}"}, {"name": "CREDENTIALS_OVERWRITE_ENDPOINT", "description": "Environment variable to set the path for a custom REST endpoint.", "example": "send-credentials"}], "code_block": null}, "keywords": ["credentials", "overwrite", "environment variables", "REST API", "security"]}
{"content_type": "Configuration", "section_title": "Using environment variables", "user_question": "What are the risks of using environment variables for credential overwrites in n8n?", "concise_answer": "Using environment variables for credential overwrites in n8n is not recommended because they are not protected, and the data can leak to users.", "structured_data": {"key_parameters": [{"name": "CREDENTIALS_OVERWRITE_DATA", "description": "Environment variable for setting credential overwrites.", "example": "{ CREDENTIAL_NAME: { PARAMETER: VALUE }}"}], "code_block": null}, "keywords": ["environment variables", "credential overwrites", "security", "risks", "data leak"]}
{"content_type": "Configuration", "section_title": "Using REST APIs", "user_question": "How do I use REST APIs to overwrite credentials in n8n?", "concise_answer": "To use REST APIs for credential overwrites, set the CREDENTIALS_OVERWRITE_ENDPOINT environment variable to a custom path. Then, send a JSON file with the credentials to this endpoint using a tool like curl.", "structured_data": {"key_parameters": [{"name": "CREDENTIALS_OVERWRITE_ENDPOINT", "description": "Environment variable to set the path for a custom REST endpoint.", "example": "send-credentials"}], "code_block": "curl -H \"Content-Type: application/json\" --data @oauth-credentials.json http://localhost:5678/send-credentials"}, "keywords": ["REST API", "credential overwrites", "endpoint", "JSON", "curl"]}
{"content_type": "Configuration", "section_title": "Environment variables", "user_question": "What are some important environment variables for configuring n8n?", "concise_answer": "Important environment variables for n8n include EXECUTIONS_TIMEOUT, EXECUTIONS_DATA_PRUNE, EXECUTIONS_DATA_MAX_AGE, EXECUTIONS_DATA_PRUNE_MAX_COUNT, NODES_EXCLUDE, NODES_INCLUDE, N8N_TEMPLATES_ENABLED, and N8N_TEMPLATES_HOST. These control execution timeouts, data pruning, node loading, and template settings.", "structured_data": {"key_parameters": [{"name": "EXECUTIONS_TIMEOUT", "description": "Sets a default timeout (in seconds) for all workflows.", "example": "-1"}, {"name": "EXECUTIONS_DATA_PRUNE", "description": "Whether to delete data of past executions on a rolling basis.", "example": "true"}, {"name": "EXECUTIONS_DATA_MAX_AGE", "description": "The execution age (in hours) before it's deleted.", "example": "336"}, {"name": "EXECUTIONS_DATA_PRUNE_MAX_COUNT", "description": "Maximum number of executions to keep in the database.", "example": "10000"}, {"name": "NODES_EXCLUDE", "description": "Specify which nodes not to load.", "example": "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]"}, {"name": "NODES_INCLUDE", "description": "Specify which nodes to load.", "example": null}, {"name": "N8N_TEMPLATES_ENABLED", "description": "Enable or disable workflow templates.", "example": "true"}, {"name": "N8N_TEMPLATES_HOST", "description": "Change this if creating your own workflow template library.", "example": "https://api.n8n.io"}], "code_block": null}, "keywords": ["environment variables", "configuration", "execution", "nodes", "templates"]}
{"content_type": "General Concept", "section_title": "Available hooks", "user_question": "What are hooks in n8n and how are they used?", "concise_answer": "Hooks in n8n are functions that are called at specific points in the application lifecycle, such as before creating credentials or after a workflow is executed. They allow developers to modify or extend the behavior of n8n by executing custom code at these points.", "structured_data": {"key_parameters": [{"name": "credentials.create", "description": "Called before new credentials get created. Use to restrict the number of credentials.", "example": null}, {"name": "credentials.delete", "description": "Called before credentials get deleted.", "example": null}, {"name": "credentials.update", "description": "Called before existing credentials are saved.", "example": null}, {"name": "frontend.settings", "description": "Gets called on n8n startup. Allows you to overwrite frontend data like the displayed OAuth URL.", "example": null}, {"name": "n8n.ready", "description": "Called once n8n is ready. Use to register custom API endpoints.", "example": null}, {"name": "n8n.stop", "description": "Called when an n8n process gets stopped. Allows you to save some process data.", "example": null}, {"name": "oauth1.authenticate", "description": "Called before an OAuth1 authentication. Use to overwrite an OAuth callback URL.", "example": null}, {"name": "oauth2.callback", "description": "Called in an OAuth2 callback. Use to overwrite an OAuth callback URL.", "example": null}, {"name": "workflow.activate", "description": "Called before a workflow gets activated. Use to restrict the number of active workflows.", "example": null}, {"name": "workflow.afterDelete", "description": "Called after a workflow gets deleted.", "example": null}, {"name": "workflow.afterUpdate", "description": "Called after an existing workflow gets saved.", "example": null}, {"name": "workflow.create", "description": "Called before a workflow gets created. Use to restrict the number of saved workflows.", "example": null}, {"name": "workflow.delete", "description": "Called before a workflow gets deleted.", "example": null}, {"name": "workflow.postExecute", "description": "Called after a workflow gets executed.", "example": null}, {"name": "workflow.preExecute", "description": "Called before a workflow gets executed. Allows you to count or limit the number of workflow executions.", "example": null}, {"name": "workflow.update", "description": "Called before an existing workflow gets saved.", "example": null}], "code_block": null}, "keywords": ["hooks", "n8n", "workflow", "credentials", "OAuth"]}
{"content_type": "How-To Guide", "section_title": "Registering hooks", "user_question": "How do I register hooks in n8n?", "concise_answer": "To register hooks in n8n, you need to set the environment variable EXTERNAL_HOOK_FILES to point to your hook file(s). This can be a single file or multiple files separated by a semicolon.", "structured_data": {"key_parameters": [{"name": "EXTERNAL_HOOK_FILES", "description": "Environment variable used to specify the path to hook files.", "example": "/data/hook.js"}], "code_block": null}, "keywords": ["register hooks", "n8n", "environment variable", "EXTERNAL_HOOK_FILES"]}
{"content_type": "Code Example", "section_title": "Backend hook files", "user_question": "Can you provide an example of a backend hook file in n8n?", "concise_answer": "Here is an example of a backend hook file in n8n. It shows how to set OAuth callback URLs and restrict the number of active workflows.", "structured_data": {"key_parameters": null, "code_block": "module.exports = { \"frontend\": { \"settings\": [ async function (settings) { settings.oauthCallbackUrls.oauth1 = 'https://n8n.example.com/oauth1/callback'; settings.oauthCallbackUrls.oauth2 = 'https://n8n.example.com/oauth2/callback'; } ] }, \"workflow\": { \"activate\": [ async function (workflowData) { const activeWorkflows = await this.dbCollections.Workflow.count({ active: true }); if (activeWorkflows > 1) { throw new Error('Active workflow limit reached.'); } } ] } }"}, "keywords": ["backend hook", "n8n", "code example", "OAuth", "workflow"]}
{"content_type": "General Concept", "section_title": "Backend hook functions", "user_question": "What are backend hook functions in n8n?", "concise_answer": "Backend hook functions in n8n are JavaScript functions that can be executed at specific points in the backend process. They can modify parameters and access the database to change the behavior of n8n.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["backend hook", "n8n", "functions", "database", "parameters"]}
{"content_type": "General Concept", "section_title": "Frontend external hooks", "user_question": "What are frontend external hooks in n8n?", "concise_answer": "Frontend external hooks in n8n are similar to backend hooks but are executed in the frontend code. They can be used to log data or change data when a user performs specific operations.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["frontend hook", "n8n", "external hooks", "user operations", "data logging"]}
{"content_type": "General Concept", "section_title": "Available hooks", "user_question": "What are the available hooks in n8n and what do they do?", "concise_answer": "n8n provides various hooks that trigger specific actions within the system. For example, 'credentials.create' is called when a new credential is created, and 'workflowRun.runWorkflow' is triggered when a workflow executes. These hooks allow for custom actions to be performed at different stages of the workflow and credential lifecycle.", "structured_data": {"key_parameters": [{"name": "credentials.create", "description": "Called when someone creates a new credential.", "example": null}, {"name": "workflowRun.runWorkflow", "description": "Called when a workflow executes.", "example": null}], "code_block": null}, "keywords": ["hooks", "n8n", "workflow", "credentials", "execution"]}
{"content_type": "How-To Guide", "section_title": "Registering hooks", "user_question": "How can I register hooks in n8n?", "concise_answer": "To register hooks in n8n, you need to load the hooks script on the page. This can be done by creating a hooks file in your project and adding a script tag in your editor-ui/public/index.html file.", "structured_data": {"key_parameters": null, "code_block": "<script src=\"/path/to/your/hooks.js\"></script>"}, "keywords": ["register hooks", "n8n", "script", "editor-ui", "hooks file"]}
{"content_type": "General Concept", "section_title": "Frontend hook files", "user_question": "What are frontend hook files in n8n?", "concise_answer": "Frontend hook files in n8n are JavaScript files that define custom functions to be executed when specific frontend events occur. These files use the 'window.n8nExternalHooks' object to register functions for different hooks.", "structured_data": {"key_parameters": null, "code_block": "window.n8nExternalHooks = { nodeView: { mount: [ function (store, meta) { // do something }, ], createNodeActiveChanged: [ function (store, meta) { // do something }, function (store, meta) { // do something else }, ], addNodeButton: [ function (store, meta) { // do something }, ], }, };"}, "keywords": ["frontend hooks", "n8n", "JavaScript", "window.n8nExternalHooks", "custom functions"]}
{"content_type": "General Concept", "section_title": "User data", "user_question": "How does n8n recommend handling user data?", "concise_answer": "n8n recommends using Rook to save user data, ensuring that if a server goes down, a new instance can start using the same data. Backups are generally not needed unless there's a catastrophic failure or a user wants to reactivate their account within the retention period.", "structured_data": {"key_parameters": [{"name": "Rook", "description": "Used to save user data and ensure data persistence across server instances.", "example": null}], "code_block": null}, "keywords": ["user data", "n8n", "Rook", "backups", "data persistence"]}
{"content_type": "General Concept", "section_title": "Backups", "user_question": "What is n8n's recommendation for creating backups?", "concise_answer": "n8n recommends creating nightly backups by attaching another container and copying all data to it. This approach minimizes RAM usage and does not impact server capacity.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["backups", "n8n", "container", "data copy", "RAM usage"]}
{"content_type": "General Concept", "section_title": "Restarting", "user_question": "What happens to missed executions if an n8n instance is down or restarting?", "concise_answer": "Missed executions, such as those from Cron or Webhook nodes, are not recoverable if an n8n instance is down or restarting. To maintain 100% uptime, a proxy should be built in front of n8n to cache data.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["restarting", "n8n", "missed executions", "uptime", "proxy"]}
{"content_type": "General Concept", "section_title": "n8n Embed", "user_question": "What is n8n Embed and what does it offer?", "concise_answer": "n8n Embed is a paid feature that allows you to white label n8n or integrate it into your software as part of a commercial product. It includes options for usage, costs, licensing, and support.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n Embed", "white label", "integration", "commercial product", "paid feature"]}
{"content_type": "General Concept", "section_title": "n8n Embed", "user_question": "What is n8n Embed and where is it available?", "concise_answer": "n8n Embed is a paid feature of n8n that allows you to white label n8n or incorporate it into your software as part of a commercial product. It is not available in Russia and Belarus.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n Embed", "white label", "commercial product", "availability", "Russia and Belarus"]}
{"content_type": "How-To Guide", "section_title": "Workflow management in Embed", "user_question": "How can I manage workflows for multiple users in n8n Embed?", "concise_answer": "To manage workflows for multiple users in n8n Embed, you can either create a separate workflow for each user or create a single workflow and pass user credentials when executing. The first option allows any trigger but requires managing multiple workflows, while the second simplifies management but requires your product to call the workflow.", "structured_data": {"key_parameters": [{"name": "Workflow per user", "description": "Create a workflow for each user with no limitation on how it starts.", "example": null}, {"name": "Single workflow with user credentials", "description": "Create one workflow and pass user credentials during execution.", "example": null}], "code_block": null}, "keywords": ["workflow management", "n8n Embed", "multiple users", "user credentials", "workflow options"]}
{"content_type": "How-To Guide", "section_title": "Create user credentials", "user_question": "How do I create user credentials in n8n?", "concise_answer": "To create user credentials in n8n, first obtain all necessary credential details. You can then create the credentials using the Editor UI by selecting Credentials > New, choosing the Credential type, entering the details, and clicking Create. Alternatively, use the API with a POST request to the endpoint https://<n8n-domain>/rest/credentials with the required JSON body.", "structured_data": {"key_parameters": [{"name": "Credential type", "description": "The type of credential to create, such as Airtable.", "example": "airtableApi"}, {"name": "API endpoint", "description": "The API endpoint format for creating credentials.", "example": "https://<n8n-domain>/rest/credentials"}], "code_block": "POST https://<n8n-domain>/rest/credentials\n{\n  \"name\":\"MyAirtable\",\n  \"type\":\"airtableApi\",\n  \"nodesAccess\":[ { \"nodeType\":\"n8n-nodes-base.airtable\" } ],\n  \"data\":{ \"apiKey\":\"q12we34r5t67yu\" }\n}"}, "keywords": ["create credentials", "n8n", "Editor UI", "API", "user credentials"]}
{"content_type": "How-To Guide", "section_title": "Create the workflow", "user_question": "What is the best practice for creating workflows for new users in n8n?", "concise_answer": "The best practice for creating workflows for new users in n8n is to have a 'base' workflow that you duplicate and customize for each user with their credentials and any other necessary details. This can be done using the Editor UI or an API call.", "structured_data": {"key_parameters": [{"name": "Base workflow", "description": "A template workflow that is duplicated and customized for each user.", "example": null}], "code_block": null}, "keywords": ["workflow creation", "n8n", "base workflow", "customization", "new users"]}
{"content_type": "How-To Guide", "section_title": "Using the Editor UI", "user_question": "How can I duplicate a workflow in n8n using the Editor UI?", "concise_answer": "To duplicate a workflow in n8n using the Editor UI, go to the menu, select Workflows > Open to open the template workflow. Then, select Workflows > Duplicate, enter a name for the new workflow, and click Save. Update all relevant nodes with the user's credentials and set the workflow to Active using the toggle in the top-right corner.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["duplicate workflow", "Editor UI", "n8n", "workflow management", "activate workflow"]}
{"content_type": "How-To Guide", "section_title": "Using the API", "user_question": "How can I fetch and update a workflow using the n8n API?", "concise_answer": "To fetch a workflow using the n8n API, use the GET endpoint: https://<n8n-domain>/rest/workflows/<workflow_id>. The response will contain the JSON data of the workflow. Save this JSON data, update any relevant credentials and fields, and create a new workflow using the updated JSON as the request body at the POST endpoint: https://<n8n-domain>/rest/workflows/", "structured_data": {"key_parameters": [{"name": "workflow_id", "description": "The unique identifier of the workflow to fetch.", "example": "1012"}], "code_block": "GET https://<n8n-domain>/rest/workflows/1012"}, "keywords": ["API", "fetch workflow", "update workflow", "n8n", "workflow JSON"]}
{"content_type": "Code Example", "section_title": "Using the API", "user_question": "What does a sample JSON response look like when fetching a workflow in n8n?", "concise_answer": "A sample JSON response when fetching a workflow in n8n includes details such as the workflow ID, name, active status, nodes, connections, and timestamps for creation and updates.", "structured_data": {"key_parameters": null, "code_block": "{ \"data\": { \"id\": \"1012\", \"name\": \"Nathan's Workflow\", \"active\": false, \"nodes\": [ { \"parameters\": {}, \"name\": \"Start\", \"type\": \"n8n-nodes-base.start\", \"typeVersion\": 1, \"position\": [ 130, 640 ] }, { \"parameters\": { \"authentication\": \"headerAuth\", \"url\": \"https://internal.users.n8n.cloud/webhook/custom-erp\", \"options\": { \"splitIntoItems\": true }, \"headerParametersUi\": { \"parameter\": [ { \"name\": \"unique_id\", \"value\": \"recLhLYQbzNSFtHNq\" } ] } }, \"name\": \"HTTP Request\", \"type\": \"n8n-nodes-base.httpRequest\", \"typeVersion\": 1, \"position\": [ 430, 300 ], \"credentials\": { \"httpHeaderAuth\": \"beginner_course\" } }, { \"parameters\": { \"operation\": \"append\", \"application\": \"appKBGQfbm6NfW6bv\", \"table\": \"processingOrders\", \"options\": {} }, \"name\": \"Airtable\", \"type\": \"n8n-nodes-base.airtable\", \"typeVersion\": 1, \"position\": [ 990, 210 ], \"credentials\": { \"airtableApi\": \"Airtable\" } }, { \"parameters\": { \"conditions\": { \"string\": [ { \"value1\": \"={{$json[\\\"orderStatus\\\"]}}\", \"value2\": \"processing\" } ] } }, \"name\": \"IF\", \"type\": \"n8n-nodes-base.if\", \"typeVersion\": 1, \"position\": [ 630, 300 ] }, { \"parameters\": { \"keepOnlySet\": true, \"values\": { \"number\": [ { \"name\": \"=orderId\", \"value\": \"={{$json[\\\"orderID\\\"]}}\" } ], \"string\": [ { \"name\": \"employeeName\", \"value\": \"={{$json[\\\"employeeName\\\"]}}\" } ] }, \"options\": {} }, \"name\": \"Set\", \"type\": \"n8n-nodes-base.set\", \"typeVersion\": 1, \"position\": [ 800, 210 ] }, { \"parameters\": { \"functionCode\": \"let totalBooked = items.length;\\nlet bookedSum = 0;\\n\\nfor(let i=0; i < items.length; i++) {\\n bookedSum = bookedSum + items[i].json.orderPrice;\\n}\\nreturn [{json:{totalBooked, bookedSum}}]\\n\" }, \"name\": \"Function\", \"type\": \"n8n-nodes-base.function\", \"typeVersion\": 1, \"position\": [ 800, 400 ] }, { \"parameters\": { \"webhookUri\": \"https://discord.com/api/webhooks/865213348202151968/oD5_WPDQwtr22Vjd_82QP3-_4b_lGhAeM7RynQ8Js5DzyXrQEnj0zeAQIA6fki1JLtXE\", \"text\": \"=This week we have {{$json[\\\"totalBooked\\\"]}} booked orders with a total value of {{$json[\\\"bookedSum\\\"]}}. My Unique ID: {{$node[\\\"HTTP Request\\\"].parameter[\\\"headerParametersUi\\\"][\\\"parameter\\\"][0][\\\"value\\\"]}}\" }, \"name\": \"Discord\", \"type\": \"n8n-nodes-base.discord\", \"typeVersion\": 1, \"position\": [ 1000, 400 ] }, { \"parameters\": { \"triggerTimes\": { \"item\": [ { \"mode\": \"everyWeek\", \"hour\": 9 } ] } }, \"name\": \"Cron\", \"type\": \"n8n-nodes-base.cron\", \"typeVersion\": 1, \"position\": [ 220, 300 ] } ], \"connections\": { \"HTTP Request\": { \"main\": [ [ { \"node\": \"IF\", \"type\": \"main\", \"index\": 0 } ] ] }, \"Start\": { \"main\": [ [] ] }, \"IF\": { \"main\": [ [ { \"node\": \"Set\", \"type\": \"main\", \"index\": 0 } ], [ { \"node\": \"Function\", \"type\": \"main\", \"index\": 0 } ] ] }, \"Set\": { \"main\": [ [ { \"node\": \"Airtable\", \"type\": \"main\", \"index\": 0 } ] ] }, \"Function\": { \"main\": [ [ { \"node\": \"Discord\", \"type\": \"main\", \"index\": 0 } ] ] }, \"Cron\": { \"main\": [ [ { \"node\": \"HTTP Request\", \"type\": \"main\", \"index\": 0 } ] ] } }, \"createdAt\": \"2021-07-16T11:15:46.066Z\", \"updatedAt\": \"2021-07-16T12:05:44.045Z\", \"settings\": {}, \"staticData\": null, \"tags\": [] } }"}, "keywords": ["JSON response", "workflow data", "n8n API", "fetch workflow", "sample JSON"]}
{"content_type": "How-To Guide", "section_title": "Create the workflow", "user_question": "How do I create and activate a new workflow in n8n?", "concise_answer": "To create and activate a new workflow in n8n, first obtain the necessary user credentials and any additional parameters. Then, create the n8n credentials for the user and set up the workflow, ensuring it is triggered by a Webhook node. The incoming webhook call should contain the user’s credentials and other required parameters. Save and activate the workflow, selecting the production URL for the Webhook node.", "structured_data": {"key_parameters": [{"name": "active", "description": "Indicates whether the workflow is active.", "example": "true"}, {"name": "settings", "description": "Additional settings for the workflow.", "example": "{}"}, {"name": "staticData", "description": "Static data for the workflow.", "example": "null"}, {"name": "tags", "description": "Tags associated with the workflow.", "example": "[]"}], "code_block": null}, "keywords": ["n8n", "workflow", "activate", "Webhook", "credentials"]}
{"content_type": "Configuration", "section_title": "Component Sizing", "user_question": "What are the recommended component sizes for running n8n?", "concise_answer": "For running n8n, it is recommended to have a minimum of 10 CPU cycles, with scaling as needed, and memory ranging from 320 MB to 2 GB. The database should be between 512 MB and 4 GB SSD, using either SQLite or PostgreSQL. n8n is not CPU intensive, so focus on memory resources when planning infrastructure.", "structured_data": {"key_parameters": [{"name": "CPU/vCPU", "description": "Minimum CPU cycles required, with scaling as needed.", "example": "10 CPU cycles"}, {"name": "Memory", "description": "Memory requirements for n8n.", "example": "320 MB - 2 GB"}, {"name": "Database", "description": "Database size and type for n8n.", "example": "512 MB - 4 GB SSD, SQLite or PostgreSQL"}], "code_block": null}, "keywords": ["n8n", "component sizing", "CPU", "memory", "database"]}
{"content_type": "General Concept", "section_title": "Database considerations", "user_question": "What should I consider when choosing a database for n8n?", "concise_answer": "When choosing a database for n8n, consider the flexibility to choose between SQLite and PostgreSQL. Each has its own advantages and disadvantages. n8n recommends a dedicated database for each instance to prevent dependencies and performance issues. If using PostgreSQL, ensure the database exists and the user has full permissions. Avoid using the tablePrefix option as it will be deprecated.", "structured_data": {"key_parameters": [{"name": "Database", "description": "Type of database used by n8n.", "example": "SQLite or PostgreSQL"}, {"name": "Dedicated database", "description": "Recommendation for each n8n instance to have its own database.", "example": "true"}, {"name": "Postgres schema", "description": "Use Postgres's schema feature if a dedicated database is not possible.", "example": "true"}], "code_block": null}, "keywords": ["n8n", "database", "SQLite", "PostgreSQL", "dedicated database"]}
{"content_type": "General Concept", "section_title": "Memory considerations", "user_question": "How much memory does an n8n instance typically require?", "concise_answer": "An n8n instance doesn't typically require large amounts of memory. For example, an n8n Cloud instance at idle requires approximately 100MB. However, the memory requirements depend on the nature of your workflows and the data being processed.", "structured_data": {"key_parameters": [{"name": "Memory Requirement", "description": "The amount of memory needed by an n8n instance.", "example": "100MB at idle"}], "code_block": null}, "keywords": ["n8n", "memory", "requirements", "workflows", "data processing"]}
{"content_type": "How-To Guide", "section_title": "White labelling", "user_question": "How can I customize the frontend styling and assets of n8n to match my brand?", "concise_answer": "To white label n8n, you need to customize the frontend styling and assets by changing two packages in n8n's source code: 'packages/design-system' for CSS styles and Vue.js components, and 'packages/editor-ui' for the Vue.js frontend build.", "structured_data": {"key_parameters": [{"name": "packages/design-system", "description": "Contains n8n's storybook design system with CSS styles and Vue.js components.", "example": null}, {"name": "packages/editor-ui", "description": "Contains n8n's Vue.js frontend build with Vite.js.", "example": null}], "code_block": null}, "keywords": ["n8n", "white labelling", "customization", "frontend", "branding"]}
{"content_type": "How-To Guide", "section_title": "Theme colors", "user_question": "How do I customize theme colors in n8n?", "concise_answer": "To customize theme colors in n8n, open 'packages/design-system/src/css/_tokens.scss' and modify the --color-primary variables. You can use a color converter tool to convert colors to HSL format.", "structured_data": {"key_parameters": [{"name": "--color-primary-h", "description": "Hue of the primary color in HSL format.", "example": "204"}, {"name": "--color-primary-s", "description": "Saturation of the primary color in HSL format.", "example": "100%"}, {"name": "--color-primary-l", "description": "Lightness of the primary color in HSL format.", "example": "50%"}], "code_block": "@mixin theme { --color-primary-h: 204; --color-primary-s: 100%; --color-primary-l: 50%; }"}, "keywords": ["n8n", "theme", "colors", "customization", "HSL"]}
{"content_type": "How-To Guide", "section_title": "Theme logos", "user_question": "How can I change the logo assets in n8n?", "concise_answer": "To change the logo assets in n8n, replace the files in 'packages/editor-ui/public' such as 'favicon-16x16.png', 'favicon-32x32.png', 'favicon.ico', 'n8n-logo.svg', 'n8n-logo-collapsed.svg', and 'n8n-logo-expanded.svg'. These are used in Vue.js components like MainSidebar.vue and Logo.vue.", "structured_data": {"key_parameters": [{"name": "Logo Assets", "description": "Files to be replaced for customizing logos.", "example": "n8n-logo.svg"}], "code_block": null}, "keywords": ["n8n", "logo", "assets", "customization", "Vue.js"]}
{"content_type": "Code Example", "section_title": "Example Logo Main Sidebar", "user_question": "What is an example of SCSS customization for the main sidebar logo in n8n?", "concise_answer": "Here is an example of SCSS customization for the main sidebar logo in n8n. It includes styles for display, alignment, and hover effects.", "structured_data": {"key_parameters": null, "code_block": ".logoItem { display: flex; justify-content: space-between; height: $header-height; line-height: $header-height; margin: 0 !important; border-radius: 0 !important; border-bottom: var(--border-width-base) var(--border-style-base) var(--color-background-xlight); cursor: default; &:hover, &:global(.is-active):hover { background-color: initial !important; } * { vertical-align: middle; } .icon { height: 18px; position: relative; left: 6px; } }"}, "keywords": ["n8n", "SCSS", "customization", "sidebar", "logo"]}
{"content_type": "General Concept", "section_title": "Text localization", "user_question": "How can I customize n8n's text to match my brand identity?", "concise_answer": "To customize n8n's text to match your brand identity, you can modify the English internationalization file located at packages/editor-ui/src/plugins/i18n/locales/en.json. This allows you to change occurrences of 'n8n' or 'n8n.io' to your brand name using the Vue I18n plugin.", "structured_data": {"key_parameters": [{"name": "en.json", "description": "The file where you can customize text for internationalization.", "example": "packages/editor-ui/src/plugins/i18n/locales/en.json"}], "code_block": null}, "keywords": ["localization", "branding", "internationalization", "Vue I18n", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Example About Modal Localization", "user_question": "How do I change the About Modal to reflect my brand in n8n?", "concise_answer": "To change the About Modal in n8n to reflect your brand, add the _brand.name translation key in the en.json file. This will replace 'n8n' with your brand name in the AboutModal.vue component.", "structured_data": {"key_parameters": [{"name": "_brand.name", "description": "Translation key to replace 'n8n' with your brand name.", "example": "\"_brand.name\": \"My Brand\""}], "code_block": "js { \"_brand.name\": \"My Brand\", \"about.aboutN8n\": \"About @:_brand.name\", \"about.n8nVersion\": \"@:_brand.name Version\" }"}, "keywords": ["About Modal", "branding", "localization", "n8n", "Vue.js"]}
{"content_type": "How-To Guide", "section_title": "Window title", "user_question": "How can I change the window title in n8n to my brand name?", "concise_answer": "To change the window title in n8n to your brand name, edit the index.html and titleChange.ts files located in the packages/editor-ui directory. Replace all occurrences of 'n8n' and 'n8n.io' with your brand name.", "structured_data": {"key_parameters": [{"name": "index.html", "description": "File to edit for changing the window title.", "example": "packages/editor-ui/index.html"}, {"name": "titleChange.ts", "description": "File to edit for changing the window title.", "example": "packages/editor-ui/src/components/mixins/titleChange.ts"}], "code_block": null}, "keywords": ["window title", "branding", "customization", "n8n", "index.html"]}
{"content_type": "How-To Guide", "section_title": "Workflow templates", "user_question": "How can I manage workflow templates in n8n?", "concise_answer": "In n8n, you can manage workflow templates by using the default library, disabling them, or creating your own custom library. This flexibility allows you to tailor the workflow templates to your specific needs.", "structured_data": {"key_parameters": [{"name": "Default behavior", "description": "Continue to use n8n's workflow templates library.", "example": null}, {"name": "Disable workflow templates", "description": "Option to disable the use of workflow templates.", "example": null}, {"name": "Custom workflow templates library", "description": "Create your own library of workflow templates.", "example": null}], "code_block": null}, "keywords": ["workflow templates", "n8n", "custom library", "disable templates", "manage templates"]}
{"content_type": "How-To Guide", "section_title": "Error handling", "user_question": "How can I handle errors in n8n workflows?", "concise_answer": "To handle errors in n8n workflows, you can set up an error workflow that triggers when an execution fails. This allows you to manage failures by sending alerts or taking corrective actions. The error workflow should start with the Error Trigger node.", "structured_data": {"key_parameters": [{"name": "Error workflow", "description": "A workflow that runs when an execution fails.", "example": null}, {"name": "Error Trigger", "description": "The starting node for an error workflow.", "example": null}], "code_block": null}, "keywords": ["error handling", "n8n", "error workflow", "execution failure", "alerts"]}
{"content_type": "General Concept", "section_title": "Execution order in multi-branch workflows", "user_question": "How does n8n determine the execution order in multi-branch workflows?", "concise_answer": "In n8n, the execution order in multi-branch workflows depends on the version. For workflows created before version 1.0, nodes are executed in parallel across branches. For version 1.0 and above, each branch is completed before moving to the next, ordered from topmost to bottommost on the canvas.", "structured_data": {"key_parameters": [{"name": "Execution order pre-1.0", "description": "Executes the first node of each branch, then the second, and so on.", "example": null}, {"name": "Execution order post-1.0", "description": "Executes each branch in turn, completing one before starting another.", "example": null}, {"name": "Branch order", "description": "Ordered based on position on the canvas, topmost to bottommost.", "example": null}], "code_block": null}, "keywords": ["execution order", "multi-branch workflows", "n8n", "workflow version", "node execution"]}
{"content_type": "General Concept", "section_title": "Flow logic", "user_question": "How does n8n handle complex logic in workflows?", "concise_answer": "n8n allows you to represent complex logic in workflows using various core nodes. These nodes help in splitting, merging, looping, waiting, creating sub-workflows, and handling errors. Understanding data structure and data flow within nodes is essential for building effective logic.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n", "workflow", "logic", "nodes", "data flow"]}
{"content_type": "Node Reference", "section_title": "Flow logic", "user_question": "What core nodes are available in n8n for building workflow logic?", "concise_answer": "n8n provides several core nodes for building workflow logic, including IF, Switch, Merge, Compare Datasets, Code, Loop Over Items, Wait, Execute Workflow, Execute Workflow Trigger, Stop And Error, and Error Trigger.", "structured_data": {"key_parameters": [{"name": "IF", "description": "Splits the workflow based on conditions.", "example": null}, {"name": "Switch", "description": "Routes data based on conditions.", "example": null}, {"name": "Merge", "description": "Combines data from different branches.", "example": null}, {"name": "Wait", "description": "Pauses the workflow until a condition is met.", "example": null}, {"name": "Execute Workflow", "description": "Runs another workflow as a sub-workflow.", "example": null}], "code_block": null}, "keywords": ["n8n", "core nodes", "workflow", "logic", "IF node"]}
{"content_type": "How-To Guide", "section_title": "Looping in n8n", "user_question": "How can I use loops in n8n to process multiple items?", "concise_answer": "In n8n, nodes automatically process multiple items by running once for each item. To send messages to multiple contacts, connect the relevant nodes and configure them. Use the 'Execute Once' parameter if you only want to process the first item.", "structured_data": {"key_parameters": [{"name": "Execute Once", "description": "Processes only the first item in a node.", "example": "true"}], "code_block": null}, "keywords": ["n8n", "looping", "multiple items", "workflow", "execute once"]}
{"content_type": "How-To Guide", "section_title": "Creating loops", "user_question": "How do I create a loop in an n8n workflow until a condition is met?", "concise_answer": "To create a loop in n8n, connect the output of one node to the input of a previous node and use an IF node to determine when to stop the loop. This setup allows the workflow to iterate until a specified condition is met.", "structured_data": {"key_parameters": [{"name": "IF node", "description": "Checks conditions to control loop execution.", "example": null}], "code_block": null}, "keywords": ["n8n", "loop", "workflow", "IF node", "condition"]}
{"content_type": "How-To Guide", "section_title": "Loop until all items are processed", "user_question": "How can I loop through all items in n8n until they are processed?", "concise_answer": "To loop through all items until they are processed in n8n, use the 'Loop Over Items' node. Set the 'Batch Size' to 1 to process each item individually. This method is useful for handling large data sets or avoiding API rate limits. The loop will automatically stop once all items are processed, so an additional IF node is not required.", "structured_data": {"key_parameters": [{"name": "Batch Size", "description": "Determines the number of items to process in each batch.", "example": "1"}], "code_block": null}, "keywords": ["loop", "items", "process", "n8n", "batch size"]}
{"content_type": "Node Reference", "section_title": "Node exceptions", "user_question": "Which n8n nodes require special loop handling?", "concise_answer": "Certain n8n nodes require special loop handling. For example, the HTTP Request node requires manual pagination handling if the API returns paginated results. Other nodes like CrateDB, Microsoft SQL, MongoDB, and TimescaleDB execute once for operations like 'insert' and 'update'.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["node exceptions", "loop", "n8n", "pagination", "execute once"]}
{"content_type": "How-To Guide", "section_title": "Merging data", "user_question": "How can I merge data streams in n8n?", "concise_answer": "In n8n, you can merge data streams using different nodes based on your workflow needs. Use the 'Merge' node to combine data from various sources, the 'Code' node for complex scenarios involving multiple executions, and the 'Compare Datasets' node to compare and merge data streams.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["merge", "data streams", "n8n", "combine", "compare"]}
{"content_type": "How-To Guide", "section_title": "Merge data from different data streams", "user_question": "What is the process to merge data from different data streams in n8n?", "concise_answer": "To merge data from different data streams in n8n, use the 'Merge' node. This node allows you to combine separate streams back into one. You can append datasets, keep only new items, or retain only existing items. Detailed operations are available in the Merge node documentation.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["merge", "data streams", "n8n", "append", "combine"]}
{"content_type": "Node Reference", "section_title": "Merge Node", "user_question": "How can I combine data from two different nodes in n8n?", "concise_answer": "You can use the Merge node in n8n to combine data from two previous nodes. This is useful for generating a single dataset from data produced by multiple nodes, even if the workflow hasn't split into separate data streams.", "structured_data": {"key_parameters": [{"name": "Merge Mode", "description": "Determines how the data from the two nodes is combined.", "example": "Append"}, {"name": "Node 1", "description": "The first node whose data you want to merge.", "example": "HTTP Request"}, {"name": "Node 2", "description": "The second node whose data you want to merge.", "example": "Set"}], "code_block": null}, "keywords": ["Merge node", "combine data", "n8n workflow", "data streams", "dataset"]}
{"content_type": "How-To Guide", "section_title": "Merge data from multiple node executions", "user_question": "How can I merge data from multiple node executions in n8n?", "concise_answer": "To merge data from multiple node executions in n8n, you can use the Code node. This is particularly useful in scenarios involving looping, where a node executes multiple times during a single workflow execution.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["merge data", "node executions", "Code node", "looping", "n8n"]}
{"content_type": "Node Reference", "section_title": "Compare, merge, and split again", "user_question": "What does the Compare Datasets node do in n8n?", "concise_answer": "The Compare Datasets node in n8n is used to compare data streams before merging them. It can output up to four different data streams, allowing for complex data manipulation and comparison.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["Compare Datasets", "data streams", "merge", "n8n", "node"]}
{"content_type": "How-To Guide", "section_title": "Splitting workflows with conditional nodes", "user_question": "How can I split workflows using conditional nodes in n8n?", "concise_answer": "In n8n, you can split workflows into multiple paths using the IF or Switch nodes. This allows a single-branch workflow to become a multi-branch workflow, enabling complex logic representation.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["splitting workflows", "conditional nodes", "IF node", "Switch node", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Sub-workflows", "user_question": "How can I call one workflow from another in n8n?", "concise_answer": "In n8n, you can call one workflow from another by using the Execute Workflow and Execute Sub-workflow Trigger nodes. This approach helps in building modular workflows and managing large workflows that might encounter memory issues.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["sub-workflows", "Execute Workflow", "modular workflows", "n8n", "memory issues"]}
{"content_type": "How-To Guide", "section_title": "Waiting", "user_question": "How can I make a workflow wait in n8n?", "concise_answer": "To make a workflow wait in n8n, use the Wait node. This allows you to pause a workflow mid-execution and resume it later, which is useful for rate limiting or waiting for external events.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["waiting", "Wait node", "pause workflow", "rate limiting", "n8n"]}
{"content_type": "How-To Guide", "section_title": "Contribute a workflow template", "user_question": "How can I contribute a workflow template to n8n?", "concise_answer": "To contribute a workflow template to n8n, you can create an integration for a third-party service. Refer to the node creation documentation for guidance on creating and publishing a community node.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["contribute", "workflow template", "n8n", "integration", "community node"]}
{"content_type": "How-To Guide", "section_title": "Contribute to the code", "user_question": "What are the ways I can contribute to the n8n code base?", "concise_answer": "You can contribute to the n8n code base by fixing issues reported on GitHub, adding additional functionality to existing third-party integrations, or adding new features to n8n. The CONTRIBUTING guide will help you set up your development environment.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["contribute", "code base", "n8n", "GitHub", "development"]}
{"content_type": "How-To Guide", "section_title": "Contribute to the docs", "user_question": "How can I contribute to the n8n documentation?", "concise_answer": "You can contribute to the n8n documentation by documenting nodes or fixing issues. The repository for the docs and the guidelines for contributing are available on GitHub.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["contribute", "documentation", "n8n", "GitHub", "docs"]}
{"content_type": "How-To Guide", "section_title": "Contribute to the blog", "user_question": "How do I submit a post to the n8n blog?", "concise_answer": "To submit a post to the n8n blog, email your idea to marketing@n8n.io with the subject 'Blog contribution: [Your Topic]'. Write your post in a Google Doc following the style guide, and include any example workflows in a separate section. Provide a second Google Doc with your author details for credit.", "structured_data": {"key_parameters": [{"name": "Email Subject", "description": "The subject line for your email submission.", "example": "Blog contribution: [Your Topic]"}, {"name": "Google Doc", "description": "The format for submitting your blog post.", "example": null}, {"name": "Author Credit", "description": "Provide your full name, a short byline, and your image in a separate Google Doc.", "example": null}], "code_block": null}, "keywords": ["contribute", "blog", "n8n", "submission", "Google Doc"]}
{"content_type": "How-To Guide", "section_title": "Refer a candidate", "user_question": "How can I refer a candidate for a job at n8n?", "concise_answer": "To refer a candidate for a job at n8n, review the open positions and send an email to jobs@n8n.io with the subject 'Employee referral - [job title]'. Include a short description of the person you're referring and why. Tell your referral to apply through the careers page. If your referral passes the probationary period, you'll receive a €1,000 reward.", "structured_data": {"key_parameters": [{"name": "Email Subject", "description": "The subject line for your referral email.", "example": "Employee referral - [job title]"}, {"name": "Referral Reward", "description": "The reward for a successful referral after the probationary period.", "example": "€1,000"}], "code_block": null}, "keywords": ["refer", "candidate", "job", "n8n", "reward"]}
{"content_type": "How-To Guide", "section_title": "Get help with n8n", "user_question": "How can I get support for n8n issues?", "concise_answer": "For support with n8n, you can ask for help in the n8n forum where both the support team and community members can assist you. If you are experiencing issues with your Cloud instance or are an enterprise customer, you can contact help@n8n.io for support.", "structured_data": {"key_parameters": null, "code_block": null}, "keywords": ["n8n support", "n8n forum", "n8n help"]}
{"content_type": "How-To Guide", "section_title": "Use the About n8n debug tool", "user_question": "How do I use the About n8n debug tool to get help faster?", "concise_answer": "To use the About n8n debug tool, open the left-side panel, select 'Help', then 'About n8n'. This will open a modal displaying your current information. Use the 'Copy debug information' option to copy your details and include them in your forum post or support email for faster assistance.", "structured_data": {"key_parameters": [{"name": "Copy debug information", "description": "Option to copy current n8n instance information for support purposes.", "example": null}], "code_block": null}, "keywords": ["n8n debug tool", "n8n support", "n8n help"]}
{"content_type": "Node Reference", "section_title": "CLI commands for n8n", "user_question": "What are the CLI commands available in n8n?", "concise_answer": "n8n provides a CLI that allows you to perform actions such as starting workflows and exporting/importing workflows and credentials. The CLI commands can be used with self-hosted n8n installations, and the method to run them varies depending on the installation method (npm or Docker).", "structured_data": {"key_parameters": [{"name": "npm", "description": "The n8n command is directly available for use.", "example": "n8n"}, {"name": "Docker", "description": "The n8n command is available within your Docker container.", "example": "docker exec -u node -it"}], "code_block": "docker exec -u node -it"}, "keywords": ["n8n CLI", "n8n commands", "n8n Docker"]}
